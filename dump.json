[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/CompileError.js",
    "memberof": null,
    "longname": "src/CompileError.js",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "content": "/**\nAny error thrown by the compiler due to a problem with the input source code.\n*/\nexport default class CompileError extends Error {\n\tconstructor(warning) {\n\t\tsuper(warning.message)\n\t\t/** Location and description of the error. */\n\t\tthis.warning = warning\n\t}\n}\n\n/**\nAny problem with source code.\nDespite the name, this is used for both warnings and errors.\n*/\nexport class Warning {\n\tconstructor(loc, message) {\n\t\t/**\n\t\tSource location of the problem.\n\t\t@type {Loc}\n\t\t*/\n\t\tthis.loc = loc\n\t\t/**\n\t\tText description of the problem.\n\t\t@type {string}\n\t\t*/\n\t\tthis.message = message\n\t}\n\n\t/**\n\tApplies `codeFormatter` to parts of `this.message` created by {@link code}.\n\t@param {function(code: string)} codeFormatter\n\t@return\n\t\tGenerator yielding strings (for non-`code`)\n\t\tand results of `formatter(code)` for `code` parts.\n\t*/\n\t* messageParts(codeFormatter) {\n\t\tconst message = this.message\n\t\tconst codeRegex = /{{(.*?)}}/g\n\t\tlet prevIdx = 0\n\t\twhile (true) {\n\t\t\tconst match = codeRegex.exec(message)\n\t\t\tif (match === null) {\n\t\t\t\tyield message.slice(prevIdx, message.length)\n\t\t\t\tbreak\n\t\t\t} else {\n\t\t\t\tyield message.slice(prevIdx, match.index)\n\t\t\t\tyield codeFormatter(match[1])\n\t\t\t\tprevIdx = codeRegex.lastIndex\n\t\t\t}\n\t\t}\n\t}\n}\n\n/** Used when generating warning messages to highlight a part of that message. */\nexport const code = str =>\n\t`{{${str}}}`\n"
  },
  {
    "__docId__": 1,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CompileError",
    "memberof": "src/CompileError.js",
    "longname": "src/CompileError.js~CompileError",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/CompileError.js",
    "importStyle": "CompileError",
    "description": "Any error thrown by the compiler due to a problem with the input source code.",
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/CompileError.js~CompileError",
    "longname": "src/CompileError.js~CompileError#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "warning",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 3,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "warning",
    "memberof": "src/CompileError.js~CompileError",
    "longname": "src/CompileError.js~CompileError#warning",
    "access": null,
    "description": "Location and description of the error.",
    "lineNumber": 8,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Warning",
    "memberof": "src/CompileError.js",
    "longname": "src/CompileError.js~Warning",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/CompileError.js",
    "importStyle": "{Warning}",
    "description": "Any problem with source code.\nDespite the name, this is used for both warnings and errors.",
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 5,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/CompileError.js~Warning",
    "longname": "src/CompileError.js~Warning#constructor",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 6,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "loc",
    "memberof": "src/CompileError.js~Warning",
    "longname": "src/CompileError.js~Warning#loc",
    "access": null,
    "description": "Source location of the problem.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Loc"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 7,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "message",
    "memberof": "src/CompileError.js~Warning",
    "longname": "src/CompileError.js~Warning#message",
    "access": null,
    "description": "Text description of the problem.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 8,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "messageParts",
    "memberof": "src/CompileError.js~Warning",
    "longname": "src/CompileError.js~Warning#messageParts",
    "access": null,
    "description": "Applies `codeFormatter` to parts of `this.message` created by {@link code}.",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(code: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "codeFormatter",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Generator yielding strings (for non-`code`)\nand results of `formatter(code)` for `code` parts."
    },
    "generator": true
  },
  {
    "__docId__": 9,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "code",
    "memberof": "src/CompileError.js",
    "longname": "src/CompileError.js~code",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/CompileError.js",
    "importStyle": "{code}",
    "description": "Used when generating warning messages to highlight a part of that message.",
    "lineNumber": 56,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/compile.js",
    "memberof": null,
    "longname": "src/compile.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import CompileError from './CompileError'\nimport {setContext, unsetContext, warnings} from './private/context'\nimport lex from './private/lex/lex'\nimport parse from './private/parse/parse'\nimport render from './private/render'\nimport transpile from './private/transpile/transpile'\nimport {type} from './private/util'\nimport verify from './private/verify/verify'\n\n/**\n@param {string} source Mason source code for a single module.\n@param {object} opts\n@param {'\\t'|Number} [opts.indent='\\t']\n\tMason does not allow mixed kinds of indentation,\n\tso indent type must be set once here and used consistently.\n\tIf '\\t', use tabs to indent.\n\tIf a Number, indent with that many spaces. Should be an int 2 through 8.\n@param {string} [opts.mslPath='msl']\n\tPath to `msl`. This may be `msl/dist`.\n@param {boolean} [opts.checks=true]\n\tIf false, leave out type checks and assertions.\n@param {boolean} [opts.includeSourceMap=true] See @return for description.\n@param {boolen} [opts.importBoot=true]\n\tMost mason modules include `msl/private/boot`, which `msl`.\n\tIf you don't want to do this, much of the language will not work.\n\tThis is only intended for compiling `msl` itself.\n@return {{warnings: Array<Warning>, result: CompileError|string|{code: string, sourceMap: string}}}\n\t`CompileError`s are not thrown, but returned.\n\tThis allows us to return `warnings` as well.\n\n\tIf there is no error:\n\t`result` will be `{code: string, sourceMap: string}` if `opts.includeSourceMap`.\n\tOtherwise, it will just be the code (a string).\n*/\nexport default function compile(source, opts={}) {\n\ttype(source, String)\n\tsetContext(opts)\n\ttry {\n\t\tconst ast = parse(lex(source))\n\t\tconst esAst = transpile(ast, verify(ast))\n\t\treturn {warnings, result: render(esAst)}\n\t} catch (error) {\n\t\tif (!(error instanceof CompileError))\n\t\t\tthrow error\n\t\treturn {warnings, result: error}\n\t} finally {\n\t\tunsetContext()\n\t}\n}\n\n/**\nReturns a {@link MsAst} rather than transpiling it to JavaScript.\nParameters are the same as `compile`.\n*/\nexport function parseAst(source, opts={}) {\n\ttype(source, String)\n\tsetContext(opts)\n\ttry {\n\t\tconst ast = parse(lex(source))\n\t\tverify(ast)\n\t\treturn {warnings, result: ast}\n\t} catch (error) {\n\t\tif (!(error instanceof CompileError))\n\t\t\tthrow error\n\t\treturn {warnings, result: error}\n\t} finally {\n\t\tunsetContext()\n\t}\n}\n"
  },
  {
    "__docId__": 11,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "compile",
    "memberof": "src/compile.js",
    "longname": "src/compile.js~compile",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/compile.js",
    "importStyle": "compile",
    "description": null,
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "Mason source code for a single module."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "'\\t'",
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'\\t'",
        "defaultRaw": "'\\t'",
        "name": "opts.indent",
        "description": "Mason does not allow mixed kinds of indentation,\nso indent type must be set once here and used consistently.\nIf '\\t', use tabs to indent.\nIf a Number, indent with that many spaces. Should be an int 2 through 8."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'msl'",
        "defaultRaw": "'msl'",
        "name": "opts.mslPath",
        "description": "Path to `msl`. This may be `msl/dist`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opts.checks",
        "description": "If false, leave out type checks and assertions."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opts.includeSourceMap",
        "description": "See @return for description."
      },
      {
        "nullable": null,
        "types": [
          "boolen"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opts.importBoot",
        "description": "Most mason modules include `msl/private/boot`, which `msl`.\nIf you don't want to do this, much of the language will not work.\nThis is only intended for compiling `msl` itself."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{warnings: Array<Warning>, result: CompileError|string|{code: string, sourceMap: string}}"
      ],
      "spread": false,
      "description": "`CompileError`s are not thrown, but returned.\nThis allows us to return `warnings` as well.\nIf there is no error:\n`result` will be `{code: string, sourceMap: string}` if `opts.includeSourceMap`.\nOtherwise, it will just be the code (a string)."
    },
    "generator": false
  },
  {
    "__docId__": 12,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseAst",
    "memberof": "src/compile.js",
    "longname": "src/compile.js~parseAst",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/compile.js",
    "importStyle": "{parseAst}",
    "description": "Returns a {@link MsAst} rather than transpiling it to JavaScript.\nParameters are the same as `compile`.",
    "lineNumber": 55,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "opts",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 13,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/info.js",
    "memberof": null,
    "longname": "src/info.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Keywords, keywordName, reservedKeywords as reserved} from './private/Token'\n\n/**\nArray of the names of every keyword, not including reserved words.\nAlphabetically sorted.\n*/\nexport const keywords =\n\tObject.keys(Keywords).map(key => keywordName(Keywords[key])).sort()\n\n/**\nArray of the names of every reserved word.\nAlphabetically sorted.\n*/\nexport const reservedKeywords = reserved.sort()\n"
  },
  {
    "__docId__": 14,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "keywords",
    "memberof": "src/info.js",
    "longname": "src/info.js~keywords",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/info.js",
    "importStyle": "{keywords}",
    "description": "Array of the names of every keyword, not including reserved words.\nAlphabetically sorted.",
    "lineNumber": 7,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "reservedKeywords",
    "memberof": "src/info.js",
    "longname": "src/info.js~reservedKeywords",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/info.js",
    "importStyle": "{reservedKeywords}",
    "description": "Array of the names of every reserved word.\nAlphabetically sorted.",
    "lineNumber": 14,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/CompileOptions.js",
    "memberof": null,
    "longname": "src/private/CompileOptions.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import defaultBuiltins from './defaultBuiltins'\nimport {last, type} from './util'\n\n/**\nStores `opts` parameter to compile methods and supplies defaults.\nSee {@link compile} for description of options.\n*/\nexport default class CompileOptions {\n\tconstructor(opts) {\n\t\tconst define = (name, _default) => {\n\t\t\tthis[`_${name}`] = opts[name] === undefined ? _default : opts[name]\n\t\t}\n\n\t\tconst defaults = {\n\t\t\tincludeAmdefine: false,\n\t\t\tincludeSourceMap: true,\n\t\t\tlazyModules: false,\n\t\t\tuseStrict: true,\n\t\t\tchecks: true,\n\t\t\timportBoot: true,\n\t\t\tmslPath: 'msl',\n\t\t\tindent: '\\t'\n\t\t}\n\n\t\tconst allOpts = new Set(Object.keys(defaults).concat(['inFile', 'builtins']))\n\n\t\tfor (const _ in defaults)\n\t\t\tdefine(_, defaults[_])\n\n\t\tfor (const _ in opts)\n\t\t\tif (!allOpts.has(_))\n\t\t\t\tthrow new Error(`Unrecognized option ${_}`)\n\n\t\tconst inFile = opts.inFile\n\t\tif (inFile === undefined) {\n\t\t\tif (this._includeSourceMap)\n\t\t\t\tthrow new Error('Either supply `inFile` option or make `includeSourceMap` false.')\n\t\t} else {\n\t\t\ttype(inFile, String)\n\t\t\tthis._inFile = inFile\n\t\t}\n\n\t\tif (!(this._indent === '\\t' || 2 <= this._indent && this._indent <= 8))\n\t\t\tthrow new Error(`opts.indent must be '\\t' or a number 2-8, got: ${this._indent}`)\n\n\t\tconst builtins = opts.builtins || getDefaultBuiltins(this._mslPath)\n\t\tthis.builtinNameToPath = generateBuiltinsMap(builtins)\n\t}\n\n\tindent() {\n\t\treturn this._indent\n\t}\n\n\tmoduleName() {\n\t\treturn this._inFile === undefined ? 'anonymous' : noExt(basename(this._inFile))\n\t}\n\n\tjsBaseName() { return `${this.moduleName()}.js` }\n\tmodulePath() { return this._inFile }\n\n\tincludeChecks() { return this._checks }\n\n\tincludeAmdefine() { return this._includeAmdefine }\n\tincludeSourceMap() { return this._includeSourceMap }\n\tincludeUseStrict() { return this._useStrict }\n\n\tlazyModule() { return this._lazyModules }\n\n\timportBoot() { return this._importBoot }\n\tbootPath() { return `${this._mslPath}/private/boot` }\n}\n\nfunction basename(path) {\n\treturn last(path.split('/'))\n}\n\nfunction extname(path) {\n\treturn last(path.split('.'))\n}\n\nfunction noExt(path) {\n\t// - 1 for the '.'\n\treturn path.substring(0, path.length - 1 - extname(path).length)\n}\n\nfunction getDefaultBuiltins(mslPath) {\n\tconst builtins = Object.assign({}, defaultBuiltins)\n\tif (mslPath !== 'msl')\n\t\tfor (let key in builtins) {\n\t\t\tconst x = builtins[key]\n\t\t\tdelete builtins[key]\n\t\t\tbuiltins[key.replace(/msl/g, mslPath)] = x\n\t\t}\n\treturn builtins\n}\n\nfunction generateBuiltinsMap(builtins) {\n\tconst m = new Map()\n\tfor (const path in builtins) {\n\t\tconst realPath = path.replace(/\\./g, '/')\n\t\tfor (let imported of builtins[path]) {\n\t\t\tif (imported === '_')\n\t\t\t\timported = last(path.split('.'))\n\t\t\tif (m.has(imported))\n\t\t\t\tthrow new Error(`Builtin ${imported} defined more than once.`)\n\t\t\tm.set(imported, realPath)\n\t\t}\n\t}\n\treturn m\n}\n"
  },
  {
    "__docId__": 17,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CompileOptions",
    "memberof": "src/private/CompileOptions.js",
    "longname": "src/private/CompileOptions.js~CompileOptions",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/CompileOptions.js",
    "importStyle": "CompileOptions",
    "description": "Stores `opts` parameter to compile methods and supplies defaults.\nSee {@link compile} for description of options.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 18,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/CompileOptions.js~CompileOptions",
    "longname": "src/private/CompileOptions.js~CompileOptions#constructor",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "opts",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 19,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_inFile",
    "memberof": "src/private/CompileOptions.js~CompileOptions",
    "longname": "src/private/CompileOptions.js~CompileOptions#_inFile",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "builtinNameToPath",
    "memberof": "src/private/CompileOptions.js~CompileOptions",
    "longname": "src/private/CompileOptions.js~CompileOptions#builtinNameToPath",
    "access": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 21,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "indent",
    "memberof": "src/private/CompileOptions.js~CompileOptions",
    "longname": "src/private/CompileOptions.js~CompileOptions#indent",
    "access": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 22,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "moduleName",
    "memberof": "src/private/CompileOptions.js~CompileOptions",
    "longname": "src/private/CompileOptions.js~CompileOptions#moduleName",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 23,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "jsBaseName",
    "memberof": "src/private/CompileOptions.js~CompileOptions",
    "longname": "src/private/CompileOptions.js~CompileOptions#jsBaseName",
    "access": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 24,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "modulePath",
    "memberof": "src/private/CompileOptions.js~CompileOptions",
    "longname": "src/private/CompileOptions.js~CompileOptions#modulePath",
    "access": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 25,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "includeChecks",
    "memberof": "src/private/CompileOptions.js~CompileOptions",
    "longname": "src/private/CompileOptions.js~CompileOptions#includeChecks",
    "access": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 26,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "includeAmdefine",
    "memberof": "src/private/CompileOptions.js~CompileOptions",
    "longname": "src/private/CompileOptions.js~CompileOptions#includeAmdefine",
    "access": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "includeSourceMap",
    "memberof": "src/private/CompileOptions.js~CompileOptions",
    "longname": "src/private/CompileOptions.js~CompileOptions#includeSourceMap",
    "access": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "includeUseStrict",
    "memberof": "src/private/CompileOptions.js~CompileOptions",
    "longname": "src/private/CompileOptions.js~CompileOptions#includeUseStrict",
    "access": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 29,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "lazyModule",
    "memberof": "src/private/CompileOptions.js~CompileOptions",
    "longname": "src/private/CompileOptions.js~CompileOptions#lazyModule",
    "access": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "importBoot",
    "memberof": "src/private/CompileOptions.js~CompileOptions",
    "longname": "src/private/CompileOptions.js~CompileOptions#importBoot",
    "access": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "bootPath",
    "memberof": "src/private/CompileOptions.js~CompileOptions",
    "longname": "src/private/CompileOptions.js~CompileOptions#bootPath",
    "access": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 32,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "basename",
    "memberof": "src/private/CompileOptions.js",
    "longname": "src/private/CompileOptions.js~basename",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/CompileOptions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 33,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "extname",
    "memberof": "src/private/CompileOptions.js",
    "longname": "src/private/CompileOptions.js~extname",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/CompileOptions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "noExt",
    "memberof": "src/private/CompileOptions.js",
    "longname": "src/private/CompileOptions.js~noExt",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/CompileOptions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getDefaultBuiltins",
    "memberof": "src/private/CompileOptions.js",
    "longname": "src/private/CompileOptions.js~getDefaultBuiltins",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/CompileOptions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "mslPath",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "generateBuiltinsMap",
    "memberof": "src/private/CompileOptions.js",
    "longname": "src/private/CompileOptions.js~generateBuiltinsMap",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/CompileOptions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [
      {
        "name": "builtins",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/MsAst.js",
    "memberof": null,
    "longname": "src/private/MsAst.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {cat, opIf} from './util'\n\n/**\nAny Mason AST.\nAll ASTs have a `loc` that they pass on to the esast during {@link transpile}.\n*/\nexport default class MsAst {\n\tconstructor(loc) {\n\t\t/** @type {Loc} */\n\t\tthis.loc = loc\n\t}\n}\n\n// LineContent\n\t/**\n\tAny valid part of a Block.\n\tNote that some {@link Val}s will still cause warnings if they appear as a line.\n\t*/\n\texport class LineContent extends MsAst {}\n\n\t/** Can only appear as lines in a Block. */\n\texport class Do extends LineContent {}\n\n\t/** Can appear in any expression. */\n\texport class Val extends LineContent {}\n\n// Module\n\t/** Whole source file. */\n\texport class Module extends MsAst {\n\t\tconstructor(loc, name, opComment, doImports, imports, lines) {\n\t\t\tsuper(loc)\n\t\t\t/**\n\t\t\tNot used for compilation, but useful for tools.\n\t\t\t@type {string}\n\t\t\t*/\n\t\t\tthis.name = name\n\t\t\t/** @type {?string} */\n\t\t\tthis.opComment = opComment\n\t\t\t/** @type {Array<ImportDo>} */\n\t\t\tthis.doImports = doImports\n\t\t\t/** @type {Array<Import>} */\n\t\t\tthis.imports = imports\n\t\t\t/** @type {Array<Do>} */\n\t\t\tthis.lines = lines\n\t\t}\n\t}\n\n\t/** Single import in an `import!` block. */\n\texport class ImportDo extends MsAst {\n\t\tconstructor(loc, path) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {string} */\n\t\t\tthis.path = path\n\t\t}\n\t}\n\n\t/**\n\tSingle import in an `import` block.\n\tIf path is 'global', this is transpiled specially because there's no actual 'global' module.\n\t*/\n\texport class Import extends MsAst {\n\t\tconstructor(loc, path, imported, opImportDefault) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {string} */\n\t\t\tthis.path = path\n\t\t\t/** @type {Array<LocalDeclare>} */\n\t\t\tthis.imported = imported\n\t\t\t/** @type {?LocalDeclare} */\n\t\t\tthis.opImportDefault = opImportDefault\n\t\t}\n\t}\n\n// Locals\n\t/**\n\tAll {@link LocalAccess}es must have some LocalDeclare to access.\n\tAll accessible identifiers are therefore LocalDeclares.\n\tThis includes imports, `this`, the focus, etc.\n\t*/\n\texport class LocalDeclare extends MsAst {\n\t\t/** LocalDeclare with no type. */\n\t\tstatic untyped(loc, name, kind) {\n\t\t\treturn new LocalDeclare(loc, name, null, kind)\n\t\t}\n\n\t\t/** LocalDeclare of just a name. */\n\t\tstatic plain(loc, name) {\n\t\t\treturn new LocalDeclare(loc, name, null, LocalDeclares.Eager)\n\t\t}\n\n\t\tstatic built(loc) {\n\t\t\treturn this.plain(loc, 'built')\n\t\t}\n\t\tstatic focus(loc) {\n\t\t\treturn this.plain(loc, '_')\n\t\t}\n\t\tstatic typedFocus(loc, type) {\n\t\t\treturn new LocalDeclare(loc, '_', type, LocalDeclares.Eager)\n\t\t}\n\t\tstatic this(loc) {\n\t\t\treturn this.plain(loc, 'this')\n\t\t}\n\n\t\tconstructor(loc, name, opType, kind) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {string} */\n\t\t\tthis.name = name\n\t\t\t/** @type {?Val} */\n\t\t\tthis.opType = opType\n\t\t\t/** @type {LocalDeclares} */\n\t\t\tthis.kind = kind\n\t\t}\n\n\t\tisLazy() {\n\t\t\treturn this.kind === LocalDeclares.Lazy\n\t\t}\n\t}\n\t/**\n\tKind of {@link LocalDeclare}.\n\t@enum {number}\n\t*/\n\texport const LocalDeclares = {\n\t\t/** Declared normally. */\n\t\tEager: 0,\n\t\t/** Declared with `~a`. */\n\t\tLazy: 1\n\t}\n\n\t/** Access the local `name`. */\n\texport class LocalAccess extends Val {\n\t\tstatic focus(loc) {\n\t\t\treturn new LocalAccess(loc, '_')\n\t\t}\n\n\t\tstatic this(loc) {\n\t\t\treturn new LocalAccess(loc, 'this')\n\t\t}\n\n\t\tconstructor(loc, name) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {string} */\n\t\t\tthis.name = name\n\t\t}\n\t}\n\n\t/** `{name} := {value}` */\n\texport class LocalMutate extends Do {\n\t\tconstructor(loc, name, value) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {string} */\n\t\t\tthis.name = name\n\t\t\t/** @type {Val} */\n\t\t\tthis.value = value\n\t\t}\n\t}\n\n// Assign\n\t/** Any expression creating new locals. */\n\texport class Assign extends Do {\n\t\t/**\n\t\tAll locals created by the assign.\n\t\t@abstract\n\t\t*/\n\t\tallAssignees() {}\n\t}\n\n\t/** `{assignee} =/:=/::= {value}` */\n\texport class AssignSingle extends Assign {\n\t\t/** Assign to `_`. */\n\t\tstatic focus(loc, value) {\n\t\t\treturn new AssignSingle(loc, LocalDeclare.focus(loc), value)\n\t\t}\n\n\t\tconstructor(loc, assignee, value) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {LocalDeclare} */\n\t\t\tthis.assignee = assignee\n\t\t\t/** @type {Val} */\n\t\t\tthis.value = value\n\t\t}\n\n\t\t/** @override */\n\t\tallAssignees() { return [this.assignee] }\n\t}\n\n\t/** `{assignees} =/:=/::= {value}` */\n\texport class AssignDestructure extends Assign {\n\t\tconstructor(loc, assignees, value) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Array<LocalDeclare>} */\n\t\t\tthis.assignees = assignees\n\t\t\t/** @type {Val} */\n\t\t\tthis.value = value\n\t\t}\n\n\t\t/**\n\t\tKind of locals this assigns to.\n\t\t@return {LocalDeclares}\n\t\t*/\n\t\tkind() {\n\t\t\treturn this.assignees[0].kind\n\t\t}\n\n\t\t/** @override */\n\t\tallAssignees() {\n\t\t\treturn this.assignees\n\t\t}\n\t}\n\n\t/** Kinds of {@link MemberSet} and {@link SetSub}. */\n\texport const Setters = {\n\t\tInit: 0,\n\t\tMutate: 1\n\t}\n\n\t/**\n\t`{object}.{name}:{opType} =/:=/::= {value}`\n\tAlso handles `{object}.\"{name}\"`.\n\t*/\n\texport class MemberSet extends Do {\n\t\tconstructor(loc, object, name, opType, kind, value) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.object = object\n\t\t\t/** @type {string | Val} */\n\t\t\tthis.name = name\n\t\t\t/** @type {?Val} */\n\t\t\tthis.opType = opType\n\t\t\t/** @type {Setters} */\n\t\t\tthis.kind = kind\n\t\t\t/** @type {Val} */\n\t\t\tthis.value = value\n\t\t}\n\t}\n\n\t/** `{object}[{subbeds}]:{opType} =/:=/::= {value}` */\n\texport class SetSub extends Do {\n\t\tconstructor(loc, object, subbeds, opType, kind, value) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.object = object\n\t\t\t/** @type {Array<Val>} */\n\t\t\tthis.subbeds = subbeds\n\t\t\t/** @type {?Val} */\n\t\t\tthis.opType = opType\n\t\t\t/** @type {Setters} */\n\t\t\tthis.kind = kind\n\t\t\t/** @type {Val} */\n\t\t\tthis.value = value\n\t\t}\n\t}\n\n// Errors\n\t/** `throw! {opThrown}` */\n\texport class Throw extends Do {\n\t\tconstructor(loc, opThrown) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {?Val} */\n\t\t\tthis.opThrown = opThrown\n\t\t}\n\t}\n\n\t/** `assert!/forbid! {condition} throw! {opThrown}` */\n\texport class Assert extends Do {\n\t\tconstructor(loc, negate, condition, opThrown) {\n\t\t\tsuper(loc)\n\t\t\t/**\n\t\t\tIf true, this is a `forbid!`.\n\t\t\t@type {boolean}\n\t\t\t*/\n\t\t\tthis.negate = negate\n\t\t\t/**\n\t\t\tCompiled specially if a {@link Call}.\n\t\t\t@type {Val}\n\t\t\t*/\n\t\t\tthis.condition = condition\n\t\t\t/** @type {?Val} */\n\t\t\tthis.opThrown = opThrown\n\t\t}\n\t}\n\n\t/**\n\t```except\n\t\ttry\n\t\t\t{try}\n\t\tcatch\n\t\t\t{opCatch}\n\t\telse\n\t\t\t{opElse}\n\t\tfinally\n\t\t\t{opFinally}```\n\t*/\n\texport class Except extends LineContent {\n\t\tconstructor(loc, _try, typedCatches, opCatchAll, opElse, opFinally) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Block} */\n\t\t\tthis.try = _try\n\t\t\t/** @type {Array<Catch>} */\n\t\t\tthis.typedCatches = typedCatches\n\t\t\t/**\n\t\t\topCatchAll.caught should have no type.\n\t\t\t@type {?Catch}\n\t\t\t*/\n\t\t\tthis.opCatchAll = opCatchAll\n\t\t\t/** @type {?Block} */\n\t\t\tthis.opElse = opElse\n\t\t\t/** @type {?Block} */\n\t\t\tthis.opFinally = opFinally\n\t\t}\n\n\t\tget allCatches() {\n\t\t\treturn cat(this.typedCatches, this.opCatchAll)\n\t\t}\n\t}\n\n\t/**\n\t```catch {caught}\n\t\t{block}```\n\t*/\n\texport class Catch extends MsAst {\n\t\tconstructor(loc, caught, block) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {LocalDeclare} */\n\t\t\tthis.caught = caught\n\t\t\t/** @type {Block} */\n\t\t\tthis.block = block\n\t\t}\n\t}\n\n// Block\n\t/** Lines in an indented block. */\n\texport class Block extends MsAst {\n\t\tconstructor(loc, opComment, lines) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {?string} */\n\t\t\tthis.opComment = opComment\n\t\t\t/** @type {Array<LineContent>} */\n\t\t\tthis.lines = lines\n\t\t}\n\t}\n\n\t/** Part of a builder. */\n\texport class BuildEntry extends MsAst {}\n\n\t/** Part of a {@link BlockObj}. */\n\texport class ObjEntry extends BuildEntry {\n\t\tconstructor(loc) {\n\t\t\tsuper(loc)\n\t\t}\n\t}\n\n\t/**\n\t`a. b`\n\tObjEntry that produces a new local.\n\t*/\n\texport class ObjEntryAssign extends ObjEntry {\n\t\tconstructor(loc, assign) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Assign} */\n\t\t\tthis.assign = assign\n\t\t}\n\t}\n\n\t/** ObjEntry that does not introduce a new local. */\n\texport class ObjEntryPlain extends ObjEntry {\n\t\t/**\n\t\t`{name}.` with no value.\n\t\tTakes a local of the same name from outside.\n\t\t*/\n\t\tstatic access(loc, name) {\n\t\t\treturn new ObjEntryPlain(loc, name, new LocalAccess(loc, name))\n\t\t}\n\n\t\tstatic name(loc, value) {\n\t\t\treturn new ObjEntryPlain(loc, 'name', value)\n\t\t}\n\n\t\tconstructor(loc, name, value) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {string | Val} */\n\t\t\tthis.name = name\n\t\t\t/** @type {Val} */\n\t\t\tthis.value = value\n\t\t}\n\t}\n\n\t/** `. {value}` or `... {value}` */\n\texport class BagEntry extends BuildEntry {\n\t\tconstructor(loc, value, isMany) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.value = value\n\t\t\t/** @type {boolean} */\n\t\t\tthis.isMany = isMany\n\t\t}\n\t}\n\n\t/** `key` -> `val` */\n\texport class MapEntry extends BuildEntry {\n\t\tconstructor(loc, key, val) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.key = key\n\t\t\t/** @type {Val} */\n\t\t\tthis.val = val\n\t\t}\n\t}\n\n// Conditionals\n\t/**\n\t```if/unless {test}\n\t\t{result}```\n\t*/\n\texport class Conditional extends LineContent {\n\t\tconstructor(loc, test, result, isUnless) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.test = test\n\t\t\t/** @type {Block|Val} */\n\t\t\tthis.result = result\n\t\t\t/** @type {boolean} */\n\t\t\tthis.isUnless = isUnless\n\t\t}\n\t}\n\n\t/** `cond {test} {ifTrue} {ifFalse}` */\n\texport class Cond extends Val {\n\t\tconstructor(loc, test, ifTrue, ifFalse) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.test = test\n\t\t\t/** @type {Val} */\n\t\t\tthis.ifTrue = ifTrue\n\t\t\t/** @type {Val} */\n\t\t\tthis.ifFalse = ifFalse\n\t\t}\n\t}\n\n// Fun\n\texport class FunLike extends Val {\n\t\tconstructor(loc, args, opRestArg) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Array<LocalDeclare>} */\n\t\t\tthis.args = args\n\t\t\t/** @type {?LocalDeclare} */\n\t\t\tthis.opRestArg = opRestArg\n\t\t\t// TODO: opReturnType should be common too\n\t\t}\n\t}\n\n\t/**\n\t```|:{opDeclareRes} {args} ...{opRestArg}\n\t\t{block}```\n\t*/\n\texport class Fun extends FunLike {\n\t\tconstructor(loc, args, opRestArg, block, opts={}) {\n\t\t\tsuper(loc, args, opRestArg)\n\t\t\t/** @type {Block} */\n\t\t\tthis.block = block\n\t\t\t/** @type {Funs} */\n\t\t\tthis.kind = opts.kind || Funs.Plain\n\t\t\t/** @type {?LocalDeclareThis} */\n\t\t\tthis.opDeclareThis = opIf(opts.isThisFun, () => LocalDeclare.this(this.loc))\n\t\t\t/** @type {boolean} */\n\t\t\tthis.isDo = opts.isDo || false\n\t\t\t/** @type {?Val} */\n\t\t\tthis.opReturnType = opts.opReturnType || null\n\t\t}\n\t}\n\t/**\n\tKinds of {@link Fun}.\n\t@enum {number}\n\t*/\n\texport const Funs = {\n\t\t/** Regular function (`|`) */\n\t\tPlain: 0,\n\t\t/** `$|` */\n\t\tAsync: 1,\n\t\t/** `~|` */\n\t\tGenerator: 2\n\t}\n\n\texport class FunAbstract extends FunLike {\n\t\tconstructor(loc, args, opRestArg, opReturnType, opComment) {\n\t\t\tsuper(loc, args, opRestArg)\n\t\t\t/** @type {?Val} */\n\t\t\tthis.opReturnType = opReturnType\n\t\t\t/** @type {?string} */\n\t\t\tthis.opComment = opComment\n\t\t}\n\t}\n\n\texport class Method extends Val {\n\t\tconstructor(loc, fun) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {FunLike} */\n\t\t\tthis.fun = fun\n\t\t}\n\t}\n\n// Async / Generator\n\n\t/** `$ {value} `*/\n\texport class Await extends Val {\n\t\tconstructor(loc, value) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.value = value\n\t\t}\n\t}\n\n\t/** `yield {opValue}` */\n\texport class Yield extends Val {\n\t\tconstructor(loc, opValue=null) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {?Val} */\n\t\t\tthis.opValue = opValue\n\t\t}\n\t}\n\n\t/** `yield* {value}` */\n\texport class YieldTo extends Val {\n\t\tconstructor(loc, value) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.value = value\n\t\t}\n\t}\n\n// Class\n\texport class Kind extends Val {\n\t\tconstructor(loc, superKinds, opComment=null, opDo=null, statics=[], methods=[]) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Array<Val>} */\n\t\t\tthis.superKinds = superKinds\n\t\t\t/** @type {?string} */\n\t\t\tthis.opComment = opComment\n\t\t\t/** @type {?ClassKindDo} */\n\t\t\tthis.opDo = opDo\n\t\t\t/** @type {Array<MethodImplLike>} */\n\t\t\tthis.statics = statics\n\t\t\t/** @type {Array<MethodImplLike>} */\n\t\t\tthis.methods = methods\n\t\t}\n\t}\n\n\t/**\n\t```class {opSuperClass}\n\t\t{opComment}\n\t\tdo!\n\t\t\t{opDo}\n\t\tstatic\n\t\t\t{statics}\n\t\t{opConstructor}\n\t\t{methods}```\n\t*/\n\texport class Class extends Val {\n\t\tconstructor(\n\t\t\tloc, opSuperClass, kinds,\n\t\t\topComment=null, opDo=null, statics=[], opConstructor=null, methods=[]) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {?Val} */\n\t\t\tthis.opSuperClass = opSuperClass\n\t\t\t/** @type {Array<Val>} */\n\t\t\tthis.kinds = kinds\n\t\t\t/** @type {?string} */\n\t\t\tthis.opComment = opComment\n\t\t\t/** @type {?ClassKindDo} */\n\t\t\tthis.opDo = opDo\n\t\t\t/** @type {Array<MethodImplLike>} */\n\t\t\tthis.statics = statics\n\t\t\t/** @type {?Constructor} */\n\t\t\tthis.opConstructor = opConstructor\n\t\t\t/** @type {Array<MethodImplLike>} */\n\t\t\tthis.methods = methods\n\t\t}\n\t}\n\n\t/** `do!` part of {@link Class} or {@link Kind}. */\n\texport class ClassKindDo extends MsAst {\n\t\tconstructor(loc, block) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Block} */\n\t\t\tthis.block = block\n\t\t\t/** @type {LocalDeclareFocus} */\n\t\t\tthis.declareFocus = LocalDeclare.focus(loc)\n\t\t}\n\t}\n\n\t/** `construct! {fun}` */\n\texport class Constructor extends MsAst {\n\t\tconstructor(loc, fun, memberArgs) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Fun} */\n\t\t\tthis.fun = fun\n\t\t\t/** @type {Array<LocalDeclare>} */\n\t\t\tthis.memberArgs = memberArgs\n\t\t}\n\t}\n\n\t/** Any part of {@link Class.statics} or {@link Class.methods}. */\n\texport class MethodImplLike extends MsAst {\n\t\tconstructor(loc, isMy, symbol) {\n\t\t\tsuper(loc)\n\t\t\t/**\n\t\t\tUsed by tools.\n\t\t\t@type {boolean}\n\t\t\t*/\n\t\t\tthis.isMy = isMy\n\t\t\t/** @type {string | Val} */\n\t\t\tthis.symbol = symbol\n\t\t}\n\t}\n\t/** `{symbol} {fun}` */\n\texport class MethodImpl extends MethodImplLike {\n\t\tconstructor(loc, isMy, symbol, fun) {\n\t\t\tsuper(loc, isMy, symbol)\n\t\t\t/** @type {Fun} */\n\t\t\tthis.fun = fun\n\t\t}\n\t}\n\t/**\n\t```get {symbol}\n\t\t{block}```\n\t*/\n\texport class MethodGetter extends MethodImplLike {\n\t\tconstructor(loc, isMy, symbol, block) {\n\t\t\tsuper(loc, isMy, symbol)\n\t\t\t/** @type {Block} */\n\t\t\tthis.block = block\n\t\t\tthis.declareThis = LocalDeclare.this(loc)\n\t\t}\n\t}\n\t/**\n\t```set {symbol}\n\t\t{block}```\n\t*/\n\texport class MethodSetter extends MethodImplLike {\n\t\tconstructor(loc, isMy, symbol, block) {\n\t\t\tsuper(loc, isMy, symbol)\n\t\t\t/** @type {Block} */\n\t\t\tthis.block = block\n\t\t\tthis.declareThis = LocalDeclare.this(loc)\n\t\t\tthis.declareFocus = LocalDeclare.focus(loc)\n\t\t}\n\t}\n\n\t/**\n\t`super {args}`.\n\tNever a {@link SuperMember}.\n\t*/\n\texport class SuperCall extends LineContent {\n\t\tconstructor(loc, args) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Array<Val | Spread>} */\n\t\t\tthis.args = args\n\t\t}\n\t}\n\n\t/** `super.{name}` or `super.\"{name}\"`. */\n\texport class SuperMember extends Val {\n\t\tconstructor(loc, name) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {string | Val} */\n\t\t\tthis.name = name\n\t\t}\n\t}\n\n// Calls\n\t/** `{called} {args}` */\n\texport class Call extends Val {\n\t\t/** `{tested}:{testType}` */\n\t\tstatic contains(loc, testType, tested) {\n\t\t\treturn new Call(loc, new SpecialVal(loc, SpecialVals.Contains), [testType, tested])\n\t\t}\n\n\t\t/** `{subbed}[{args}]` */\n\t\tstatic sub(loc, subbed, args) {\n\t\t\treturn new Call(loc, new SpecialVal(loc, SpecialVals.Sub), cat(subbed, args))\n\t\t}\n\n\t\t/** `del! {subbed}[{args}]` */\n\t\tstatic delSub(loc, subbed, args) {\n\t\t\treturn new Call(loc, new SpecialVal(loc, SpecialVals.DelSub), cat(subbed, args))\n\t\t}\n\n\t\tconstructor(loc, called, args) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.called = called\n\t\t\t/** @type {Array<Val | Spread>} */\n\t\t\tthis.args = args\n\t\t}\n\t}\n\n\t/** `new {type} {args}` */\n\texport class New extends Val {\n\t\tconstructor(loc, type, args) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.type = type\n\t\t\t/** @type {Val | Spread} */\n\t\t\tthis.args = args\n\t\t}\n\t}\n\n\t/** `...{spreaded}` */\n\texport class Spread extends MsAst {\n\t\tconstructor(loc, spreaded) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.spreaded = spreaded\n\t\t}\n\t}\n\n\t/** `~{value}` */\n\texport class Lazy extends Val {\n\t\tconstructor(loc, value) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.value = value\n\t\t}\n\t}\n\n// Case\n\t/** `case` */\n\texport class Case extends LineContent {\n\t\tconstructor(loc, opCased, parts, opElse) {\n\t\t\tsuper(loc)\n\t\t\t/**\n\t\t\tAssignee is always a LocalDeclareFocus.\n\t\t\t@type {?AssignSingle}\n\t\t\t*/\n\t\t\tthis.opCased = opCased\n\t\t\t/** @type {Array<CasePart>} */\n\t\t\tthis.parts = parts\n\t\t\t/** @type {?Block} */\n\t\t\tthis.opElse = opElse\n\t\t}\n\t}\n\t/** Single case in a {@link Case}. */\n\texport class CasePart extends MsAst {\n\t\tconstructor(loc, test, result) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val | Pattern} */\n\t\t\tthis.test = test\n\t\t\t/** @type {Block} */\n\t\t\tthis.result = result\n\t\t}\n\t}\n\n\t/** `:{type} {locals}` */\n\texport class Pattern extends MsAst {\n\t\tconstructor(loc, type, locals) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.type = type\n\t\t\t/** @type {Array<LocalDeclare>} */\n\t\t\tthis.locals = locals\n\t\t\t/** @type {LocalAccess} */\n\t\t\tthis.patterned = LocalAccess.focus(loc)\n\t\t}\n\t}\n\n// Switch\n\t/** `switch` */\n\texport class Switch extends LineContent {\n\t\tconstructor(loc, switched, parts, opElse) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.switched = switched\n\t\t\t/** @type {Array<SwitchPart>} */\n\t\t\tthis.parts =  parts\n\t\t\t/** @type {?Block} */\n\t\t\tthis.opElse = opElse\n\t\t}\n\t}\n\t/**\n\tSingle case in a {@link Switch}.\n\tMultiple values are specified with `or`.\n\t*/\n\texport class SwitchPart extends MsAst {\n\t\tconstructor(loc, values, result) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Array<Val>} */\n\t\t\tthis.values = values\n\t\t\t/** @type {Block} */\n\t\t\tthis.result = result\n\t\t}\n\t}\n\n// For\n\t/** `for` */\n\texport class For extends LineContent {\n\t\tconstructor(loc, opIteratee, block) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {?Iteratee} */\n\t\t\tthis.opIteratee = opIteratee\n\t\t\t/** @type {Block} */\n\t\t\tthis.block = block\n\t\t}\n\t}\n\n\t/**\n\t```$for {opIteratee}\n\t*/\n\texport class ForAsync extends Val {\n\t\tconstructor(loc, iteratee, block) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Iteratee} */\n\t\t\tthis.iteratee = iteratee\n\t\t\t/** @type {Block} */\n\t\t\tthis.block = block\n\t\t}\n\t}\n\n\t/**\n\t`@for`\n\tContains many {@link BagEntry} and {@link BagEntryMany}.\n\t*/\n\texport class ForBag extends Val {\n\t\tconstructor(loc, opIteratee, block) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {?Iteratee} */\n\t\t\tthis.opIteratee = opIteratee\n\t\t\t/** @type {Block} */\n\t\t\tthis.block = block\n\t\t\tthis.built = LocalDeclare.built(loc)\n\t\t}\n\t}\n\n\t/** `x in y` or just `y` (where the local is implicitly `_`). */\n\texport class Iteratee extends MsAst {\n\t\tconstructor(loc, element, bag) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {LocalDeclare} */\n\t\t\tthis.element = element\n\t\t\t/** @type {Val} */\n\t\t\tthis.bag = bag\n\t\t}\n\t}\n\n\t/** `break` */\n\texport class Break extends Do {\n\t\tconstructor(loc, opValue=null) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {?Val} */\n\t\t\tthis.opValue = opValue\n\t\t}\n\t}\n\n// Miscellaneous Vals\n\t/**\n\tA block appearing on its own (not as the block to an `if` or the like)\n\tis put into one of these.\n\te.g.:\n\n\t\tx =\n\t\t\ty = 1\n\t\t\ty\n\t*/\n\texport class BlockWrap extends Val {\n\t\tconstructor(loc, block) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Block} */\n\t\t\tthis.block = block\n\t\t}\n\t}\n\n\t/** One-line @ expression, such as `[ 1 2 3 ]`. */\n\texport class BagSimple extends Val {\n\t\tconstructor(loc, parts) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Array<Val>} */\n\t\t\tthis.parts = parts\n\t\t}\n\t}\n\n\t/** One-line object expression, such as `(a. 1 b. 2)`. */\n\texport class ObjSimple extends Val {\n\t\tconstructor(loc, pairs) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Array<ObjPair>} */\n\t\t\tthis.pairs = pairs\n\t\t}\n\t}\n\t/** Part of an {@link ObjSimple}. */\n\texport class ObjPair extends MsAst {\n\t\tconstructor(loc, key, value) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {string} */\n\t\t\tthis.key = key\n\t\t\t/** @type {Val} */\n\t\t\tthis.value = value\n\t\t}\n\t}\n\n\t/** `and` or `or` expression. */\n\texport class Logic extends Val {\n\t\tconstructor(loc, kind, args) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Logics} */\n\t\t\tthis.kind = kind\n\t\t\t/** @type {Array<Val>} */\n\t\t\tthis.args = args\n\t\t}\n\t}\n\t/**\n\tKinds of {@link Logic}.\n\t@enum {number}\n\t*/\n\texport const Logics = {\n\t\t/** `and` keyword*/\n\t\tAnd: 0,\n\t\t/** `or` keyword */\n\t\tOr: 1\n\t}\n\n\t/** `not` keyword */\n\texport class Not extends Val {\n\t\tconstructor(loc, arg) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.arg = arg\n\t\t}\n\t}\n\n\t/**\n\tLiteral number value.\n\tThis is both a Token and MsAst.\n\t*/\n\texport class NumberLiteral extends Val {\n\t\tconstructor(loc, value) {\n\t\t\tsuper(loc)\n\t\t\t/**\n\t\t\tStore as a string so we can distinguish `0xf` and `15`.\n\t\t\t@type {string}\n\t\t\t*/\n\t\t\tthis.value = value\n\t\t}\n\n\t\t/**\n\t\t@override\n\t\tSince this is used as a Token, it must implement toString.\n\t\t*/\n\t\ttoString() {\n\t\t\treturn this.value.toString()\n\t\t}\n\t}\n\n\t/** `{object}.{name}` or `{object}.\"{name}\"`. */\n\texport class Member extends Val {\n\t\tconstructor(loc, object, name) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.object = object\n\t\t\t/**\n\t\t\tIf a string, could still be any string, so may still compile to `a['string']`.\n\t\t\t@type {string | Val}\n\t\t\t*/\n\t\t\tthis.name = name\n\t\t}\n\t}\n\n\t/** {@link Quote} or {@link QuoteSimple}. */\n\texport class QuoteAbstract extends Val {}\n\n\t/**\n\tQuoted text. Always compiles to a template string.\n\tFor tagged templates, use {@link QuoteTaggedTemplate}.\n\t*/\n\texport class QuotePlain extends QuoteAbstract {\n\t\tconstructor(loc, parts) {\n\t\t\tsuper(loc)\n\t\t\t/**\n\t\t\t`parts` are Strings interleaved with Vals.\n\t\t\tpart Strings are raw values, meaning \"\\n\" is two characters.\n\t\t\tSince \"\\{\" is special to Mason, that's only one character.\n\t\t\t@type {Array<string | Val>}\n\t\t\t*/\n\t\t\tthis.parts = parts\n\t\t}\n\t}\n\n\t/** `{tag}\"{quote}\"` */\n\texport class QuoteTaggedTemplate extends Val {\n\t\tconstructor(loc, tag, quote) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.tag = tag\n\t\t\t/** @type {Quote} */\n\t\t\tthis.quote = quote\n\t\t}\n\t}\n\n\t/**\n\t`'{name}`.\n\tQuote consisting of a single name.\n\t*/\n\texport class QuoteSimple extends QuoteAbstract {\n\t\tconstructor(loc, name) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {string} */\n\t\t\tthis.name = name\n\t\t}\n\t}\n\n\t/**\n\t```pipe {value}\n\t\t{pipes}```\n\t*/\n\texport class Pipe extends Val {\n\t\tconstructor(loc, value, pipes) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.value = value\n\t\t\t/** @type {Array<Val>} */\n\t\t\tthis.pipes = pipes\n\t\t}\n\t}\n\n\t/**\n\t```with {value} [as {declare}]\n\t\t{block}```\n\t*/\n\texport class With extends Val {\n\t\tconstructor(loc, declare, value, block) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {LocalDeclare} */\n\t\t\tthis.declare = declare\n\t\t\t/** @type {Val} */\n\t\t\tthis.value = value\n\t\t\t/** @type {Block} */\n\t\t\tthis.block = block\n\t\t}\n\t}\n\n\t/** `&{name}` or `.&{name}` or `{object}.&{name}` */\n\texport class MemberFun extends Val {\n\t\tconstructor(loc, opObject, name) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {?Val} */\n\t\t\tthis.opObject = opObject\n\t\t\t/** @type {string | Val} */\n\t\t\tthis.name = name\n\t\t}\n\t}\n\n\t/** `&.{name}` */\n\texport class GetterFun extends Val {\n\t\tconstructor(loc, name) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {string | Val} */\n\t\t\tthis.name = name\n\t\t}\n\t}\n\n\t/** `&({value})` */\n\texport class SimpleFun extends Val {\n\t\tconstructor(loc, value) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.value = value\n\t\t}\n\t}\n\n\t/** `{start}..{end}` or `{start}...{end}`. */\n\texport class Range extends Val {\n\t\tconstructor(loc, start, end, isExclusive) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Val} */\n\t\t\tthis.start = start\n\t\t\t/**\n\t\t\tIf null, this is an infinite Range.\n\t\t\t@type {?Val}\n\t\t\t*/\n\t\t\tthis.end = end\n\t\t\t/** @type {boolean} */\n\t\t\tthis.isExclusive = isExclusive\n\t\t}\n\t}\n\n// Special\n\t/**\n\tA special action.\n\tAll SpecialDos are atomic and do not rely on context.\n\t*/\n\texport class SpecialDo extends Do {\n\t\tconstructor(loc, kind) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {SpecialDos} */\n\t\t\tthis.kind = kind\n\t\t}\n\t}\n\t/**\n\tKinds of {@link SpecialDo}.\n\t@enum {number}\n\t*/\n\texport const SpecialDos = {\n\t\tDebugger: 0\n\t}\n\n\t/**\n\tA special expression.\n\tAll SpecialVals are atomic and do not rely on context.\n\t*/\n\texport class SpecialVal extends Val {\n\t\tconstructor(loc, kind) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {SpecialVals} */\n\t\t\tthis.kind = kind\n\t\t}\n\t}\n\n\t/**\n\tKinds of {@link SpecialVal}.\n\t@enum {number}\n\t*/\n\texport const SpecialVals = {\n\t\t/** `_ms.contains` used for {@link Call.contains} */\n\t\tContains: 0,\n\t\t/** `_ms.delSub` used for {@link Call.delSub} */\n\t\tDelSub: 1,\n\t\t/** `false` literal */\n\t\tFalse: 2,\n\t\t/**\n\t\t`name` value is the name of the nearest assigned value. In:\n\n\t\t\tx = new Method\n\t\t\t\tname.\n\n\t\t`name` will be \"x\".\n\t\t*/\n\t\tName: 3,\n\t\t/** `null` literal */\n\t\tNull: 4,\n\t\t/** `_ms.sub` used for {@link Call.sub} */\n\t\tSub: 5,\n\t\t/** `true` literal */\n\t\tTrue: 6,\n\t\t/** `void 0` */\n\t\tUndefined: 7\n\t}\n\n\t/**\n\t`ignore` statement.\n\tKeeps the compiler from complaining about an unused local.\n\t*/\n\texport class Ignore extends Do {\n\t\tconstructor(loc, ignoredNames) {\n\t\t\tsuper(loc)\n\t\t\t/** @type {Array<string>} */\n\t\t\tthis.ignoredNames = ignoredNames\n\t\t}\n\t}\n"
  },
  {
    "__docId__": 38,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MsAst",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~MsAst",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "MsAst",
    "description": "Any Mason AST.\nAll ASTs have a `loc` that they pass on to the esast during {@link transpile}.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 39,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~MsAst",
    "longname": "src/private/MsAst.js~MsAst#constructor",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 40,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "loc",
    "memberof": "src/private/MsAst.js~MsAst",
    "longname": "src/private/MsAst.js~MsAst#loc",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "Loc"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 41,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "LineContent",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~LineContent",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{LineContent}",
    "description": "Any valid part of a Block.\nNote that some {@link Val}s will still cause warnings if they appear as a line.",
    "lineNumber": 19,
    "interface": false,
    "extends": [
      "MsAst"
    ]
  },
  {
    "__docId__": 42,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Do",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Do",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Do}",
    "description": "Can only appear as lines in a Block.",
    "lineNumber": 22,
    "interface": false,
    "extends": [
      "LineContent"
    ]
  },
  {
    "__docId__": 43,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Val",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Val",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Val}",
    "description": "Can appear in any expression.",
    "lineNumber": 25,
    "interface": false,
    "extends": [
      "LineContent"
    ]
  },
  {
    "__docId__": 44,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Module",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Module",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Module}",
    "description": "Whole source file.",
    "lineNumber": 29,
    "interface": false,
    "extends": [
      "MsAst"
    ]
  },
  {
    "__docId__": 45,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Module",
    "longname": "src/private/MsAst.js~Module#constructor",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "opComment",
        "types": [
          "*"
        ]
      },
      {
        "name": "doImports",
        "types": [
          "*"
        ]
      },
      {
        "name": "imports",
        "types": [
          "*"
        ]
      },
      {
        "name": "lines",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 46,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/private/MsAst.js~Module",
    "longname": "src/private/MsAst.js~Module#name",
    "access": null,
    "description": "Not used for compilation, but useful for tools.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 47,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opComment",
    "memberof": "src/private/MsAst.js~Module",
    "longname": "src/private/MsAst.js~Module#opComment",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 48,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "doImports",
    "memberof": "src/private/MsAst.js~Module",
    "longname": "src/private/MsAst.js~Module#doImports",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Array<ImportDo>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 49,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "imports",
    "memberof": "src/private/MsAst.js~Module",
    "longname": "src/private/MsAst.js~Module#imports",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Array<Import>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 50,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "lines",
    "memberof": "src/private/MsAst.js~Module",
    "longname": "src/private/MsAst.js~Module#lines",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "Array<Do>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 51,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ImportDo",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~ImportDo",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{ImportDo}",
    "description": "Single import in an `import!` block.",
    "lineNumber": 49,
    "interface": false,
    "extends": [
      "MsAst"
    ]
  },
  {
    "__docId__": 52,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~ImportDo",
    "longname": "src/private/MsAst.js~ImportDo#constructor",
    "access": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 53,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "path",
    "memberof": "src/private/MsAst.js~ImportDo",
    "longname": "src/private/MsAst.js~ImportDo#path",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Import",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Import",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Import}",
    "description": "Single import in an `import` block.\nIf path is 'global', this is transpiled specially because there's no actual 'global' module.",
    "lineNumber": 61,
    "interface": false,
    "extends": [
      "MsAst"
    ]
  },
  {
    "__docId__": 55,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Import",
    "longname": "src/private/MsAst.js~Import#constructor",
    "access": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "imported",
        "types": [
          "*"
        ]
      },
      {
        "name": "opImportDefault",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "path",
    "memberof": "src/private/MsAst.js~Import",
    "longname": "src/private/MsAst.js~Import#path",
    "access": null,
    "description": null,
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "imported",
    "memberof": "src/private/MsAst.js~Import",
    "longname": "src/private/MsAst.js~Import#imported",
    "access": null,
    "description": null,
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "Array<LocalDeclare>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opImportDefault",
    "memberof": "src/private/MsAst.js~Import",
    "longname": "src/private/MsAst.js~Import#opImportDefault",
    "access": null,
    "description": null,
    "lineNumber": 69,
    "type": {
      "nullable": true,
      "types": [
        "LocalDeclare"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "LocalDeclare",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~LocalDeclare",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{LocalDeclare}",
    "description": "All {@link LocalAccess}es must have some LocalDeclare to access.\nAll accessible identifiers are therefore LocalDeclares.\nThis includes imports, `this`, the focus, etc.",
    "lineNumber": 79,
    "interface": false,
    "extends": [
      "MsAst"
    ]
  },
  {
    "__docId__": 60,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "untyped",
    "memberof": "src/private/MsAst.js~LocalDeclare",
    "longname": "src/private/MsAst.js~LocalDeclare.untyped",
    "access": null,
    "description": "LocalDeclare with no type.",
    "lineNumber": 81,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "kind",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 61,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "plain",
    "memberof": "src/private/MsAst.js~LocalDeclare",
    "longname": "src/private/MsAst.js~LocalDeclare.plain",
    "access": null,
    "description": "LocalDeclare of just a name.",
    "lineNumber": 86,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 62,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "built",
    "memberof": "src/private/MsAst.js~LocalDeclare",
    "longname": "src/private/MsAst.js~LocalDeclare.built",
    "access": null,
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 63,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "focus",
    "memberof": "src/private/MsAst.js~LocalDeclare",
    "longname": "src/private/MsAst.js~LocalDeclare.focus",
    "access": null,
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 64,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "typedFocus",
    "memberof": "src/private/MsAst.js~LocalDeclare",
    "longname": "src/private/MsAst.js~LocalDeclare.typedFocus",
    "access": null,
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 65,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "this",
    "memberof": "src/private/MsAst.js~LocalDeclare",
    "longname": "src/private/MsAst.js~LocalDeclare.this",
    "access": null,
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 66,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~LocalDeclare",
    "longname": "src/private/MsAst.js~LocalDeclare#constructor",
    "access": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "opType",
        "types": [
          "*"
        ]
      },
      {
        "name": "kind",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 67,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/private/MsAst.js~LocalDeclare",
    "longname": "src/private/MsAst.js~LocalDeclare#name",
    "access": null,
    "description": null,
    "lineNumber": 106,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opType",
    "memberof": "src/private/MsAst.js~LocalDeclare",
    "longname": "src/private/MsAst.js~LocalDeclare#opType",
    "access": null,
    "description": null,
    "lineNumber": 108,
    "type": {
      "nullable": true,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "kind",
    "memberof": "src/private/MsAst.js~LocalDeclare",
    "longname": "src/private/MsAst.js~LocalDeclare#kind",
    "access": null,
    "description": null,
    "lineNumber": 110,
    "type": {
      "nullable": null,
      "types": [
        "LocalDeclares"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isLazy",
    "memberof": "src/private/MsAst.js~LocalDeclare",
    "longname": "src/private/MsAst.js~LocalDeclare#isLazy",
    "access": null,
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "LocalDeclares",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~LocalDeclares",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{LocalDeclares}",
    "description": "Kind of {@link LocalDeclare}.",
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@enum",
        "tagValue": "{number}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "LocalAccess",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~LocalAccess",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{LocalAccess}",
    "description": "Access the local `name`.",
    "lineNumber": 129,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 73,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "focus",
    "memberof": "src/private/MsAst.js~LocalAccess",
    "longname": "src/private/MsAst.js~LocalAccess.focus",
    "access": null,
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 74,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "this",
    "memberof": "src/private/MsAst.js~LocalAccess",
    "longname": "src/private/MsAst.js~LocalAccess.this",
    "access": null,
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 75,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~LocalAccess",
    "longname": "src/private/MsAst.js~LocalAccess#constructor",
    "access": null,
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 76,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/private/MsAst.js~LocalAccess",
    "longname": "src/private/MsAst.js~LocalAccess#name",
    "access": null,
    "description": null,
    "lineNumber": 141,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "LocalMutate",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~LocalMutate",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{LocalMutate}",
    "description": "`{name} := {value}`",
    "lineNumber": 146,
    "interface": false,
    "extends": [
      "Do"
    ]
  },
  {
    "__docId__": 78,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~LocalMutate",
    "longname": "src/private/MsAst.js~LocalMutate#constructor",
    "access": null,
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 79,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/private/MsAst.js~LocalMutate",
    "longname": "src/private/MsAst.js~LocalMutate#name",
    "access": null,
    "description": null,
    "lineNumber": 150,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/private/MsAst.js~LocalMutate",
    "longname": "src/private/MsAst.js~LocalMutate#value",
    "access": null,
    "description": null,
    "lineNumber": 152,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 81,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Assign",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Assign",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Assign}",
    "description": "Any expression creating new locals.",
    "lineNumber": 158,
    "interface": false,
    "extends": [
      "Do"
    ]
  },
  {
    "__docId__": 82,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "allAssignees",
    "memberof": "src/private/MsAst.js~Assign",
    "longname": "src/private/MsAst.js~Assign#allAssignees",
    "access": null,
    "description": "All locals created by the assign.",
    "lineNumber": 163,
    "params": [],
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 83,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AssignSingle",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~AssignSingle",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{AssignSingle}",
    "description": "`{assignee} =/:=/::= {value}`",
    "lineNumber": 167,
    "interface": false,
    "extends": [
      "Assign"
    ]
  },
  {
    "__docId__": 84,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "focus",
    "memberof": "src/private/MsAst.js~AssignSingle",
    "longname": "src/private/MsAst.js~AssignSingle.focus",
    "access": null,
    "description": "Assign to `_`.",
    "lineNumber": 169,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 85,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~AssignSingle",
    "longname": "src/private/MsAst.js~AssignSingle#constructor",
    "access": null,
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "assignee",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 86,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "assignee",
    "memberof": "src/private/MsAst.js~AssignSingle",
    "longname": "src/private/MsAst.js~AssignSingle#assignee",
    "access": null,
    "description": null,
    "lineNumber": 176,
    "type": {
      "nullable": null,
      "types": [
        "LocalDeclare"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/private/MsAst.js~AssignSingle",
    "longname": "src/private/MsAst.js~AssignSingle#value",
    "access": null,
    "description": null,
    "lineNumber": 178,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "allAssignees",
    "memberof": "src/private/MsAst.js~AssignSingle",
    "longname": "src/private/MsAst.js~AssignSingle#allAssignees",
    "access": null,
    "description": null,
    "lineNumber": 182,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 89,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AssignDestructure",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~AssignDestructure",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{AssignDestructure}",
    "description": "`{assignees} =/:=/::= {value}`",
    "lineNumber": 186,
    "interface": false,
    "extends": [
      "Assign"
    ]
  },
  {
    "__docId__": 90,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~AssignDestructure",
    "longname": "src/private/MsAst.js~AssignDestructure#constructor",
    "access": null,
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "assignees",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 91,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "assignees",
    "memberof": "src/private/MsAst.js~AssignDestructure",
    "longname": "src/private/MsAst.js~AssignDestructure#assignees",
    "access": null,
    "description": null,
    "lineNumber": 190,
    "type": {
      "nullable": null,
      "types": [
        "Array<LocalDeclare>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 92,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/private/MsAst.js~AssignDestructure",
    "longname": "src/private/MsAst.js~AssignDestructure#value",
    "access": null,
    "description": null,
    "lineNumber": 192,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "kind",
    "memberof": "src/private/MsAst.js~AssignDestructure",
    "longname": "src/private/MsAst.js~AssignDestructure#kind",
    "access": null,
    "description": "Kind of locals this assigns to.",
    "lineNumber": 199,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "LocalDeclares"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 94,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "allAssignees",
    "memberof": "src/private/MsAst.js~AssignDestructure",
    "longname": "src/private/MsAst.js~AssignDestructure#allAssignees",
    "access": null,
    "description": null,
    "lineNumber": 204,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Setters",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Setters",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Setters}",
    "description": "Kinds of {@link MemberSet} and {@link SetSub}.",
    "lineNumber": 210,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MemberSet",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~MemberSet",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{MemberSet}",
    "description": "`{object}.{name}:{opType} =/:=/::= {value}`\nAlso handles `{object}.\"{name}\"`.",
    "lineNumber": 219,
    "interface": false,
    "extends": [
      "Do"
    ]
  },
  {
    "__docId__": 97,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~MemberSet",
    "longname": "src/private/MsAst.js~MemberSet#constructor",
    "access": null,
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "opType",
        "types": [
          "*"
        ]
      },
      {
        "name": "kind",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 98,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "object",
    "memberof": "src/private/MsAst.js~MemberSet",
    "longname": "src/private/MsAst.js~MemberSet#object",
    "access": null,
    "description": null,
    "lineNumber": 223,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/private/MsAst.js~MemberSet",
    "longname": "src/private/MsAst.js~MemberSet#name",
    "access": null,
    "description": null,
    "lineNumber": 225,
    "type": {
      "nullable": null,
      "types": [
        "string ",
        " Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opType",
    "memberof": "src/private/MsAst.js~MemberSet",
    "longname": "src/private/MsAst.js~MemberSet#opType",
    "access": null,
    "description": null,
    "lineNumber": 227,
    "type": {
      "nullable": true,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "kind",
    "memberof": "src/private/MsAst.js~MemberSet",
    "longname": "src/private/MsAst.js~MemberSet#kind",
    "access": null,
    "description": null,
    "lineNumber": 229,
    "type": {
      "nullable": null,
      "types": [
        "Setters"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 102,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/private/MsAst.js~MemberSet",
    "longname": "src/private/MsAst.js~MemberSet#value",
    "access": null,
    "description": null,
    "lineNumber": 231,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SetSub",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~SetSub",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{SetSub}",
    "description": "`{object}[{subbeds}]:{opType} =/:=/::= {value}`",
    "lineNumber": 236,
    "interface": false,
    "extends": [
      "Do"
    ]
  },
  {
    "__docId__": 104,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~SetSub",
    "longname": "src/private/MsAst.js~SetSub#constructor",
    "access": null,
    "description": null,
    "lineNumber": 237,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "subbeds",
        "types": [
          "*"
        ]
      },
      {
        "name": "opType",
        "types": [
          "*"
        ]
      },
      {
        "name": "kind",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 105,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "object",
    "memberof": "src/private/MsAst.js~SetSub",
    "longname": "src/private/MsAst.js~SetSub#object",
    "access": null,
    "description": null,
    "lineNumber": 240,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "subbeds",
    "memberof": "src/private/MsAst.js~SetSub",
    "longname": "src/private/MsAst.js~SetSub#subbeds",
    "access": null,
    "description": null,
    "lineNumber": 242,
    "type": {
      "nullable": null,
      "types": [
        "Array<Val>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opType",
    "memberof": "src/private/MsAst.js~SetSub",
    "longname": "src/private/MsAst.js~SetSub#opType",
    "access": null,
    "description": null,
    "lineNumber": 244,
    "type": {
      "nullable": true,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "kind",
    "memberof": "src/private/MsAst.js~SetSub",
    "longname": "src/private/MsAst.js~SetSub#kind",
    "access": null,
    "description": null,
    "lineNumber": 246,
    "type": {
      "nullable": null,
      "types": [
        "Setters"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 109,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/private/MsAst.js~SetSub",
    "longname": "src/private/MsAst.js~SetSub#value",
    "access": null,
    "description": null,
    "lineNumber": 248,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 110,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Throw",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Throw",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Throw}",
    "description": "`throw! {opThrown}`",
    "lineNumber": 254,
    "interface": false,
    "extends": [
      "Do"
    ]
  },
  {
    "__docId__": 111,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Throw",
    "longname": "src/private/MsAst.js~Throw#constructor",
    "access": null,
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "opThrown",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 112,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opThrown",
    "memberof": "src/private/MsAst.js~Throw",
    "longname": "src/private/MsAst.js~Throw#opThrown",
    "access": null,
    "description": null,
    "lineNumber": 258,
    "type": {
      "nullable": true,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 113,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Assert",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Assert",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Assert}",
    "description": "`assert!/forbid! {condition} throw! {opThrown}`",
    "lineNumber": 263,
    "interface": false,
    "extends": [
      "Do"
    ]
  },
  {
    "__docId__": 114,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Assert",
    "longname": "src/private/MsAst.js~Assert#constructor",
    "access": null,
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "negate",
        "types": [
          "*"
        ]
      },
      {
        "name": "condition",
        "types": [
          "*"
        ]
      },
      {
        "name": "opThrown",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 115,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "negate",
    "memberof": "src/private/MsAst.js~Assert",
    "longname": "src/private/MsAst.js~Assert#negate",
    "access": null,
    "description": "If true, this is a `forbid!`.",
    "lineNumber": 270,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "condition",
    "memberof": "src/private/MsAst.js~Assert",
    "longname": "src/private/MsAst.js~Assert#condition",
    "access": null,
    "description": "Compiled specially if a {@link Call}.",
    "lineNumber": 275,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opThrown",
    "memberof": "src/private/MsAst.js~Assert",
    "longname": "src/private/MsAst.js~Assert#opThrown",
    "access": null,
    "description": null,
    "lineNumber": 277,
    "type": {
      "nullable": true,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 118,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Except",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Except",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Except}",
    "description": "```except\ntry\n{try}\ncatch\n{opCatch}\nelse\n{opElse}\nfinally\n{opFinally}```",
    "lineNumber": 292,
    "interface": false,
    "extends": [
      "LineContent"
    ]
  },
  {
    "__docId__": 119,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Except",
    "longname": "src/private/MsAst.js~Except#constructor",
    "access": null,
    "description": null,
    "lineNumber": 293,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "_try",
        "types": [
          "*"
        ]
      },
      {
        "name": "typedCatches",
        "types": [
          "*"
        ]
      },
      {
        "name": "opCatchAll",
        "types": [
          "*"
        ]
      },
      {
        "name": "opElse",
        "types": [
          "*"
        ]
      },
      {
        "name": "opFinally",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 120,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "try",
    "memberof": "src/private/MsAst.js~Except",
    "longname": "src/private/MsAst.js~Except#try",
    "access": null,
    "description": null,
    "lineNumber": 296,
    "type": {
      "nullable": null,
      "types": [
        "Block"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "typedCatches",
    "memberof": "src/private/MsAst.js~Except",
    "longname": "src/private/MsAst.js~Except#typedCatches",
    "access": null,
    "description": null,
    "lineNumber": 298,
    "type": {
      "nullable": null,
      "types": [
        "Array<Catch>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opCatchAll",
    "memberof": "src/private/MsAst.js~Except",
    "longname": "src/private/MsAst.js~Except#opCatchAll",
    "access": null,
    "description": "opCatchAll.caught should have no type.",
    "lineNumber": 303,
    "type": {
      "nullable": true,
      "types": [
        "Catch"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opElse",
    "memberof": "src/private/MsAst.js~Except",
    "longname": "src/private/MsAst.js~Except#opElse",
    "access": null,
    "description": null,
    "lineNumber": 305,
    "type": {
      "nullable": true,
      "types": [
        "Block"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 124,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opFinally",
    "memberof": "src/private/MsAst.js~Except",
    "longname": "src/private/MsAst.js~Except#opFinally",
    "access": null,
    "description": null,
    "lineNumber": 307,
    "type": {
      "nullable": true,
      "types": [
        "Block"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 125,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "allCatches",
    "memberof": "src/private/MsAst.js~Except",
    "longname": "src/private/MsAst.js~Except#allCatches",
    "access": null,
    "description": null,
    "lineNumber": 310,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 126,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Catch",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Catch",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Catch}",
    "description": "```catch {caught}\n{block}```",
    "lineNumber": 319,
    "interface": false,
    "extends": [
      "MsAst"
    ]
  },
  {
    "__docId__": 127,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Catch",
    "longname": "src/private/MsAst.js~Catch#constructor",
    "access": null,
    "description": null,
    "lineNumber": 320,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "caught",
        "types": [
          "*"
        ]
      },
      {
        "name": "block",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 128,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "caught",
    "memberof": "src/private/MsAst.js~Catch",
    "longname": "src/private/MsAst.js~Catch#caught",
    "access": null,
    "description": null,
    "lineNumber": 323,
    "type": {
      "nullable": null,
      "types": [
        "LocalDeclare"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "block",
    "memberof": "src/private/MsAst.js~Catch",
    "longname": "src/private/MsAst.js~Catch#block",
    "access": null,
    "description": null,
    "lineNumber": 325,
    "type": {
      "nullable": null,
      "types": [
        "Block"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 130,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Block",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Block",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Block}",
    "description": "Lines in an indented block.",
    "lineNumber": 331,
    "interface": false,
    "extends": [
      "MsAst"
    ]
  },
  {
    "__docId__": 131,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Block",
    "longname": "src/private/MsAst.js~Block#constructor",
    "access": null,
    "description": null,
    "lineNumber": 332,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "opComment",
        "types": [
          "*"
        ]
      },
      {
        "name": "lines",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 132,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opComment",
    "memberof": "src/private/MsAst.js~Block",
    "longname": "src/private/MsAst.js~Block#opComment",
    "access": null,
    "description": null,
    "lineNumber": 335,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "lines",
    "memberof": "src/private/MsAst.js~Block",
    "longname": "src/private/MsAst.js~Block#lines",
    "access": null,
    "description": null,
    "lineNumber": 337,
    "type": {
      "nullable": null,
      "types": [
        "Array<LineContent>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 134,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BuildEntry",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~BuildEntry",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{BuildEntry}",
    "description": "Part of a builder.",
    "lineNumber": 342,
    "interface": false,
    "extends": [
      "MsAst"
    ]
  },
  {
    "__docId__": 135,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ObjEntry",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~ObjEntry",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{ObjEntry}",
    "description": "Part of a {@link BlockObj}.",
    "lineNumber": 345,
    "interface": false,
    "extends": [
      "BuildEntry"
    ]
  },
  {
    "__docId__": 136,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~ObjEntry",
    "longname": "src/private/MsAst.js~ObjEntry#constructor",
    "access": null,
    "description": null,
    "lineNumber": 346,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 137,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ObjEntryAssign",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~ObjEntryAssign",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{ObjEntryAssign}",
    "description": "`a. b`\nObjEntry that produces a new local.",
    "lineNumber": 355,
    "interface": false,
    "extends": [
      "ObjEntry"
    ]
  },
  {
    "__docId__": 138,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~ObjEntryAssign",
    "longname": "src/private/MsAst.js~ObjEntryAssign#constructor",
    "access": null,
    "description": null,
    "lineNumber": 356,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "assign",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 139,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "assign",
    "memberof": "src/private/MsAst.js~ObjEntryAssign",
    "longname": "src/private/MsAst.js~ObjEntryAssign#assign",
    "access": null,
    "description": null,
    "lineNumber": 359,
    "type": {
      "nullable": null,
      "types": [
        "Assign"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 140,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ObjEntryPlain",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~ObjEntryPlain",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{ObjEntryPlain}",
    "description": "ObjEntry that does not introduce a new local.",
    "lineNumber": 364,
    "interface": false,
    "extends": [
      "ObjEntry"
    ]
  },
  {
    "__docId__": 141,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "access",
    "memberof": "src/private/MsAst.js~ObjEntryPlain",
    "longname": "src/private/MsAst.js~ObjEntryPlain.access",
    "access": null,
    "description": "`{name}.` with no value.\nTakes a local of the same name from outside.",
    "lineNumber": 369,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 142,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "name",
    "memberof": "src/private/MsAst.js~ObjEntryPlain",
    "longname": "src/private/MsAst.js~ObjEntryPlain.name",
    "access": null,
    "description": null,
    "lineNumber": 373,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 143,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~ObjEntryPlain",
    "longname": "src/private/MsAst.js~ObjEntryPlain#constructor",
    "access": null,
    "description": null,
    "lineNumber": 377,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 144,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/private/MsAst.js~ObjEntryPlain",
    "longname": "src/private/MsAst.js~ObjEntryPlain#name",
    "access": null,
    "description": null,
    "lineNumber": 380,
    "type": {
      "nullable": null,
      "types": [
        "string ",
        " Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/private/MsAst.js~ObjEntryPlain",
    "longname": "src/private/MsAst.js~ObjEntryPlain#value",
    "access": null,
    "description": null,
    "lineNumber": 382,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 146,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BagEntry",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~BagEntry",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{BagEntry}",
    "description": "`. {value}` or `... {value}`",
    "lineNumber": 387,
    "interface": false,
    "extends": [
      "BuildEntry"
    ]
  },
  {
    "__docId__": 147,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~BagEntry",
    "longname": "src/private/MsAst.js~BagEntry#constructor",
    "access": null,
    "description": null,
    "lineNumber": 388,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "isMany",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 148,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/private/MsAst.js~BagEntry",
    "longname": "src/private/MsAst.js~BagEntry#value",
    "access": null,
    "description": null,
    "lineNumber": 391,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isMany",
    "memberof": "src/private/MsAst.js~BagEntry",
    "longname": "src/private/MsAst.js~BagEntry#isMany",
    "access": null,
    "description": null,
    "lineNumber": 393,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 150,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MapEntry",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~MapEntry",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{MapEntry}",
    "description": "`key` -> `val`",
    "lineNumber": 398,
    "interface": false,
    "extends": [
      "BuildEntry"
    ]
  },
  {
    "__docId__": 151,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~MapEntry",
    "longname": "src/private/MsAst.js~MapEntry#constructor",
    "access": null,
    "description": null,
    "lineNumber": 399,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 152,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "key",
    "memberof": "src/private/MsAst.js~MapEntry",
    "longname": "src/private/MsAst.js~MapEntry#key",
    "access": null,
    "description": null,
    "lineNumber": 402,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 153,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "val",
    "memberof": "src/private/MsAst.js~MapEntry",
    "longname": "src/private/MsAst.js~MapEntry#val",
    "access": null,
    "description": null,
    "lineNumber": 404,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 154,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Conditional",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Conditional",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Conditional}",
    "description": "```if/unless {test}\n{result}```",
    "lineNumber": 413,
    "interface": false,
    "extends": [
      "LineContent"
    ]
  },
  {
    "__docId__": 155,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Conditional",
    "longname": "src/private/MsAst.js~Conditional#constructor",
    "access": null,
    "description": null,
    "lineNumber": 414,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "test",
        "types": [
          "*"
        ]
      },
      {
        "name": "result",
        "types": [
          "*"
        ]
      },
      {
        "name": "isUnless",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 156,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "test",
    "memberof": "src/private/MsAst.js~Conditional",
    "longname": "src/private/MsAst.js~Conditional#test",
    "access": null,
    "description": null,
    "lineNumber": 417,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 157,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "result",
    "memberof": "src/private/MsAst.js~Conditional",
    "longname": "src/private/MsAst.js~Conditional#result",
    "access": null,
    "description": null,
    "lineNumber": 419,
    "type": {
      "nullable": null,
      "types": [
        "Block",
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isUnless",
    "memberof": "src/private/MsAst.js~Conditional",
    "longname": "src/private/MsAst.js~Conditional#isUnless",
    "access": null,
    "description": null,
    "lineNumber": 421,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 159,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Cond",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Cond",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Cond}",
    "description": "`cond {test} {ifTrue} {ifFalse}`",
    "lineNumber": 426,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 160,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Cond",
    "longname": "src/private/MsAst.js~Cond#constructor",
    "access": null,
    "description": null,
    "lineNumber": 427,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "test",
        "types": [
          "*"
        ]
      },
      {
        "name": "ifTrue",
        "types": [
          "*"
        ]
      },
      {
        "name": "ifFalse",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 161,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "test",
    "memberof": "src/private/MsAst.js~Cond",
    "longname": "src/private/MsAst.js~Cond#test",
    "access": null,
    "description": null,
    "lineNumber": 430,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ifTrue",
    "memberof": "src/private/MsAst.js~Cond",
    "longname": "src/private/MsAst.js~Cond#ifTrue",
    "access": null,
    "description": null,
    "lineNumber": 432,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ifFalse",
    "memberof": "src/private/MsAst.js~Cond",
    "longname": "src/private/MsAst.js~Cond#ifFalse",
    "access": null,
    "description": null,
    "lineNumber": 434,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 164,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "FunLike",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~FunLike",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{FunLike}",
    "description": null,
    "lineNumber": 439,
    "undocument": true,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 165,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~FunLike",
    "longname": "src/private/MsAst.js~FunLike#constructor",
    "access": null,
    "description": null,
    "lineNumber": 440,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      },
      {
        "name": "opRestArg",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 166,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "args",
    "memberof": "src/private/MsAst.js~FunLike",
    "longname": "src/private/MsAst.js~FunLike#args",
    "access": null,
    "description": null,
    "lineNumber": 443,
    "type": {
      "nullable": null,
      "types": [
        "Array<LocalDeclare>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opRestArg",
    "memberof": "src/private/MsAst.js~FunLike",
    "longname": "src/private/MsAst.js~FunLike#opRestArg",
    "access": null,
    "description": null,
    "lineNumber": 445,
    "type": {
      "nullable": true,
      "types": [
        "LocalDeclare"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 168,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Fun",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Fun",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Fun}",
    "description": "```|:{opDeclareRes} {args} ...{opRestArg}\n{block}```",
    "lineNumber": 454,
    "interface": false,
    "extends": [
      "FunLike"
    ]
  },
  {
    "__docId__": 169,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Fun",
    "longname": "src/private/MsAst.js~Fun#constructor",
    "access": null,
    "description": null,
    "lineNumber": 455,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      },
      {
        "name": "opRestArg",
        "types": [
          "*"
        ]
      },
      {
        "name": "block",
        "types": [
          "*"
        ]
      },
      {
        "name": "opts",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 170,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "block",
    "memberof": "src/private/MsAst.js~Fun",
    "longname": "src/private/MsAst.js~Fun#block",
    "access": null,
    "description": null,
    "lineNumber": 458,
    "type": {
      "nullable": null,
      "types": [
        "Block"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "kind",
    "memberof": "src/private/MsAst.js~Fun",
    "longname": "src/private/MsAst.js~Fun#kind",
    "access": null,
    "description": null,
    "lineNumber": 460,
    "type": {
      "nullable": null,
      "types": [
        "Funs"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opDeclareThis",
    "memberof": "src/private/MsAst.js~Fun",
    "longname": "src/private/MsAst.js~Fun#opDeclareThis",
    "access": null,
    "description": null,
    "lineNumber": 462,
    "type": {
      "nullable": true,
      "types": [
        "LocalDeclareThis"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 173,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isDo",
    "memberof": "src/private/MsAst.js~Fun",
    "longname": "src/private/MsAst.js~Fun#isDo",
    "access": null,
    "description": null,
    "lineNumber": 464,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opReturnType",
    "memberof": "src/private/MsAst.js~Fun",
    "longname": "src/private/MsAst.js~Fun#opReturnType",
    "access": null,
    "description": null,
    "lineNumber": 466,
    "type": {
      "nullable": true,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 175,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Funs",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Funs",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Funs}",
    "description": "Kinds of {@link Fun}.",
    "lineNumber": 473,
    "unknown": [
      {
        "tagName": "@enum",
        "tagValue": "{number}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "FunAbstract",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~FunAbstract",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{FunAbstract}",
    "description": null,
    "lineNumber": 482,
    "undocument": true,
    "interface": false,
    "extends": [
      "FunLike"
    ]
  },
  {
    "__docId__": 177,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~FunAbstract",
    "longname": "src/private/MsAst.js~FunAbstract#constructor",
    "access": null,
    "description": null,
    "lineNumber": 483,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      },
      {
        "name": "opRestArg",
        "types": [
          "*"
        ]
      },
      {
        "name": "opReturnType",
        "types": [
          "*"
        ]
      },
      {
        "name": "opComment",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 178,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opReturnType",
    "memberof": "src/private/MsAst.js~FunAbstract",
    "longname": "src/private/MsAst.js~FunAbstract#opReturnType",
    "access": null,
    "description": null,
    "lineNumber": 486,
    "type": {
      "nullable": true,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opComment",
    "memberof": "src/private/MsAst.js~FunAbstract",
    "longname": "src/private/MsAst.js~FunAbstract#opComment",
    "access": null,
    "description": null,
    "lineNumber": 488,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 180,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Method",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Method",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Method}",
    "description": null,
    "lineNumber": 492,
    "undocument": true,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 181,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Method",
    "longname": "src/private/MsAst.js~Method#constructor",
    "access": null,
    "description": null,
    "lineNumber": 493,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "fun",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 182,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "fun",
    "memberof": "src/private/MsAst.js~Method",
    "longname": "src/private/MsAst.js~Method#fun",
    "access": null,
    "description": null,
    "lineNumber": 496,
    "type": {
      "nullable": null,
      "types": [
        "FunLike"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 183,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Await",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Await",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Await}",
    "description": "`$ {value} `",
    "lineNumber": 503,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 184,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Await",
    "longname": "src/private/MsAst.js~Await#constructor",
    "access": null,
    "description": null,
    "lineNumber": 504,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 185,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/private/MsAst.js~Await",
    "longname": "src/private/MsAst.js~Await#value",
    "access": null,
    "description": null,
    "lineNumber": 507,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 186,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Yield",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Yield",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Yield}",
    "description": "`yield {opValue}`",
    "lineNumber": 512,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 187,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Yield",
    "longname": "src/private/MsAst.js~Yield#constructor",
    "access": null,
    "description": null,
    "lineNumber": 513,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "opValue",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 188,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opValue",
    "memberof": "src/private/MsAst.js~Yield",
    "longname": "src/private/MsAst.js~Yield#opValue",
    "access": null,
    "description": null,
    "lineNumber": 516,
    "type": {
      "nullable": true,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 189,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "YieldTo",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~YieldTo",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{YieldTo}",
    "description": "`yield* {value}`",
    "lineNumber": 521,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 190,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~YieldTo",
    "longname": "src/private/MsAst.js~YieldTo#constructor",
    "access": null,
    "description": null,
    "lineNumber": 522,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 191,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/private/MsAst.js~YieldTo",
    "longname": "src/private/MsAst.js~YieldTo#value",
    "access": null,
    "description": null,
    "lineNumber": 525,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 192,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Kind",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Kind",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Kind}",
    "description": null,
    "lineNumber": 530,
    "undocument": true,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 193,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Kind",
    "longname": "src/private/MsAst.js~Kind#constructor",
    "access": null,
    "description": null,
    "lineNumber": 531,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "superKinds",
        "types": [
          "*"
        ]
      },
      {
        "name": "opComment",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      },
      {
        "name": "opDo",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      },
      {
        "name": "statics",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "methods",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 194,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "superKinds",
    "memberof": "src/private/MsAst.js~Kind",
    "longname": "src/private/MsAst.js~Kind#superKinds",
    "access": null,
    "description": null,
    "lineNumber": 534,
    "type": {
      "nullable": null,
      "types": [
        "Array<Val>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 195,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opComment",
    "memberof": "src/private/MsAst.js~Kind",
    "longname": "src/private/MsAst.js~Kind#opComment",
    "access": null,
    "description": null,
    "lineNumber": 536,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 196,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opDo",
    "memberof": "src/private/MsAst.js~Kind",
    "longname": "src/private/MsAst.js~Kind#opDo",
    "access": null,
    "description": null,
    "lineNumber": 538,
    "type": {
      "nullable": true,
      "types": [
        "ClassKindDo"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 197,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "statics",
    "memberof": "src/private/MsAst.js~Kind",
    "longname": "src/private/MsAst.js~Kind#statics",
    "access": null,
    "description": null,
    "lineNumber": 540,
    "type": {
      "nullable": null,
      "types": [
        "Array<MethodImplLike>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 198,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "methods",
    "memberof": "src/private/MsAst.js~Kind",
    "longname": "src/private/MsAst.js~Kind#methods",
    "access": null,
    "description": null,
    "lineNumber": 542,
    "type": {
      "nullable": null,
      "types": [
        "Array<MethodImplLike>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 199,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Class",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Class",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Class}",
    "description": "```class {opSuperClass}\n{opComment}\ndo!\n{opDo}\nstatic\n{statics}\n{opConstructor}\n{methods}```",
    "lineNumber": 556,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 200,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Class",
    "longname": "src/private/MsAst.js~Class#constructor",
    "access": null,
    "description": null,
    "lineNumber": 557,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "opSuperClass",
        "types": [
          "*"
        ]
      },
      {
        "name": "kinds",
        "types": [
          "*"
        ]
      },
      {
        "name": "opComment",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      },
      {
        "name": "opDo",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      },
      {
        "name": "statics",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "opConstructor",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      },
      {
        "name": "methods",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 201,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opSuperClass",
    "memberof": "src/private/MsAst.js~Class",
    "longname": "src/private/MsAst.js~Class#opSuperClass",
    "access": null,
    "description": null,
    "lineNumber": 562,
    "type": {
      "nullable": true,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "kinds",
    "memberof": "src/private/MsAst.js~Class",
    "longname": "src/private/MsAst.js~Class#kinds",
    "access": null,
    "description": null,
    "lineNumber": 564,
    "type": {
      "nullable": null,
      "types": [
        "Array<Val>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 203,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opComment",
    "memberof": "src/private/MsAst.js~Class",
    "longname": "src/private/MsAst.js~Class#opComment",
    "access": null,
    "description": null,
    "lineNumber": 566,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 204,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opDo",
    "memberof": "src/private/MsAst.js~Class",
    "longname": "src/private/MsAst.js~Class#opDo",
    "access": null,
    "description": null,
    "lineNumber": 568,
    "type": {
      "nullable": true,
      "types": [
        "ClassKindDo"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 205,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "statics",
    "memberof": "src/private/MsAst.js~Class",
    "longname": "src/private/MsAst.js~Class#statics",
    "access": null,
    "description": null,
    "lineNumber": 570,
    "type": {
      "nullable": null,
      "types": [
        "Array<MethodImplLike>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 206,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opConstructor",
    "memberof": "src/private/MsAst.js~Class",
    "longname": "src/private/MsAst.js~Class#opConstructor",
    "access": null,
    "description": null,
    "lineNumber": 572,
    "type": {
      "nullable": true,
      "types": [
        "Constructor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 207,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "methods",
    "memberof": "src/private/MsAst.js~Class",
    "longname": "src/private/MsAst.js~Class#methods",
    "access": null,
    "description": null,
    "lineNumber": 574,
    "type": {
      "nullable": null,
      "types": [
        "Array<MethodImplLike>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 208,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ClassKindDo",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~ClassKindDo",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{ClassKindDo}",
    "description": "`do!` part of {@link Class} or {@link Kind}.",
    "lineNumber": 579,
    "interface": false,
    "extends": [
      "MsAst"
    ]
  },
  {
    "__docId__": 209,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~ClassKindDo",
    "longname": "src/private/MsAst.js~ClassKindDo#constructor",
    "access": null,
    "description": null,
    "lineNumber": 580,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "block",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 210,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "block",
    "memberof": "src/private/MsAst.js~ClassKindDo",
    "longname": "src/private/MsAst.js~ClassKindDo#block",
    "access": null,
    "description": null,
    "lineNumber": 583,
    "type": {
      "nullable": null,
      "types": [
        "Block"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 211,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "declareFocus",
    "memberof": "src/private/MsAst.js~ClassKindDo",
    "longname": "src/private/MsAst.js~ClassKindDo#declareFocus",
    "access": null,
    "description": null,
    "lineNumber": 585,
    "type": {
      "nullable": null,
      "types": [
        "LocalDeclareFocus"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 212,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Constructor",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Constructor",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Constructor}",
    "description": "`construct! {fun}`",
    "lineNumber": 590,
    "interface": false,
    "extends": [
      "MsAst"
    ]
  },
  {
    "__docId__": 213,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Constructor",
    "longname": "src/private/MsAst.js~Constructor#constructor",
    "access": null,
    "description": null,
    "lineNumber": 591,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "fun",
        "types": [
          "*"
        ]
      },
      {
        "name": "memberArgs",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 214,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "fun",
    "memberof": "src/private/MsAst.js~Constructor",
    "longname": "src/private/MsAst.js~Constructor#fun",
    "access": null,
    "description": null,
    "lineNumber": 594,
    "type": {
      "nullable": null,
      "types": [
        "Fun"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 215,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "memberArgs",
    "memberof": "src/private/MsAst.js~Constructor",
    "longname": "src/private/MsAst.js~Constructor#memberArgs",
    "access": null,
    "description": null,
    "lineNumber": 596,
    "type": {
      "nullable": null,
      "types": [
        "Array<LocalDeclare>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 216,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MethodImplLike",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~MethodImplLike",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{MethodImplLike}",
    "description": "Any part of {@link Class.statics} or {@link Class.methods}.",
    "lineNumber": 601,
    "interface": false,
    "extends": [
      "MsAst"
    ]
  },
  {
    "__docId__": 217,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~MethodImplLike",
    "longname": "src/private/MsAst.js~MethodImplLike#constructor",
    "access": null,
    "description": null,
    "lineNumber": 602,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "isMy",
        "types": [
          "*"
        ]
      },
      {
        "name": "symbol",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 218,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isMy",
    "memberof": "src/private/MsAst.js~MethodImplLike",
    "longname": "src/private/MsAst.js~MethodImplLike#isMy",
    "access": null,
    "description": "Used by tools.",
    "lineNumber": 608,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 219,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "symbol",
    "memberof": "src/private/MsAst.js~MethodImplLike",
    "longname": "src/private/MsAst.js~MethodImplLike#symbol",
    "access": null,
    "description": null,
    "lineNumber": 610,
    "type": {
      "nullable": null,
      "types": [
        "string ",
        " Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 220,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MethodImpl",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~MethodImpl",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{MethodImpl}",
    "description": "`{symbol} {fun}`",
    "lineNumber": 614,
    "interface": false,
    "extends": [
      "MethodImplLike"
    ]
  },
  {
    "__docId__": 221,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~MethodImpl",
    "longname": "src/private/MsAst.js~MethodImpl#constructor",
    "access": null,
    "description": null,
    "lineNumber": 615,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "isMy",
        "types": [
          "*"
        ]
      },
      {
        "name": "symbol",
        "types": [
          "*"
        ]
      },
      {
        "name": "fun",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 222,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "fun",
    "memberof": "src/private/MsAst.js~MethodImpl",
    "longname": "src/private/MsAst.js~MethodImpl#fun",
    "access": null,
    "description": null,
    "lineNumber": 618,
    "type": {
      "nullable": null,
      "types": [
        "Fun"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 223,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MethodGetter",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~MethodGetter",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{MethodGetter}",
    "description": "```get {symbol}\n{block}```",
    "lineNumber": 625,
    "interface": false,
    "extends": [
      "MethodImplLike"
    ]
  },
  {
    "__docId__": 224,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~MethodGetter",
    "longname": "src/private/MsAst.js~MethodGetter#constructor",
    "access": null,
    "description": null,
    "lineNumber": 626,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "isMy",
        "types": [
          "*"
        ]
      },
      {
        "name": "symbol",
        "types": [
          "*"
        ]
      },
      {
        "name": "block",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 225,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "block",
    "memberof": "src/private/MsAst.js~MethodGetter",
    "longname": "src/private/MsAst.js~MethodGetter#block",
    "access": null,
    "description": null,
    "lineNumber": 629,
    "type": {
      "nullable": null,
      "types": [
        "Block"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 226,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "declareThis",
    "memberof": "src/private/MsAst.js~MethodGetter",
    "longname": "src/private/MsAst.js~MethodGetter#declareThis",
    "access": null,
    "description": null,
    "lineNumber": 630,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MethodSetter",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~MethodSetter",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{MethodSetter}",
    "description": "```set {symbol}\n{block}```",
    "lineNumber": 637,
    "interface": false,
    "extends": [
      "MethodImplLike"
    ]
  },
  {
    "__docId__": 228,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~MethodSetter",
    "longname": "src/private/MsAst.js~MethodSetter#constructor",
    "access": null,
    "description": null,
    "lineNumber": 638,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "isMy",
        "types": [
          "*"
        ]
      },
      {
        "name": "symbol",
        "types": [
          "*"
        ]
      },
      {
        "name": "block",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 229,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "block",
    "memberof": "src/private/MsAst.js~MethodSetter",
    "longname": "src/private/MsAst.js~MethodSetter#block",
    "access": null,
    "description": null,
    "lineNumber": 641,
    "type": {
      "nullable": null,
      "types": [
        "Block"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 230,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "declareThis",
    "memberof": "src/private/MsAst.js~MethodSetter",
    "longname": "src/private/MsAst.js~MethodSetter#declareThis",
    "access": null,
    "description": null,
    "lineNumber": 642,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "declareFocus",
    "memberof": "src/private/MsAst.js~MethodSetter",
    "longname": "src/private/MsAst.js~MethodSetter#declareFocus",
    "access": null,
    "description": null,
    "lineNumber": 643,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SuperCall",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~SuperCall",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{SuperCall}",
    "description": "`super {args}`.\nNever a {@link SuperMember}.",
    "lineNumber": 651,
    "interface": false,
    "extends": [
      "LineContent"
    ]
  },
  {
    "__docId__": 233,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~SuperCall",
    "longname": "src/private/MsAst.js~SuperCall#constructor",
    "access": null,
    "description": null,
    "lineNumber": 652,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 234,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "args",
    "memberof": "src/private/MsAst.js~SuperCall",
    "longname": "src/private/MsAst.js~SuperCall#args",
    "access": null,
    "description": null,
    "lineNumber": 655,
    "type": {
      "nullable": null,
      "types": [
        "Array<Val ",
        " Spread>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 235,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SuperMember",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~SuperMember",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{SuperMember}",
    "description": "`super.{name}` or `super.\"{name}\"`.",
    "lineNumber": 660,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 236,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~SuperMember",
    "longname": "src/private/MsAst.js~SuperMember#constructor",
    "access": null,
    "description": null,
    "lineNumber": 661,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 237,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/private/MsAst.js~SuperMember",
    "longname": "src/private/MsAst.js~SuperMember#name",
    "access": null,
    "description": null,
    "lineNumber": 664,
    "type": {
      "nullable": null,
      "types": [
        "string ",
        " Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 238,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Call",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Call",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Call}",
    "description": "`{called} {args}`",
    "lineNumber": 670,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 239,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "contains",
    "memberof": "src/private/MsAst.js~Call",
    "longname": "src/private/MsAst.js~Call.contains",
    "access": null,
    "description": "`{tested}:{testType}`",
    "lineNumber": 672,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "testType",
        "types": [
          "*"
        ]
      },
      {
        "name": "tested",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 240,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "sub",
    "memberof": "src/private/MsAst.js~Call",
    "longname": "src/private/MsAst.js~Call.sub",
    "access": null,
    "description": "`{subbed}[{args}]`",
    "lineNumber": 677,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "subbed",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 241,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "delSub",
    "memberof": "src/private/MsAst.js~Call",
    "longname": "src/private/MsAst.js~Call.delSub",
    "access": null,
    "description": "`del! {subbed}[{args}]`",
    "lineNumber": 682,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "subbed",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 242,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Call",
    "longname": "src/private/MsAst.js~Call#constructor",
    "access": null,
    "description": null,
    "lineNumber": 686,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "called",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 243,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "called",
    "memberof": "src/private/MsAst.js~Call",
    "longname": "src/private/MsAst.js~Call#called",
    "access": null,
    "description": null,
    "lineNumber": 689,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 244,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "args",
    "memberof": "src/private/MsAst.js~Call",
    "longname": "src/private/MsAst.js~Call#args",
    "access": null,
    "description": null,
    "lineNumber": 691,
    "type": {
      "nullable": null,
      "types": [
        "Array<Val ",
        " Spread>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 245,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "New",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~New",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{New}",
    "description": "`new {type} {args}`",
    "lineNumber": 696,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 246,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~New",
    "longname": "src/private/MsAst.js~New#constructor",
    "access": null,
    "description": null,
    "lineNumber": 697,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 247,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/private/MsAst.js~New",
    "longname": "src/private/MsAst.js~New#type",
    "access": null,
    "description": null,
    "lineNumber": 700,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 248,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "args",
    "memberof": "src/private/MsAst.js~New",
    "longname": "src/private/MsAst.js~New#args",
    "access": null,
    "description": null,
    "lineNumber": 702,
    "type": {
      "nullable": null,
      "types": [
        "Val ",
        " Spread"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 249,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Spread",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Spread",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Spread}",
    "description": "`...{spreaded}`",
    "lineNumber": 707,
    "interface": false,
    "extends": [
      "MsAst"
    ]
  },
  {
    "__docId__": 250,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Spread",
    "longname": "src/private/MsAst.js~Spread#constructor",
    "access": null,
    "description": null,
    "lineNumber": 708,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "spreaded",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 251,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "spreaded",
    "memberof": "src/private/MsAst.js~Spread",
    "longname": "src/private/MsAst.js~Spread#spreaded",
    "access": null,
    "description": null,
    "lineNumber": 711,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 252,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Lazy",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Lazy",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Lazy}",
    "description": "`~{value}`",
    "lineNumber": 716,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 253,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Lazy",
    "longname": "src/private/MsAst.js~Lazy#constructor",
    "access": null,
    "description": null,
    "lineNumber": 717,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 254,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/private/MsAst.js~Lazy",
    "longname": "src/private/MsAst.js~Lazy#value",
    "access": null,
    "description": null,
    "lineNumber": 720,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 255,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Case",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Case",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Case}",
    "description": "`case`",
    "lineNumber": 726,
    "interface": false,
    "extends": [
      "LineContent"
    ]
  },
  {
    "__docId__": 256,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Case",
    "longname": "src/private/MsAst.js~Case#constructor",
    "access": null,
    "description": null,
    "lineNumber": 727,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "opCased",
        "types": [
          "*"
        ]
      },
      {
        "name": "parts",
        "types": [
          "*"
        ]
      },
      {
        "name": "opElse",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 257,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opCased",
    "memberof": "src/private/MsAst.js~Case",
    "longname": "src/private/MsAst.js~Case#opCased",
    "access": null,
    "description": "Assignee is always a LocalDeclareFocus.",
    "lineNumber": 733,
    "type": {
      "nullable": true,
      "types": [
        "AssignSingle"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "parts",
    "memberof": "src/private/MsAst.js~Case",
    "longname": "src/private/MsAst.js~Case#parts",
    "access": null,
    "description": null,
    "lineNumber": 735,
    "type": {
      "nullable": null,
      "types": [
        "Array<CasePart>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opElse",
    "memberof": "src/private/MsAst.js~Case",
    "longname": "src/private/MsAst.js~Case#opElse",
    "access": null,
    "description": null,
    "lineNumber": 737,
    "type": {
      "nullable": true,
      "types": [
        "Block"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 260,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CasePart",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~CasePart",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{CasePart}",
    "description": "Single case in a {@link Case}.",
    "lineNumber": 741,
    "interface": false,
    "extends": [
      "MsAst"
    ]
  },
  {
    "__docId__": 261,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~CasePart",
    "longname": "src/private/MsAst.js~CasePart#constructor",
    "access": null,
    "description": null,
    "lineNumber": 742,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "test",
        "types": [
          "*"
        ]
      },
      {
        "name": "result",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 262,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "test",
    "memberof": "src/private/MsAst.js~CasePart",
    "longname": "src/private/MsAst.js~CasePart#test",
    "access": null,
    "description": null,
    "lineNumber": 745,
    "type": {
      "nullable": null,
      "types": [
        "Val ",
        " Pattern"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 263,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "result",
    "memberof": "src/private/MsAst.js~CasePart",
    "longname": "src/private/MsAst.js~CasePart#result",
    "access": null,
    "description": null,
    "lineNumber": 747,
    "type": {
      "nullable": null,
      "types": [
        "Block"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 264,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Pattern",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Pattern",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Pattern}",
    "description": "`:{type} {locals}`",
    "lineNumber": 752,
    "interface": false,
    "extends": [
      "MsAst"
    ]
  },
  {
    "__docId__": 265,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Pattern",
    "longname": "src/private/MsAst.js~Pattern#constructor",
    "access": null,
    "description": null,
    "lineNumber": 753,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "locals",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 266,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/private/MsAst.js~Pattern",
    "longname": "src/private/MsAst.js~Pattern#type",
    "access": null,
    "description": null,
    "lineNumber": 756,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 267,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "locals",
    "memberof": "src/private/MsAst.js~Pattern",
    "longname": "src/private/MsAst.js~Pattern#locals",
    "access": null,
    "description": null,
    "lineNumber": 758,
    "type": {
      "nullable": null,
      "types": [
        "Array<LocalDeclare>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 268,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "patterned",
    "memberof": "src/private/MsAst.js~Pattern",
    "longname": "src/private/MsAst.js~Pattern#patterned",
    "access": null,
    "description": null,
    "lineNumber": 760,
    "type": {
      "nullable": null,
      "types": [
        "LocalAccess"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 269,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Switch",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Switch",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Switch}",
    "description": "`switch`",
    "lineNumber": 766,
    "interface": false,
    "extends": [
      "LineContent"
    ]
  },
  {
    "__docId__": 270,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Switch",
    "longname": "src/private/MsAst.js~Switch#constructor",
    "access": null,
    "description": null,
    "lineNumber": 767,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "switched",
        "types": [
          "*"
        ]
      },
      {
        "name": "parts",
        "types": [
          "*"
        ]
      },
      {
        "name": "opElse",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 271,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "switched",
    "memberof": "src/private/MsAst.js~Switch",
    "longname": "src/private/MsAst.js~Switch#switched",
    "access": null,
    "description": null,
    "lineNumber": 770,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 272,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "parts",
    "memberof": "src/private/MsAst.js~Switch",
    "longname": "src/private/MsAst.js~Switch#parts",
    "access": null,
    "description": null,
    "lineNumber": 772,
    "type": {
      "nullable": null,
      "types": [
        "Array<SwitchPart>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 273,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opElse",
    "memberof": "src/private/MsAst.js~Switch",
    "longname": "src/private/MsAst.js~Switch#opElse",
    "access": null,
    "description": null,
    "lineNumber": 774,
    "type": {
      "nullable": true,
      "types": [
        "Block"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 274,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SwitchPart",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~SwitchPart",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{SwitchPart}",
    "description": "Single case in a {@link Switch}.\nMultiple values are specified with `or`.",
    "lineNumber": 781,
    "interface": false,
    "extends": [
      "MsAst"
    ]
  },
  {
    "__docId__": 275,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~SwitchPart",
    "longname": "src/private/MsAst.js~SwitchPart#constructor",
    "access": null,
    "description": null,
    "lineNumber": 782,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "result",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 276,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "values",
    "memberof": "src/private/MsAst.js~SwitchPart",
    "longname": "src/private/MsAst.js~SwitchPart#values",
    "access": null,
    "description": null,
    "lineNumber": 785,
    "type": {
      "nullable": null,
      "types": [
        "Array<Val>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 277,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "result",
    "memberof": "src/private/MsAst.js~SwitchPart",
    "longname": "src/private/MsAst.js~SwitchPart#result",
    "access": null,
    "description": null,
    "lineNumber": 787,
    "type": {
      "nullable": null,
      "types": [
        "Block"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 278,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "For",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~For",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{For}",
    "description": "`for`",
    "lineNumber": 793,
    "interface": false,
    "extends": [
      "LineContent"
    ]
  },
  {
    "__docId__": 279,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~For",
    "longname": "src/private/MsAst.js~For#constructor",
    "access": null,
    "description": null,
    "lineNumber": 794,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "opIteratee",
        "types": [
          "*"
        ]
      },
      {
        "name": "block",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 280,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opIteratee",
    "memberof": "src/private/MsAst.js~For",
    "longname": "src/private/MsAst.js~For#opIteratee",
    "access": null,
    "description": null,
    "lineNumber": 797,
    "type": {
      "nullable": true,
      "types": [
        "Iteratee"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 281,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "block",
    "memberof": "src/private/MsAst.js~For",
    "longname": "src/private/MsAst.js~For#block",
    "access": null,
    "description": null,
    "lineNumber": 799,
    "type": {
      "nullable": null,
      "types": [
        "Block"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 282,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ForAsync",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~ForAsync",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{ForAsync}",
    "description": "```$for {opIteratee}",
    "lineNumber": 806,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 283,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~ForAsync",
    "longname": "src/private/MsAst.js~ForAsync#constructor",
    "access": null,
    "description": null,
    "lineNumber": 807,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "iteratee",
        "types": [
          "*"
        ]
      },
      {
        "name": "block",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 284,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "iteratee",
    "memberof": "src/private/MsAst.js~ForAsync",
    "longname": "src/private/MsAst.js~ForAsync#iteratee",
    "access": null,
    "description": null,
    "lineNumber": 810,
    "type": {
      "nullable": null,
      "types": [
        "Iteratee"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "block",
    "memberof": "src/private/MsAst.js~ForAsync",
    "longname": "src/private/MsAst.js~ForAsync#block",
    "access": null,
    "description": null,
    "lineNumber": 812,
    "type": {
      "nullable": null,
      "types": [
        "Block"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 286,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ForBag",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~ForBag",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{ForBag}",
    "description": "`@for`\nContains many {@link BagEntry} and {@link BagEntryMany}.",
    "lineNumber": 820,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 287,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~ForBag",
    "longname": "src/private/MsAst.js~ForBag#constructor",
    "access": null,
    "description": null,
    "lineNumber": 821,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "opIteratee",
        "types": [
          "*"
        ]
      },
      {
        "name": "block",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 288,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opIteratee",
    "memberof": "src/private/MsAst.js~ForBag",
    "longname": "src/private/MsAst.js~ForBag#opIteratee",
    "access": null,
    "description": null,
    "lineNumber": 824,
    "type": {
      "nullable": true,
      "types": [
        "Iteratee"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "block",
    "memberof": "src/private/MsAst.js~ForBag",
    "longname": "src/private/MsAst.js~ForBag#block",
    "access": null,
    "description": null,
    "lineNumber": 826,
    "type": {
      "nullable": null,
      "types": [
        "Block"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "built",
    "memberof": "src/private/MsAst.js~ForBag",
    "longname": "src/private/MsAst.js~ForBag#built",
    "access": null,
    "description": null,
    "lineNumber": 827,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Iteratee",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Iteratee",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Iteratee}",
    "description": "`x in y` or just `y` (where the local is implicitly `_`).",
    "lineNumber": 832,
    "interface": false,
    "extends": [
      "MsAst"
    ]
  },
  {
    "__docId__": 292,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Iteratee",
    "longname": "src/private/MsAst.js~Iteratee#constructor",
    "access": null,
    "description": null,
    "lineNumber": 833,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "element",
        "types": [
          "*"
        ]
      },
      {
        "name": "bag",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 293,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "element",
    "memberof": "src/private/MsAst.js~Iteratee",
    "longname": "src/private/MsAst.js~Iteratee#element",
    "access": null,
    "description": null,
    "lineNumber": 836,
    "type": {
      "nullable": null,
      "types": [
        "LocalDeclare"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 294,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "bag",
    "memberof": "src/private/MsAst.js~Iteratee",
    "longname": "src/private/MsAst.js~Iteratee#bag",
    "access": null,
    "description": null,
    "lineNumber": 838,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 295,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Break",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Break",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Break}",
    "description": "`break`",
    "lineNumber": 843,
    "interface": false,
    "extends": [
      "Do"
    ]
  },
  {
    "__docId__": 296,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Break",
    "longname": "src/private/MsAst.js~Break#constructor",
    "access": null,
    "description": null,
    "lineNumber": 844,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "opValue",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 297,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opValue",
    "memberof": "src/private/MsAst.js~Break",
    "longname": "src/private/MsAst.js~Break#opValue",
    "access": null,
    "description": null,
    "lineNumber": 847,
    "type": {
      "nullable": true,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 298,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BlockWrap",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~BlockWrap",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{BlockWrap}",
    "description": "A block appearing on its own (not as the block to an `if` or the like)\nis put into one of these.\ne.g.:\nx =\ny = 1\ny",
    "lineNumber": 861,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 299,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~BlockWrap",
    "longname": "src/private/MsAst.js~BlockWrap#constructor",
    "access": null,
    "description": null,
    "lineNumber": 862,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "block",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 300,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "block",
    "memberof": "src/private/MsAst.js~BlockWrap",
    "longname": "src/private/MsAst.js~BlockWrap#block",
    "access": null,
    "description": null,
    "lineNumber": 865,
    "type": {
      "nullable": null,
      "types": [
        "Block"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 301,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BagSimple",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~BagSimple",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{BagSimple}",
    "description": "One-line @ expression, such as `[ 1 2 3 ]`.",
    "lineNumber": 870,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 302,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~BagSimple",
    "longname": "src/private/MsAst.js~BagSimple#constructor",
    "access": null,
    "description": null,
    "lineNumber": 871,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "parts",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 303,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "parts",
    "memberof": "src/private/MsAst.js~BagSimple",
    "longname": "src/private/MsAst.js~BagSimple#parts",
    "access": null,
    "description": null,
    "lineNumber": 874,
    "type": {
      "nullable": null,
      "types": [
        "Array<Val>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 304,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ObjSimple",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~ObjSimple",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{ObjSimple}",
    "description": "One-line object expression, such as `(a. 1 b. 2)`.",
    "lineNumber": 879,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 305,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~ObjSimple",
    "longname": "src/private/MsAst.js~ObjSimple#constructor",
    "access": null,
    "description": null,
    "lineNumber": 880,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "pairs",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 306,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "pairs",
    "memberof": "src/private/MsAst.js~ObjSimple",
    "longname": "src/private/MsAst.js~ObjSimple#pairs",
    "access": null,
    "description": null,
    "lineNumber": 883,
    "type": {
      "nullable": null,
      "types": [
        "Array<ObjPair>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 307,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ObjPair",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~ObjPair",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{ObjPair}",
    "description": "Part of an {@link ObjSimple}.",
    "lineNumber": 887,
    "interface": false,
    "extends": [
      "MsAst"
    ]
  },
  {
    "__docId__": 308,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~ObjPair",
    "longname": "src/private/MsAst.js~ObjPair#constructor",
    "access": null,
    "description": null,
    "lineNumber": 888,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 309,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "key",
    "memberof": "src/private/MsAst.js~ObjPair",
    "longname": "src/private/MsAst.js~ObjPair#key",
    "access": null,
    "description": null,
    "lineNumber": 891,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 310,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/private/MsAst.js~ObjPair",
    "longname": "src/private/MsAst.js~ObjPair#value",
    "access": null,
    "description": null,
    "lineNumber": 893,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 311,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Logic",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Logic",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Logic}",
    "description": "`and` or `or` expression.",
    "lineNumber": 898,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 312,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Logic",
    "longname": "src/private/MsAst.js~Logic#constructor",
    "access": null,
    "description": null,
    "lineNumber": 899,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "kind",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 313,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "kind",
    "memberof": "src/private/MsAst.js~Logic",
    "longname": "src/private/MsAst.js~Logic#kind",
    "access": null,
    "description": null,
    "lineNumber": 902,
    "type": {
      "nullable": null,
      "types": [
        "Logics"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 314,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "args",
    "memberof": "src/private/MsAst.js~Logic",
    "longname": "src/private/MsAst.js~Logic#args",
    "access": null,
    "description": null,
    "lineNumber": 904,
    "type": {
      "nullable": null,
      "types": [
        "Array<Val>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 315,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Logics",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Logics",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Logics}",
    "description": "Kinds of {@link Logic}.",
    "lineNumber": 911,
    "unknown": [
      {
        "tagName": "@enum",
        "tagValue": "{number}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Not",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Not",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Not}",
    "description": "`not` keyword",
    "lineNumber": 919,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 317,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Not",
    "longname": "src/private/MsAst.js~Not#constructor",
    "access": null,
    "description": null,
    "lineNumber": 920,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "arg",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 318,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "arg",
    "memberof": "src/private/MsAst.js~Not",
    "longname": "src/private/MsAst.js~Not#arg",
    "access": null,
    "description": null,
    "lineNumber": 923,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 319,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "NumberLiteral",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~NumberLiteral",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{NumberLiteral}",
    "description": "Literal number value.\nThis is both a Token and MsAst.",
    "lineNumber": 931,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 320,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~NumberLiteral",
    "longname": "src/private/MsAst.js~NumberLiteral#constructor",
    "access": null,
    "description": null,
    "lineNumber": 932,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 321,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/private/MsAst.js~NumberLiteral",
    "longname": "src/private/MsAst.js~NumberLiteral#value",
    "access": null,
    "description": "Store as a string so we can distinguish `0xf` and `15`.",
    "lineNumber": 938,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 322,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/private/MsAst.js~NumberLiteral",
    "longname": "src/private/MsAst.js~NumberLiteral#toString",
    "access": null,
    "description": null,
    "lineNumber": 945,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 323,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Member",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Member",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Member}",
    "description": "`{object}.{name}` or `{object}.\"{name}\"`.",
    "lineNumber": 951,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 324,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Member",
    "longname": "src/private/MsAst.js~Member#constructor",
    "access": null,
    "description": null,
    "lineNumber": 952,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 325,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "object",
    "memberof": "src/private/MsAst.js~Member",
    "longname": "src/private/MsAst.js~Member#object",
    "access": null,
    "description": null,
    "lineNumber": 955,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 326,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/private/MsAst.js~Member",
    "longname": "src/private/MsAst.js~Member#name",
    "access": null,
    "description": "If a string, could still be any string, so may still compile to `a['string']`.",
    "lineNumber": 960,
    "type": {
      "nullable": null,
      "types": [
        "string ",
        " Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 327,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "QuoteAbstract",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~QuoteAbstract",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{QuoteAbstract}",
    "description": "{@link Quote} or {@link QuoteSimple}.",
    "lineNumber": 965,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 328,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "QuotePlain",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~QuotePlain",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{QuotePlain}",
    "description": "Quoted text. Always compiles to a template string.\nFor tagged templates, use {@link QuoteTaggedTemplate}.",
    "lineNumber": 971,
    "interface": false,
    "extends": [
      "QuoteAbstract"
    ]
  },
  {
    "__docId__": 329,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~QuotePlain",
    "longname": "src/private/MsAst.js~QuotePlain#constructor",
    "access": null,
    "description": null,
    "lineNumber": 972,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "parts",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 330,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "parts",
    "memberof": "src/private/MsAst.js~QuotePlain",
    "longname": "src/private/MsAst.js~QuotePlain#parts",
    "access": null,
    "description": "`parts` are Strings interleaved with Vals.\npart Strings are raw values, meaning \"\\n\" is two characters.\nSince \"\\{\" is special to Mason, that's only one character.",
    "lineNumber": 980,
    "type": {
      "nullable": null,
      "types": [
        "Array<string ",
        " Val>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 331,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "QuoteTaggedTemplate",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~QuoteTaggedTemplate",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{QuoteTaggedTemplate}",
    "description": "`{tag}\"{quote}\"`",
    "lineNumber": 985,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 332,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~QuoteTaggedTemplate",
    "longname": "src/private/MsAst.js~QuoteTaggedTemplate#constructor",
    "access": null,
    "description": null,
    "lineNumber": 986,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "tag",
        "types": [
          "*"
        ]
      },
      {
        "name": "quote",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 333,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "tag",
    "memberof": "src/private/MsAst.js~QuoteTaggedTemplate",
    "longname": "src/private/MsAst.js~QuoteTaggedTemplate#tag",
    "access": null,
    "description": null,
    "lineNumber": 989,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 334,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "quote",
    "memberof": "src/private/MsAst.js~QuoteTaggedTemplate",
    "longname": "src/private/MsAst.js~QuoteTaggedTemplate#quote",
    "access": null,
    "description": null,
    "lineNumber": 991,
    "type": {
      "nullable": null,
      "types": [
        "Quote"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 335,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "QuoteSimple",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~QuoteSimple",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{QuoteSimple}",
    "description": "`'{name}`.\nQuote consisting of a single name.",
    "lineNumber": 999,
    "interface": false,
    "extends": [
      "QuoteAbstract"
    ]
  },
  {
    "__docId__": 336,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~QuoteSimple",
    "longname": "src/private/MsAst.js~QuoteSimple#constructor",
    "access": null,
    "description": null,
    "lineNumber": 1000,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 337,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/private/MsAst.js~QuoteSimple",
    "longname": "src/private/MsAst.js~QuoteSimple#name",
    "access": null,
    "description": null,
    "lineNumber": 1003,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 338,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Pipe",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Pipe",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Pipe}",
    "description": "```pipe {value}\n{pipes}```",
    "lineNumber": 1011,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 339,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Pipe",
    "longname": "src/private/MsAst.js~Pipe#constructor",
    "access": null,
    "description": null,
    "lineNumber": 1012,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "pipes",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 340,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/private/MsAst.js~Pipe",
    "longname": "src/private/MsAst.js~Pipe#value",
    "access": null,
    "description": null,
    "lineNumber": 1015,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 341,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "pipes",
    "memberof": "src/private/MsAst.js~Pipe",
    "longname": "src/private/MsAst.js~Pipe#pipes",
    "access": null,
    "description": null,
    "lineNumber": 1017,
    "type": {
      "nullable": null,
      "types": [
        "Array<Val>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 342,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "With",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~With",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{With}",
    "description": "```with {value} [as {declare}]\n{block}```",
    "lineNumber": 1025,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 343,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~With",
    "longname": "src/private/MsAst.js~With#constructor",
    "access": null,
    "description": null,
    "lineNumber": 1026,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "declare",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "block",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 344,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "declare",
    "memberof": "src/private/MsAst.js~With",
    "longname": "src/private/MsAst.js~With#declare",
    "access": null,
    "description": null,
    "lineNumber": 1029,
    "type": {
      "nullable": null,
      "types": [
        "LocalDeclare"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 345,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/private/MsAst.js~With",
    "longname": "src/private/MsAst.js~With#value",
    "access": null,
    "description": null,
    "lineNumber": 1031,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 346,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "block",
    "memberof": "src/private/MsAst.js~With",
    "longname": "src/private/MsAst.js~With#block",
    "access": null,
    "description": null,
    "lineNumber": 1033,
    "type": {
      "nullable": null,
      "types": [
        "Block"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 347,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MemberFun",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~MemberFun",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{MemberFun}",
    "description": "`&{name}` or `.&{name}` or `{object}.&{name}`",
    "lineNumber": 1038,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 348,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~MemberFun",
    "longname": "src/private/MsAst.js~MemberFun#constructor",
    "access": null,
    "description": null,
    "lineNumber": 1039,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "opObject",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 349,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "opObject",
    "memberof": "src/private/MsAst.js~MemberFun",
    "longname": "src/private/MsAst.js~MemberFun#opObject",
    "access": null,
    "description": null,
    "lineNumber": 1042,
    "type": {
      "nullable": true,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 350,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/private/MsAst.js~MemberFun",
    "longname": "src/private/MsAst.js~MemberFun#name",
    "access": null,
    "description": null,
    "lineNumber": 1044,
    "type": {
      "nullable": null,
      "types": [
        "string ",
        " Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 351,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "GetterFun",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~GetterFun",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{GetterFun}",
    "description": "`&.{name}`",
    "lineNumber": 1049,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 352,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~GetterFun",
    "longname": "src/private/MsAst.js~GetterFun#constructor",
    "access": null,
    "description": null,
    "lineNumber": 1050,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 353,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/private/MsAst.js~GetterFun",
    "longname": "src/private/MsAst.js~GetterFun#name",
    "access": null,
    "description": null,
    "lineNumber": 1053,
    "type": {
      "nullable": null,
      "types": [
        "string ",
        " Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 354,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SimpleFun",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~SimpleFun",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{SimpleFun}",
    "description": "`&({value})`",
    "lineNumber": 1058,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 355,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~SimpleFun",
    "longname": "src/private/MsAst.js~SimpleFun#constructor",
    "access": null,
    "description": null,
    "lineNumber": 1059,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 356,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/private/MsAst.js~SimpleFun",
    "longname": "src/private/MsAst.js~SimpleFun#value",
    "access": null,
    "description": null,
    "lineNumber": 1062,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 357,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Range",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Range",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Range}",
    "description": "`{start}..{end}` or `{start}...{end}`.",
    "lineNumber": 1067,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 358,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Range",
    "longname": "src/private/MsAst.js~Range#constructor",
    "access": null,
    "description": null,
    "lineNumber": 1068,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      },
      {
        "name": "isExclusive",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 359,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "start",
    "memberof": "src/private/MsAst.js~Range",
    "longname": "src/private/MsAst.js~Range#start",
    "access": null,
    "description": null,
    "lineNumber": 1071,
    "type": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 360,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "end",
    "memberof": "src/private/MsAst.js~Range",
    "longname": "src/private/MsAst.js~Range#end",
    "access": null,
    "description": "If null, this is an infinite Range.",
    "lineNumber": 1076,
    "type": {
      "nullable": true,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 361,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isExclusive",
    "memberof": "src/private/MsAst.js~Range",
    "longname": "src/private/MsAst.js~Range#isExclusive",
    "access": null,
    "description": null,
    "lineNumber": 1078,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 362,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SpecialDo",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~SpecialDo",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{SpecialDo}",
    "description": "A special action.\nAll SpecialDos are atomic and do not rely on context.",
    "lineNumber": 1087,
    "interface": false,
    "extends": [
      "Do"
    ]
  },
  {
    "__docId__": 363,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~SpecialDo",
    "longname": "src/private/MsAst.js~SpecialDo#constructor",
    "access": null,
    "description": null,
    "lineNumber": 1088,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "kind",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 364,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "kind",
    "memberof": "src/private/MsAst.js~SpecialDo",
    "longname": "src/private/MsAst.js~SpecialDo#kind",
    "access": null,
    "description": null,
    "lineNumber": 1091,
    "type": {
      "nullable": null,
      "types": [
        "SpecialDos"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 365,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SpecialDos",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~SpecialDos",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{SpecialDos}",
    "description": "Kinds of {@link SpecialDo}.",
    "lineNumber": 1098,
    "unknown": [
      {
        "tagName": "@enum",
        "tagValue": "{number}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 366,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SpecialVal",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~SpecialVal",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{SpecialVal}",
    "description": "A special expression.\nAll SpecialVals are atomic and do not rely on context.",
    "lineNumber": 1106,
    "interface": false,
    "extends": [
      "Val"
    ]
  },
  {
    "__docId__": 367,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~SpecialVal",
    "longname": "src/private/MsAst.js~SpecialVal#constructor",
    "access": null,
    "description": null,
    "lineNumber": 1107,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "kind",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 368,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "kind",
    "memberof": "src/private/MsAst.js~SpecialVal",
    "longname": "src/private/MsAst.js~SpecialVal#kind",
    "access": null,
    "description": null,
    "lineNumber": 1110,
    "type": {
      "nullable": null,
      "types": [
        "SpecialVals"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 369,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SpecialVals",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~SpecialVals",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{SpecialVals}",
    "description": "Kinds of {@link SpecialVal}.",
    "lineNumber": 1118,
    "unknown": [
      {
        "tagName": "@enum",
        "tagValue": "{number}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 370,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Ignore",
    "memberof": "src/private/MsAst.js",
    "longname": "src/private/MsAst.js~Ignore",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/MsAst.js",
    "importStyle": "{Ignore}",
    "description": "`ignore` statement.\nKeeps the compiler from complaining about an unused local.",
    "lineNumber": 1148,
    "interface": false,
    "extends": [
      "Do"
    ]
  },
  {
    "__docId__": 371,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/MsAst.js~Ignore",
    "longname": "src/private/MsAst.js~Ignore#constructor",
    "access": null,
    "description": null,
    "lineNumber": 1149,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "ignoredNames",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 372,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ignoredNames",
    "memberof": "src/private/MsAst.js~Ignore",
    "longname": "src/private/MsAst.js~Ignore#ignoredNames",
    "access": null,
    "description": null,
    "lineNumber": 1152,
    "type": {
      "nullable": null,
      "types": [
        "Array<string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 373,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/Token.js",
    "memberof": null,
    "longname": "src/private/Token.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {code} from '../CompileError'\nimport {SpecialVals} from './MsAst'\n\n/**\nLexed element in a tree of Tokens.\n\nSince {@link lex} does grouping, {@link parse} avoids doing much of the work parsers usually do;\nit doesn't have to handle a \"left parenthesis\", only a {@link Group} of kind G_Parenthesis.\nThis also means that the many different {@link MsAst} types all parse in a similar manner,\nkeeping the language consistent.\n\nBesides {@link Group}, {@link Keyword}, {@link Name}, and {@link DocComment},\n{@link NumberLiteral} values are also treated as Tokens.\n\n@abstract\n*/\nexport default class Token {\n\tconstructor(loc) {\n\t\tthis.loc = loc\n\t}\n}\n\n/**\nContains multiple sub-tokens.\nSee {@link GroupKind} for explanations.\n*/\nexport class Group extends Token {\n\tconstructor(loc, subTokens, kind) {\n\t\tsuper(loc)\n\t\t/**\n\t\tTokens within this group.\n\t\t@type {Array<Token>}\n\t\t*/\n\t\tthis.subTokens = subTokens\n\t\t/** @type {Groups} */\n\t\tthis.kind = kind\n\t}\n\n\ttoString() {\n\t\treturn `${groupKindToName.get(this.kind)}`\n\t}\n}\n\n/**\nA \"keyword\" is any set of characters with a particular meaning.\nIt doensn't necessarily have to be something that might have been a {@link Name}.\nFor example, see {@link Keywords.ObjEntry}.\n\nThis can even include ones like `. ` (defines an object property, as in `key. value`).\nKind is a ***. See the full list below.\n*/\nexport class Keyword extends Token {\n\tconstructor(loc, kind) {\n\t\tsuper(loc)\n\t\t/** @type {Keywords} */\n\t\tthis.kind = kind\n\t}\n\n\ttoString() {\n\t\treturn showKeyword(this.kind)\n\t}\n}\n\n/**\nAn identifier. Usually the name of some local variable or property.\nA Name is guaranteed to not be any keyword.\n*/\nexport class Name extends Token {\n\tconstructor(loc, name) {\n\t\tsuper(loc)\n\t\t/** @type {string} */\n\t\tthis.name = name\n\t}\n\n\ttoString() {\n\t\treturn code(this.name)\n\t}\n}\n\n/**\nDocumentation comment (beginning with one `|` rather than two).\nNon-doc comments are ignored by {@link lex}.\nThese don't affect output, but are passed to various {@link MsAst}s for use by other tools.\n*/\nexport class DocComment extends Token {\n\tconstructor(loc, text) {\n\t\tsuper(loc)\n\t\t/** @type {string} */\n\t\tthis.text = text\n\t}\n\n\ttoString() {\n\t\treturn 'doc comment'\n\t}\n}\n\nlet nextGroupKind = 0\nconst\n\tgroupKindToName = new Map(),\n\tg = name => {\n\t\tconst kind = nextGroupKind\n\t\tgroupKindToName.set(kind, name)\n\t\tnextGroupKind = nextGroupKind + 1\n\t\treturn kind\n\t}\n\n/**\nKinds of {@link Group}.\n@enum {number}\n*/\nexport const Groups = {\n\t/**\n\tTokens surrounded by parentheses.\n\tThere may be no closing parenthesis. In:\n\n\t\ta (b\n\t\t\tc\n\n\tThe tokens are a Group<Line>(Name, Group<Parenthesis>(...))\n\t*/\n\tParenthesis: g('()'),\n\t/** Like `Parenthesis`, but simpler because there must be a closing `]`. */\n\tBracket: g('[]'),\n\t/**\n\tLines in an indented block.\n\tSub-tokens will always be `Line` groups.\n\tNote that `Block`s do not always map to Block* MsAsts.\n\t*/\n\tBlock: g('indented block'),\n\t/**\n\tTokens within a quote.\n\t`subTokens` may be strings, or G_Parenthesis groups.\n\t*/\n\tQuote: g('quote'),\n\t/**\n\tTokens on a line.\n\tThe indented block following the end of the line is considered to be a part of the line!\n\tThis means that in this code:\n\t\ta\n\t\t\tb\n\t\t\tc\n\t\td\n\tThere are 2 lines, one starting with 'a' and one starting with 'd'.\n\tThe first line contains 'a' and a `Block` which in turn contains two other lines.\n\t*/\n\tLine: g('line'),\n\t/**\n\tGroups two or more tokens that are *not* separated by spaces.\n\t`a[b].c` is an example.\n\tA single token on its own will not be given a `Space` group.\n\t*/\n\tSpace: g('space')\n}\n\n/**\nOutputtable description of a group kind.\n@param {Groups} groupKind\n*/\nexport function showGroupKind(groupKind) {\n\treturn groupKindToName.get(groupKind)\n}\n\nlet nextKeywordKind = 0\nconst\n\tkeywordNameToKind = new Map(),\n\tkeywordKindToName = new Map(),\n\tnameKeywords = new Set()\n\n// These keywords are special names.\n// When lexing a name, a map lookup is done by keywordKindFromName.\nfunction kw(name) {\n\tconst kind = kwNotName(name)\n\tnameKeywords.add(kind)\n\tkeywordNameToKind.set(name, kind)\n\treturn kind\n}\n// These keywords must be lexed specially.\nfunction kwNotName(debugName) {\n\tconst kind = nextKeywordKind\n\tkeywordKindToName.set(kind, debugName)\n\tnextKeywordKind = nextKeywordKind + 1\n\treturn kind\n}\n\n// Used by info.js\nexport const reservedKeywords = [\n\t// JavaScript reserved words\n\t'enum',\n\t'implements',\n\t'interface',\n\t'package',\n\t'private',\n\t'protected',\n\t'public',\n\n\t// JavaScript keywords\n\t'arguments',\n\t'delete',\n\t'eval',\n\t'in',\n\t'instanceof',\n\t'return',\n\t'typeof',\n\t'void',\n\t'while',\n\n\t// Mason reserved words\n\t'!',\n\t'<',\n\t'<-',\n\t'>',\n\t'actor',\n\t'data',\n\t'del?',\n\t'do-while',\n\t'do-until',\n\t'final',\n\t'is',\n\t'meta',\n\t'out',\n\t'override',\n\t'send',\n\t'to',\n\t'type',\n\t'until'\n]\nfor (const name of reservedKeywords)\n\tkw(name)\nconst firstNonReservedKeyword = nextKeywordKind\n\n/** Kinds of {@link Keyword}. */\nexport const Keywords = {\n\tAbstract: kw('abstract'),\n\tAmpersand: kwNotName('&'),\n\tAnd: kw('and'),\n\tAs: kw('as'),\n\tAssert: kw('assert'),\n\tAssign: kw('='),\n\tAwait: kw('$'),\n\tLocalMutate: kwNotName(':='),\n\tBreak: kw('break'),\n\tBuilt: kw('built'),\n\tCase: kw('case'),\n\tCatch: kw('catch'),\n\tCond: kw('cond'),\n\tClass: kw('class'),\n\tColon: kwNotName(':'),\n\tConstruct: kw('construct'),\n\tDebugger: kw('debugger'),\n\tDel: kw('del'),\n\tDo: kw('do'),\n\tDot: kwNotName('.'),\n\tDot2: kwNotName('..'),\n\tDot3: kwNotName('... '),\n\tElse: kw('else'),\n\tExcept: kw('except'),\n\tFalse: kw('false'),\n\tFinally: kw('finally'),\n\tFocus: kw('_'),\n\tFor: kw('for'),\n\tForAsync: kw('$for'),\n\tForBag: kw('@for'),\n\tForbid: kw('forbid'),\n\tFun: kwNotName('|'),\n\tFunDo: kwNotName('!|'),\n\tFunThis: kwNotName('.|'),\n\tFunThisDo: kwNotName('.!|'),\n\tFunAsync: kwNotName('$|'),\n\tFunAsyncDo: kwNotName('$!|'),\n\tFunThisAsync: kwNotName('.$|'),\n\tFunThisAsyncDo: kwNotName('.$!|'),\n\tFunGen: kwNotName('*|'),\n\tFunGenDo: kwNotName('*!|'),\n\tFunThisGen: kwNotName('.*|'),\n\tFunThisGenDo: kwNotName('.*!|'),\n\tGet: kw('get'),\n\tIf: kw('if'),\n\tIgnore: kw('ignore'),\n\tKind: kw('kind'),\n\tLazy: kwNotName('~'),\n\tMapEntry: kw('->'),\n\tMethod: kw('method'),\n\tMy: kw('my'),\n\tName: kw('name'),\n\tNew: kw('new'),\n\tNot: kw('not'),\n\tNull: kw('null'),\n\tObjAssign: kwNotName('. '),\n\tOf: kw('of'),\n\tOr: kw('or'),\n\tPass: kw('pass'),\n\tPipe: kw('pipe'),\n\tRegion: kw('region'),\n\tSet: kw('set'),\n\tSuper: kw('super'),\n\tStatic: kw('static'),\n\tSwitch: kw('switch'),\n\tTick: kwNotName('\\''),\n\tThrow: kw('throw'),\n\tTodo: kw('todo'),\n\tTrue: kw('true'),\n\tTry: kw('try'),\n\tUndefined: kw('undefined'),\n\tUnless: kw('unless'),\n\tImport: kw('import'),\n\tImportDo: kw('import!'),\n\tImportLazy: kw('import~'),\n\tWith: kw('with'),\n\tYield: kw('yield'),\n\tYieldTo: kw('yield*')\n}\n\n/**\nName of a keyword.\n@param {Keywords} kind\n@return {string}\n*/\nexport function keywordName(kind) {\n\treturn keywordKindToName.get(kind)\n}\n\nexport function showKeyword(kind) {\n\treturn code(keywordName(kind))\n}\n\n/**\nSee if the name is a keyword and if so return its kind.\n@return {?Keywords}\n*/\nexport function opKeywordKindFromName(name) {\n\tconst kind = keywordNameToKind.get(name)\n\treturn kind === undefined ? null : kind\n}\n\nexport function opKeywordKindToSpecialValueKind(kind) {\n\tswitch (kind) {\n\t\tcase Keywords.False:\n\t\t\treturn SpecialVals.False\n\t\tcase Keywords.Name:\n\t\t\treturn SpecialVals.Name\n\t\tcase Keywords.Null:\n\t\t\treturn SpecialVals.Null\n\t\tcase Keywords.True:\n\t\t\treturn SpecialVals.True\n\t\tcase Keywords.Undefined:\n\t\t\treturn SpecialVals.Undefined\n\t\tdefault:\n\t\t\treturn null\n\t}\n}\n\n/**\nWhether `token` is a Group of the given kind.\n@param {Groups} groupKind\n@param {Token} token\n*/\nexport function isGroup(groupKind, token) {\n\treturn token instanceof Group && token.kind === groupKind\n}\n\n/**\nWhether `token` is a Keyword of the given kind.\n@param {Keywords} keywordKind\n@param {Token} token\n*/\nexport function isKeyword(keywordKind, token) {\n\treturn token instanceof Keyword && token.kind === keywordKind\n}\n\n/**\nWhether `token` is a Keyword of any of the given kinds.\n@param {Set} keywordKinds\n@param {Token} token\n*/\nexport function isAnyKeyword(keywordKinds, token) {\n\treturn token instanceof Keyword && keywordKinds.has(token.kind)\n}\n\n/** Whether `token` is a Keyword whose value can be used as a property name. */\nexport function isNameKeyword(token) {\n\treturn isAnyKeyword(nameKeywords, token)\n}\n\n/** Whether `token` is a reserved word. */\nexport function isReservedKeyword(token) {\n\treturn token instanceof Keyword && token.kind < firstNonReservedKeyword\n}\n"
  },
  {
    "__docId__": 374,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Token",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~Token",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": "Token",
    "description": "Lexed element in a tree of Tokens.\nSince {@link lex} does grouping, {@link parse} avoids doing much of the work parsers usually do;\nit doesn't have to handle a \"left parenthesis\", only a {@link Group} of kind G_Parenthesis.\nThis also means that the many different {@link MsAst} types all parse in a similar manner,\nkeeping the language consistent.\nBesides {@link Group}, {@link Keyword}, {@link Name}, and {@link DocComment},\n{@link NumberLiteral} values are also treated as Tokens.",
    "lineNumber": 17,
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 375,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/Token.js~Token",
    "longname": "src/private/Token.js~Token#constructor",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 376,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "loc",
    "memberof": "src/private/Token.js~Token",
    "longname": "src/private/Token.js~Token#loc",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Group",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~Group",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": "{Group}",
    "description": "Contains multiple sub-tokens.\nSee {@link GroupKind} for explanations.",
    "lineNumber": 27,
    "interface": false,
    "extends": [
      "Token"
    ]
  },
  {
    "__docId__": 378,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/Token.js~Group",
    "longname": "src/private/Token.js~Group#constructor",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "subTokens",
        "types": [
          "*"
        ]
      },
      {
        "name": "kind",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 379,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "subTokens",
    "memberof": "src/private/Token.js~Group",
    "longname": "src/private/Token.js~Group#subTokens",
    "access": null,
    "description": "Tokens within this group.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "Array<Token>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 380,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "kind",
    "memberof": "src/private/Token.js~Group",
    "longname": "src/private/Token.js~Group#kind",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "Groups"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/private/Token.js~Group",
    "longname": "src/private/Token.js~Group#toString",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 382,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Keyword",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~Keyword",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": "{Keyword}",
    "description": "A \"keyword\" is any set of characters with a particular meaning.\nIt doensn't necessarily have to be something that might have been a {@link Name}.\nFor example, see {@link Keywords.ObjEntry}.\nThis can even include ones like `. ` (defines an object property, as in `key. value`).\nKind is a ***. See the full list below.",
    "lineNumber": 52,
    "interface": false,
    "extends": [
      "Token"
    ]
  },
  {
    "__docId__": 383,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/Token.js~Keyword",
    "longname": "src/private/Token.js~Keyword#constructor",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "kind",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 384,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "kind",
    "memberof": "src/private/Token.js~Keyword",
    "longname": "src/private/Token.js~Keyword#kind",
    "access": null,
    "description": null,
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "Keywords"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 385,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/private/Token.js~Keyword",
    "longname": "src/private/Token.js~Keyword#toString",
    "access": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 386,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Name",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~Name",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": "{Name}",
    "description": "An identifier. Usually the name of some local variable or property.\nA Name is guaranteed to not be any keyword.",
    "lineNumber": 68,
    "interface": false,
    "extends": [
      "Token"
    ]
  },
  {
    "__docId__": 387,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/Token.js~Name",
    "longname": "src/private/Token.js~Name#constructor",
    "access": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 388,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/private/Token.js~Name",
    "longname": "src/private/Token.js~Name#name",
    "access": null,
    "description": null,
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 389,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/private/Token.js~Name",
    "longname": "src/private/Token.js~Name#toString",
    "access": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 390,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DocComment",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~DocComment",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": "{DocComment}",
    "description": "Documentation comment (beginning with one `|` rather than two).\nNon-doc comments are ignored by {@link lex}.\nThese don't affect output, but are passed to various {@link MsAst}s for use by other tools.",
    "lineNumber": 85,
    "interface": false,
    "extends": [
      "Token"
    ]
  },
  {
    "__docId__": 391,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/Token.js~DocComment",
    "longname": "src/private/Token.js~DocComment#constructor",
    "access": null,
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 392,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "text",
    "memberof": "src/private/Token.js~DocComment",
    "longname": "src/private/Token.js~DocComment#text",
    "access": null,
    "description": null,
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 393,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/private/Token.js~DocComment",
    "longname": "src/private/Token.js~DocComment#toString",
    "access": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 394,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "nextGroupKind",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~nextGroupKind",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 395,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "groupKindToName",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~groupKindToName",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "Map"
      ]
    }
  },
  {
    "__docId__": 396,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Groups",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~Groups",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": "{Groups}",
    "description": "Kinds of {@link Group}.",
    "lineNumber": 111,
    "unknown": [
      {
        "tagName": "@enum",
        "tagValue": "{number}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "showGroupKind",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~showGroupKind",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": "{showGroupKind}",
    "description": "Outputtable description of a group kind.",
    "lineNumber": 159,
    "params": [
      {
        "nullable": null,
        "types": [
          "Groups"
        ],
        "spread": false,
        "optional": false,
        "name": "groupKind",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 398,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "nextKeywordKind",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~nextKeywordKind",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 399,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "keywordNameToKind",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~keywordNameToKind",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "type": {
      "types": [
        "Map"
      ]
    }
  },
  {
    "__docId__": 400,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "kw",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~kw",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 401,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "kwNotName",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~kwNotName",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 178,
    "undocument": true,
    "params": [
      {
        "name": "debugName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 402,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "reservedKeywords",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~reservedKeywords",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": "{reservedKeywords}",
    "description": null,
    "lineNumber": 186,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "firstNonReservedKeyword",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~firstNonReservedKeyword",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 404,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Keywords",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~Keywords",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": "{Keywords}",
    "description": "Kinds of {@link Keyword}.",
    "lineNumber": 232,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 405,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "keywordName",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~keywordName",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": "{keywordName}",
    "description": "Name of a keyword.",
    "lineNumber": 318,
    "params": [
      {
        "nullable": null,
        "types": [
          "Keywords"
        ],
        "spread": false,
        "optional": false,
        "name": "kind",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 406,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "showKeyword",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~showKeyword",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": "{showKeyword}",
    "description": null,
    "lineNumber": 322,
    "undocument": true,
    "params": [
      {
        "name": "kind",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 407,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "opKeywordKindFromName",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~opKeywordKindFromName",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": "{opKeywordKindFromName}",
    "description": "See if the name is a keyword and if so return its kind.",
    "lineNumber": 330,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "Keywords"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 408,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "opKeywordKindToSpecialValueKind",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~opKeywordKindToSpecialValueKind",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": "{opKeywordKindToSpecialValueKind}",
    "description": null,
    "lineNumber": 335,
    "undocument": true,
    "params": [
      {
        "name": "kind",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 409,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "isGroup",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~isGroup",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": "{isGroup}",
    "description": "Whether `token` is a Group of the given kind.",
    "lineNumber": 357,
    "params": [
      {
        "nullable": null,
        "types": [
          "Groups"
        ],
        "spread": false,
        "optional": false,
        "name": "groupKind",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Token"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 410,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "isKeyword",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~isKeyword",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": "{isKeyword}",
    "description": "Whether `token` is a Keyword of the given kind.",
    "lineNumber": 366,
    "params": [
      {
        "nullable": null,
        "types": [
          "Keywords"
        ],
        "spread": false,
        "optional": false,
        "name": "keywordKind",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Token"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 411,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "isAnyKeyword",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~isAnyKeyword",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": "{isAnyKeyword}",
    "description": "Whether `token` is a Keyword of any of the given kinds.",
    "lineNumber": 375,
    "params": [
      {
        "nullable": null,
        "types": [
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "keywordKinds",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Token"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 412,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "isNameKeyword",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~isNameKeyword",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": "{isNameKeyword}",
    "description": "Whether `token` is a Keyword whose value can be used as a property name.",
    "lineNumber": 380,
    "params": [
      {
        "name": "token",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 413,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "isReservedKeyword",
    "memberof": "src/private/Token.js",
    "longname": "src/private/Token.js~isReservedKeyword",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/Token.js",
    "importStyle": "{isReservedKeyword}",
    "description": "Whether `token` is a reserved word.",
    "lineNumber": 385,
    "params": [
      {
        "name": "token",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 414,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/VerifyResults.js",
    "memberof": null,
    "longname": "src/private/VerifyResults.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {check} from './context'\n\n/**\nResults of {@link verify}.\nThis is only the data needed by {@link transpile}.\n*/\nexport default class VerifyResults {\n\tconstructor() {\n\t\t/**\n\t\tLocalAccess -> LocalDeclare.\n\t\tNeeded because lazy accesses must be compiled differently.\n\t\t*/\n\t\tthis.localAccessToDeclare = new Map()\n\t\t/**\n\t\tLocalDeclare -> Array[LocalAccess].\n\t\tDebug locals will not be output if not in debug mode.\n\t\t*/\n\t\tthis.localDeclareToAccesses = new Map()\n\t\t/**\n\t\tMaps Class/Fun to name if one is appropriate.\n\t\tMaps *every* {@link SpecialVals.Name} to the nearest name.\n\t\t*/\n\t\tthis.names = new Map()\n\t\t/**\n\t\tString -> Set.\n\t\tFor each path, the names of each builtin imported.\n\t\tLike the inverse of context.opts.builtinNameToPath,\n\t\tbut only includes names actually used.\n\t\t*/\n\t\tthis.builtinPathToNames = new Map()\n\t\t/** Values are either MethodImpl or the string 'constructor' */\n\t\tthis.superCallToMethod = new Map()\n\t\t/** Links a constructor to its super! call. */\n\t\tthis.constructorToSuper = new Map()\n\t\t/** Stores verified block kind (see verifyBlock.js) */\n\t\tthis.blockToKind = new Map()\n\t\t/**\n\t\tSet of MsAsts that have been marked as being statements.\n\t\tThose which are always statements (like Throw) are not marked.\n\t\tUse a set of statements because there are usually many more vals than statements.\n\t\t*/\n\t\tthis.statements = new Set()\n\t\t/** ObjEntry_s that are module exports */\n\t\tthis.objEntryExports = new Set()\n\t\t/** @type {Modules} */\n\t\tthis.moduleKind = null\n\t}\n\n\t/** Gets the LocalDeclare that was verified to be the one accessed. */\n\tlocalDeclareForAccess(localAccess) {\n\t\treturn this.localAccessToDeclare.get(localAccess)\n\t}\n\n\t/** Get closest assignment name to an expression. */\n\tname(expr) {\n\t\tconst name = this.names.get(expr)\n\t\tcheck(name !== undefined, expr.loc,\n\t\t\t'Expression must be placed in a position where name can be determined.')\n\t\treturn name\n\t}\n\n\t/**\n\tGet closest assignment name to an expression,\n\tor `null` if none is available.\n\t*/\n\topName(expr) {\n\t\tconst x = this.names.get(expr)\n\t\treturn x === undefined ? null : x\n\t}\n\n\t/** Certain expressions (such as `if`) are marked if they are statements. */\n\tisStatement(expr) {\n\t\treturn this.statements.has(expr)\n\t}\n\n\t/** What kind of block the verifier determined this to be. */\n\tblockKind(block) {\n\t\treturn this.blockToKind.get(block)\n\t}\n\n\t/** Whether an ObjEntry is a module export. */\n\tisObjEntryExport(objEntry) {\n\t\treturn this.objEntryExports.has(objEntry)\n\t}\n\n\tconstructorHasSuper(ctr) {\n\t\treturn this.constructorToSuper.has(ctr)\n\t}\n}\n\n/** Kinds of {@link Block}. */\nexport const Blocks = {\n\tDo: 0,\n\tThrow: 1,\n\tReturn: 2,\n\tBag: 3,\n\tMap: 4,\n\tObj: 5\n}\n\n/** Kinds of {@link Module}. */\nexport const Modules = {\n\tDo: 0,\n\tVal: 1,\n\tExports: 2,\n\tBag: 3,\n\tMap: 4,\n}\n"
  },
  {
    "__docId__": 415,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "VerifyResults",
    "memberof": "src/private/VerifyResults.js",
    "longname": "src/private/VerifyResults.js~VerifyResults",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/VerifyResults.js",
    "importStyle": "VerifyResults",
    "description": "Results of {@link verify}.\nThis is only the data needed by {@link transpile}.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 416,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/VerifyResults.js~VerifyResults",
    "longname": "src/private/VerifyResults.js~VerifyResults#constructor",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 417,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "localAccessToDeclare",
    "memberof": "src/private/VerifyResults.js~VerifyResults",
    "longname": "src/private/VerifyResults.js~VerifyResults#localAccessToDeclare",
    "access": null,
    "description": "LocalAccess -> LocalDeclare.\nNeeded because lazy accesses must be compiled differently.",
    "lineNumber": 13,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 418,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "localDeclareToAccesses",
    "memberof": "src/private/VerifyResults.js~VerifyResults",
    "longname": "src/private/VerifyResults.js~VerifyResults#localDeclareToAccesses",
    "access": null,
    "description": "LocalDeclare -> Array[LocalAccess].\nDebug locals will not be output if not in debug mode.",
    "lineNumber": 18,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 419,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "names",
    "memberof": "src/private/VerifyResults.js~VerifyResults",
    "longname": "src/private/VerifyResults.js~VerifyResults#names",
    "access": null,
    "description": "Maps Class/Fun to name if one is appropriate.\nMaps *every* {@link SpecialVals.Name} to the nearest name.",
    "lineNumber": 23,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 420,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "builtinPathToNames",
    "memberof": "src/private/VerifyResults.js~VerifyResults",
    "longname": "src/private/VerifyResults.js~VerifyResults#builtinPathToNames",
    "access": null,
    "description": "String -> Set.\nFor each path, the names of each builtin imported.\nLike the inverse of context.opts.builtinNameToPath,\nbut only includes names actually used.",
    "lineNumber": 30,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "superCallToMethod",
    "memberof": "src/private/VerifyResults.js~VerifyResults",
    "longname": "src/private/VerifyResults.js~VerifyResults#superCallToMethod",
    "access": null,
    "description": "Values are either MethodImpl or the string 'constructor'",
    "lineNumber": 32,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "constructorToSuper",
    "memberof": "src/private/VerifyResults.js~VerifyResults",
    "longname": "src/private/VerifyResults.js~VerifyResults#constructorToSuper",
    "access": null,
    "description": "Links a constructor to its super! call.",
    "lineNumber": 34,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "blockToKind",
    "memberof": "src/private/VerifyResults.js~VerifyResults",
    "longname": "src/private/VerifyResults.js~VerifyResults#blockToKind",
    "access": null,
    "description": "Stores verified block kind (see verifyBlock.js)",
    "lineNumber": 36,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 424,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "statements",
    "memberof": "src/private/VerifyResults.js~VerifyResults",
    "longname": "src/private/VerifyResults.js~VerifyResults#statements",
    "access": null,
    "description": "Set of MsAsts that have been marked as being statements.\nThose which are always statements (like Throw) are not marked.\nUse a set of statements because there are usually many more vals than statements.",
    "lineNumber": 42,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "objEntryExports",
    "memberof": "src/private/VerifyResults.js~VerifyResults",
    "longname": "src/private/VerifyResults.js~VerifyResults#objEntryExports",
    "access": null,
    "description": "ObjEntry_s that are module exports",
    "lineNumber": 44,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 426,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "moduleKind",
    "memberof": "src/private/VerifyResults.js~VerifyResults",
    "longname": "src/private/VerifyResults.js~VerifyResults#moduleKind",
    "access": null,
    "description": null,
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Modules"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 427,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "localDeclareForAccess",
    "memberof": "src/private/VerifyResults.js~VerifyResults",
    "longname": "src/private/VerifyResults.js~VerifyResults#localDeclareForAccess",
    "access": null,
    "description": "Gets the LocalDeclare that was verified to be the one accessed.",
    "lineNumber": 50,
    "params": [
      {
        "name": "localAccess",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 428,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/private/VerifyResults.js~VerifyResults",
    "longname": "src/private/VerifyResults.js~VerifyResults#name",
    "access": null,
    "description": "Get closest assignment name to an expression.",
    "lineNumber": 55,
    "params": [
      {
        "name": "expr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 429,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "opName",
    "memberof": "src/private/VerifyResults.js~VerifyResults",
    "longname": "src/private/VerifyResults.js~VerifyResults#opName",
    "access": null,
    "description": "Get closest assignment name to an expression,\nor `null` if none is available.",
    "lineNumber": 66,
    "params": [
      {
        "name": "expr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 430,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isStatement",
    "memberof": "src/private/VerifyResults.js~VerifyResults",
    "longname": "src/private/VerifyResults.js~VerifyResults#isStatement",
    "access": null,
    "description": "Certain expressions (such as `if`) are marked if they are statements.",
    "lineNumber": 72,
    "params": [
      {
        "name": "expr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 431,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "blockKind",
    "memberof": "src/private/VerifyResults.js~VerifyResults",
    "longname": "src/private/VerifyResults.js~VerifyResults#blockKind",
    "access": null,
    "description": "What kind of block the verifier determined this to be.",
    "lineNumber": 77,
    "params": [
      {
        "name": "block",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 432,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isObjEntryExport",
    "memberof": "src/private/VerifyResults.js~VerifyResults",
    "longname": "src/private/VerifyResults.js~VerifyResults#isObjEntryExport",
    "access": null,
    "description": "Whether an ObjEntry is a module export.",
    "lineNumber": 82,
    "params": [
      {
        "name": "objEntry",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 433,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "constructorHasSuper",
    "memberof": "src/private/VerifyResults.js~VerifyResults",
    "longname": "src/private/VerifyResults.js~VerifyResults#constructorHasSuper",
    "access": null,
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "ctr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 434,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Blocks",
    "memberof": "src/private/VerifyResults.js",
    "longname": "src/private/VerifyResults.js~Blocks",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/VerifyResults.js",
    "importStyle": "{Blocks}",
    "description": "Kinds of {@link Block}.",
    "lineNumber": 92,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 435,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Modules",
    "memberof": "src/private/VerifyResults.js",
    "longname": "src/private/VerifyResults.js~Modules",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/VerifyResults.js",
    "importStyle": "{Modules}",
    "description": "Kinds of {@link Module}.",
    "lineNumber": 102,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 436,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/context.js",
    "memberof": null,
    "longname": "src/private/context.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Pos, singleCharLoc} from 'esast/dist/Loc'\nimport CompileError, {Warning} from '../CompileError'\nimport CompileOptions from './CompileOptions'\n\n/**\nOptions that were passed in at the call to {@link compile}.\n@type {CompileOptions}\n*/\nexport let options\n/**\nArray of all warnings produced during compilation.\n(Please use {@warn} instead of writing to this directly.)\n*/\nexport let warnings\n\n/**\nWrite to {@link options} and {@link warnings}.\nRemember to call {@link unsetContext}!\n*/\nexport function setContext(opts) {\n\toptions = new CompileOptions(opts)\n\twarnings = []\n}\n\n/** Release {@link options} and {@link warnings} for garbage collection. */\nexport function unsetContext() {\n\toptions = null\n\twarnings = null\n}\n\n/**\nIf `cond` is false, {@link fail}.\n`loc` and `message` may also be Functions to to get them lazily.\n*/\nexport function check(cond, loc, message) {\n\tif (!cond) {\n\t\tif (loc instanceof Function)\n\t\t\tloc = loc()\n\t\tif (message instanceof Function)\n\t\t\tmessage = message()\n\t\tfail(loc, message)\n\t}\n}\n\n/**\nThrow a {@link CompileError}.\nParameters are the same as for {@link warn}.\n*/\nexport function fail(loc, message) {\n\tthrow new CompileError(warning(loc, message))\n}\n\n/**\nAdd a new warning.\n@param {Loc|Pos} loc\n@param {string} message\n\tWill often contain sequences created by {@link code}.\n*/\nexport function warn(loc, message) {\n\twarnings.push(warning(loc, message))\n}\n\nconst warning = (loc, message) => {\n\tif (loc instanceof Pos)\n\t\tloc = singleCharLoc(loc)\n\treturn new Warning(loc, message)\n}\n"
  },
  {
    "__docId__": 437,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "setContext",
    "memberof": "src/private/context.js",
    "longname": "src/private/context.js~setContext",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/context.js",
    "importStyle": "{setContext}",
    "description": "Write to {@link options} and {@link warnings}.\nRemember to call {@link unsetContext}!",
    "lineNumber": 20,
    "params": [
      {
        "name": "opts",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 438,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "unsetContext",
    "memberof": "src/private/context.js",
    "longname": "src/private/context.js~unsetContext",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/context.js",
    "importStyle": "{unsetContext}",
    "description": "Release {@link options} and {@link warnings} for garbage collection.",
    "lineNumber": 26,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 439,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "check",
    "memberof": "src/private/context.js",
    "longname": "src/private/context.js~check",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/context.js",
    "importStyle": "{check}",
    "description": "If `cond` is false, {@link fail}.\n`loc` and `message` may also be Functions to to get them lazily.",
    "lineNumber": 35,
    "params": [
      {
        "name": "cond",
        "types": [
          "*"
        ]
      },
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 440,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "fail",
    "memberof": "src/private/context.js",
    "longname": "src/private/context.js~fail",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/context.js",
    "importStyle": "{fail}",
    "description": "Throw a {@link CompileError}.\nParameters are the same as for {@link warn}.",
    "lineNumber": 49,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 441,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "warn",
    "memberof": "src/private/context.js",
    "longname": "src/private/context.js~warn",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/context.js",
    "importStyle": "{warn}",
    "description": "Add a new warning.",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "Loc",
          "Pos"
        ],
        "spread": false,
        "optional": false,
        "name": "loc",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Will often contain sequences created by {@link code}."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 442,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "warning",
    "memberof": "src/private/context.js",
    "longname": "src/private/context.js~warning",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/context.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 443,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/defaultBuiltins.js",
    "memberof": null,
    "longname": "src/private/defaultBuiltins.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "export default {\n\tglobal: [\n\t\t// Standard globals\n\t\t'Array',\n\t\t'Boolean',\n\t\t'console',\n\t\t'Date',\n\t\t'Error',\n\t\t'Function',\n\t\t'Intl',\n\t\t'JSON',\n\t\t'Promise',\n\t\t'Proxy',\n\t\t'Math',\n\t\t'Number',\n\t\t'Object',\n\t\t'Reflect',\n\t\t'RegExp',\n\t\t'SIMD',\n\t\t'String',\n\t\t'Symbol',\n\n\t\t// Errors\n\t\t'EvalError',\n\t\t'InternalError',\n\t\t'RangeError',\n\t\t'ReferenceError',\n\t\t'SyntaxError',\n\t\t'TypeError',\n\t\t'URIError',\n\n\t\t// ArrayBuffer and views\n\t\t'ArrayBuffer',\n\t\t'DataView',\n\t\t'Float32Array',\n\t\t'Float64Array',\n\t\t'Int16Array',\n\t\t'Int32Array',\n\t\t'Int8Array',\n\t\t'Uint16Array',\n\t\t'Uint32Array',\n\t\t'Uint8Array',\n\t\t'Uint8ClampedArray',\n\n\t\t// URI functions\n\t\t'decodeURI',\n\t\t'decodeURIComponent',\n\t\t'encodeURI',\n\t\t'encodeURIComponent'\n\n\t\t// Missing globals:\n\t\t// eval: Want to discourage use\n\t\t// isFinite, isNaN, parseFloat, parseInt: use Number.xxx functions\n\t\t// Map, Set: have different meanings for msl. Use Id-Map and Id-Set for native versions.\n\t\t// WeakMap, WeakSet: use Weak-Id-Map and Weak-Id-Set\n\t],\n\t'msl.@.?': [\n\t\t'_',\n\t\t'?None',\n\t\t'Opt->?',\n\t\t'?->Opt',\n\t\t'?-or',\n\t\t'?-cond',\n\t\t'?some',\n\t\t'un-?'\n\t],\n\t'msl.@.@': [\n\t\t'_',\n\t\t'++',\n\t\t'++~',\n\t\t'+!',\n\t\t'++!',\n\t\t'--',\n\t\t'--~',\n\t\t'-!',\n\t\t'--!',\n\t\t'all?',\n\t\t'any?',\n\t\t'count',\n\t\t'each!',\n\t\t'empty?',\n\t\t'empty!',\n\t\t'?find',\n\t\t'fold',\n\t\t'@flat-map',\n\t\t'@flat-map~',\n\t\t'@flatten',\n\t\t'@flatten~',\n\t\t'iterator',\n\t\t'@keep',\n\t\t'@keep~',\n\t\t'@map',\n\t\t'@map~',\n\t],\n\t'msl.@.@-Type': ['empty'],\n\t'msl.@.Map.Id-Map': ['_'],\n\t'msl.@.Map.Hash-Map': ['_'],\n\t'msl.@.Map.Map': [\n\t\t'_',\n\t\t'?get',\n\t\t'@keys',\n\t\t'make-map',\n\t\t'map=?',\n\t\t'@values'\n\t],\n\t'msl.@.Range': ['_'],\n\t'msl.@.Seq.Seq': [\n\t\t'_',\n\t\t'+>!',\n\t\t'@drop',\n\t\t'@drop~',\n\t\t'@drop-while',\n\t\t'@drop-while~',\n\t\t'first',\n\t\t'?first',\n\t\t'@indexes',\n\t\t'last',\n\t\t'?last',\n\t\t'?nth',\n\t\t'@reverse',\n\t\t'@reverse~',\n\t\t'@rtail',\n\t\t'@slice',\n\t\t'@slice~',\n\t\t'@split',\n\t\t'@split~',\n\t\t'seq=?',\n\t\t'@tail',\n\t\t'@take',\n\t\t'@take~',\n\t\t'@take-while',\n\t\t'@take-while~',\n\t\t'@zip',\n\t\t'@zip~'\n\t],\n\t'msl.@.Seq.Stream': ['_'],\n\t'msl.@.Set.Id-Set': ['_'],\n\t'msl.@.Set.Set': ['_', 'set=?'],\n\t'msl.compare': [\n\t\t'=?',\n\t\t'<?',\n\t\t'<=?',\n\t\t'>?',\n\t\t'>=?',\n\t\t'?min',\n\t\t'min',\n\t\t'?min-by',\n\t\t'min-by',\n\t\t'?max',\n\t\t'max',\n\t\t'?max-by',\n\t\t'max-by',\n\t\t'same?'\n\t],\n\t'msl.Function': ['Action', 'identity'],\n\t'msl.js': [\n\t\t'defined?',\n\t\t'id=?',\n\t\t'null?'\n\t],\n\t'msl.math.methods': ['+', '-', '*', '/'],\n\t'msl.math.Number': [\n\t\t'divisible?',\n\t\t'Int',\n\t\t'int/',\n\t\t'log-base',\n\t\t'modulo',\n\t\t'nearest-ceil',\n\t\t'nearest-floor',\n\t\t'nearest-round',\n\t\t'Nat',\n\t\t'remainder',\n\t\t'square'\n\t],\n\t'msl.math.util': ['average', 'sum'],\n\t'msl.methods': ['sub', 'set-sub!', 'del-sub!'],\n\t'msl.to-string': ['_', 'inspect'],\n\t'msl.Type.Method': ['_', 'impl!', 'impl-for', 'self-impl!'],\n\t'msl.Type.Kind': ['_', 'kind!', 'self-kind!'],\n\t'msl.Type.Pred-Type': ['_', 'Any', 'ObjLit'],\n\t'msl.Type.Type': ['_', '=>', 'contains?', 'extract']\n}\n"
  },
  {
    "__docId__": 444,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/lex/chars.js",
    "memberof": null,
    "longname": "src/private/lex/chars.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {code} from '../../CompileError'\n\nfunction cc(_) {\n\treturn _.charCodeAt(0)\n}\n\nexport const Chars = {\n\tAmpersand: cc('&'),\n\tBackslash: cc('\\\\'),\n\tBacktick: cc('`'),\n\tBang: cc('!'),\n\tBar: cc('|'),\n\tCaret: cc('^'),\n\tCash: cc('$'),\n\tCloseBrace: cc('}'),\n\tCloseBracket: cc(']'),\n\tCloseParenthesis: cc(')'),\n\tColon: cc(':'),\n\tComma: cc(','),\n\tDot: cc('.'),\n\tEqual: cc('='),\n\tHyphen: cc('-'),\n\tLetterB: cc('b'),\n\tLetterO: cc('o'),\n\tLetterX: cc('x'),\n\tN0: cc('0'),\n\tN1: cc('1'),\n\tN2: cc('2'),\n\tN3: cc('3'),\n\tN4: cc('4'),\n\tN5: cc('5'),\n\tN6: cc('6'),\n\tN7: cc('7'),\n\tN8: cc('8'),\n\tN9: cc('9'),\n\tNewline: cc('\\n'),\n\tNull: cc('\\0'),\n\tOpenBrace: cc('{'),\n\tOpenBracket: cc('['),\n\tOpenParenthesis: cc('('),\n\tPercent: cc('%'),\n\tQuote: cc('\"'),\n\tSemicolon: cc(';'),\n\tSpace: cc(' '),\n\tStar: cc('*'),\n\tTab: cc('\\t'),\n\tTick: cc('\\''),\n\tTilde: cc('~')\n}\n\nexport function showChar(char) {\n\treturn code(String.fromCharCode(char))\n}\n\nfunction charPred(chars, negate=false) {\n\tlet src = 'switch(ch) {\\n'\n\tfor (let i = 0; i < chars.length; i = i + 1)\n\t\tsrc = `${src}case ${chars.charCodeAt(i)}: `\n\tsrc = `${src} return ${!negate}\\ndefault: return ${negate}\\n}`\n\treturn Function('ch', src)\n}\n\nexport const\n\tisDigit = charPred('0123456789'),\n\tisDigitBinary = charPred('01'),\n\tisDigitOctal = charPred('01234567'),\n\tisDigitHex = charPred('0123456789abcdef')\n\n// Anything not explicitly reserved is a valid name character.\nconst reservedCharacters = '`#%^\\\\;,'\nexport const isNameCharacter = charPred('()[]{}\\'&.:| \\n\\t\"' + reservedCharacters, true)\n"
  },
  {
    "__docId__": 445,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cc",
    "memberof": "src/private/lex/chars.js",
    "longname": "src/private/lex/chars.js~cc",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/lex/chars.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 446,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Chars",
    "memberof": "src/private/lex/chars.js",
    "longname": "src/private/lex/chars.js~Chars",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/chars.js",
    "importStyle": "{Chars}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "showChar",
    "memberof": "src/private/lex/chars.js",
    "longname": "src/private/lex/chars.js~showChar",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/chars.js",
    "importStyle": "{showChar}",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "char",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 448,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "charPred",
    "memberof": "src/private/lex/chars.js",
    "longname": "src/private/lex/chars.js~charPred",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/lex/chars.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "chars",
        "types": [
          "*"
        ]
      },
      {
        "name": "negate",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 449,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "isDigit",
    "memberof": "src/private/lex/chars.js",
    "longname": "src/private/lex/chars.js~isDigit",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/chars.js",
    "importStyle": "{isDigit}",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 450,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "reservedCharacters",
    "memberof": "src/private/lex/chars.js",
    "longname": "src/private/lex/chars.js~reservedCharacters",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/lex/chars.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 451,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "isNameCharacter",
    "memberof": "src/private/lex/chars.js",
    "longname": "src/private/lex/chars.js~isNameCharacter",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/chars.js",
    "importStyle": "{isNameCharacter}",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 452,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/lex/groupContext.js",
    "memberof": null,
    "longname": "src/private/lex/groupContext.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Loc, {StartPos} from 'esast/dist/Loc'\nimport {check, warn} from '../context'\nimport {Group, Groups, showGroupKind} from '../Token'\nimport {assert, isEmpty} from '../util'\n\nlet groupStack\nexport let curGroup\n\nexport function setupGroupContext() {\n\tcurGroup = new Group(new Loc(StartPos, null), [], Groups.Block)\n\tgroupStack = []\n}\n\nexport function tearDownGroupContext(endPos) {\n\tcloseLine(endPos)\n\tassert(isEmpty(groupStack))\n\tcurGroup.loc.end = endPos\n\tconst res = curGroup\n\tgroupStack = curGroup = null\n\treturn res\n}\n\n/*\nWe only ever write to the innermost Group;\nwhen we close that Group we add it to the enclosing Group and continue with that one.\nNote that `curGroup` is conceptually the top of the stack, but is not stored in `stack`.\n*/\n\nexport function addToCurrentGroup(token) {\n\tcurGroup.subTokens.push(token)\n}\n\nfunction dropGroup() {\n\tcurGroup = groupStack.pop()\n}\n\n// Pause writing to curGroup in favor of writing to a sub-group.\n// When the sub-group finishes we will pop the stack and resume writing to its parent.\nexport function openGroup(openPos, groupKind) {\n\tgroupStack.push(curGroup)\n\t// Contents will be added to by `addToCurrentGroup`.\n\t// curGroup.loc.end will be written to when closing it.\n\tcurGroup = new Group(new Loc(openPos, null), [], groupKind)\n}\n\nexport function maybeCloseGroup(closePos, closeKind) {\n\tif (curGroup.kind === closeKind)\n\t\tcloseGroupNoCheck(closePos, closeKind)\n}\n\nexport function closeGroup(closePos, closeKind) {\n\tcheck(closeKind === curGroup.kind, closePos, () =>\n\t\t`Trying to close ${showGroupKind(closeKind)}, ` +\n\t\t`but last opened ${showGroupKind(curGroup.kind)}`)\n\tcloseGroupNoCheck(closePos, closeKind)\n}\n\nfunction closeGroupNoCheck(closePos, closeKind) {\n\tlet justClosed = curGroup\n\tdropGroup()\n\tjustClosed.loc.end = closePos\n\tswitch (closeKind) {\n\t\tcase Groups.Space: {\n\t\t\tconst size = justClosed.subTokens.length\n\t\t\tif (size !== 0)\n\t\t\t\t// Spaced should always have at least two elements.\n\t\t\t\taddToCurrentGroup(size === 1 ? justClosed.subTokens[0] : justClosed)\n\t\t\telse\n\t\t\t\twarn(justClosed.loc, 'Unnecessary space.')\n\t\t\tbreak\n\t\t}\n\t\tcase Groups.Line:\n\t\t\t// Line must have content.\n\t\t\t// This can happen if there was just a comment.\n\t\t\tif (!isEmpty(justClosed.subTokens))\n\t\t\t\taddToCurrentGroup(justClosed)\n\t\t\tbreak\n\t\tcase Groups.Block:\n\t\t\tcheck(!isEmpty(justClosed.subTokens), closePos, 'Empty block.')\n\t\t\taddToCurrentGroup(justClosed)\n\t\t\tbreak\n\t\tdefault:\n\t\t\taddToCurrentGroup(justClosed)\n\t}\n}\n\nexport function closeSpaceOKIfEmpty(pos) {\n\tassert(curGroup.kind === Groups.Space)\n\tif (curGroup.subTokens.length === 0)\n\t\tdropGroup()\n\telse\n\t\tcloseGroupNoCheck(pos, Groups.Space)\n}\n\nexport function openParenthesis(loc) {\n\topenGroup(loc.start, Groups.Parenthesis)\n\topenGroup(loc.end, Groups.Space)\n}\n\nexport function closeParenthesis(loc) {\n\tcloseGroupNoCheck(loc.start, Groups.Space)\n\tcloseGroup(loc.end, Groups.Parenthesis)\n}\n\nexport function closeGroupsForDedent(pos) {\n\tcloseLine(pos)\n\tcloseGroup(pos, Groups.Block)\n\t// It's OK to be missing a closing parenthesis if there's a block. E.g.:\n\t// a (b\n\t//\tc | no closing paren here\n\twhile (curGroup.kind === Groups.Parenthesis || curGroup.kind === Groups.Space)\n\t\tcloseGroupNoCheck(pos, curGroup.kind)\n}\n\n// When starting a new line, a spaced group is created implicitly.\nexport function openLine(pos) {\n\topenGroup(pos, Groups.Line)\n\topenGroup(pos, Groups.Space)\n}\n\nexport function closeLine(pos) {\n\tif (curGroup.kind === Groups.Space)\n\t\tcloseSpaceOKIfEmpty()\n\tcloseGroup(pos, Groups.Line)\n}\n\n// When encountering a space, it both closes and opens a spaced group.\nexport function space(loc) {\n\tmaybeCloseGroup(loc.start, Groups.Space)\n\topenGroup(loc.end, Groups.Space)\n}\n"
  },
  {
    "__docId__": 453,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "setupGroupContext",
    "memberof": "src/private/lex/groupContext.js",
    "longname": "src/private/lex/groupContext.js~setupGroupContext",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/groupContext.js",
    "importStyle": "{setupGroupContext}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 454,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "tearDownGroupContext",
    "memberof": "src/private/lex/groupContext.js",
    "longname": "src/private/lex/groupContext.js~tearDownGroupContext",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/groupContext.js",
    "importStyle": "{tearDownGroupContext}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "endPos",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 455,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "addToCurrentGroup",
    "memberof": "src/private/lex/groupContext.js",
    "longname": "src/private/lex/groupContext.js~addToCurrentGroup",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/groupContext.js",
    "importStyle": "{addToCurrentGroup}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "token",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 456,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "dropGroup",
    "memberof": "src/private/lex/groupContext.js",
    "longname": "src/private/lex/groupContext.js~dropGroup",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/lex/groupContext.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 457,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "openGroup",
    "memberof": "src/private/lex/groupContext.js",
    "longname": "src/private/lex/groupContext.js~openGroup",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/groupContext.js",
    "importStyle": "{openGroup}",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "openPos",
        "types": [
          "*"
        ]
      },
      {
        "name": "groupKind",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 458,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "maybeCloseGroup",
    "memberof": "src/private/lex/groupContext.js",
    "longname": "src/private/lex/groupContext.js~maybeCloseGroup",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/groupContext.js",
    "importStyle": "{maybeCloseGroup}",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "closePos",
        "types": [
          "*"
        ]
      },
      {
        "name": "closeKind",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 459,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "closeGroup",
    "memberof": "src/private/lex/groupContext.js",
    "longname": "src/private/lex/groupContext.js~closeGroup",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/groupContext.js",
    "importStyle": "{closeGroup}",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "closePos",
        "types": [
          "*"
        ]
      },
      {
        "name": "closeKind",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 460,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "closeGroupNoCheck",
    "memberof": "src/private/lex/groupContext.js",
    "longname": "src/private/lex/groupContext.js~closeGroupNoCheck",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/lex/groupContext.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "closePos",
        "types": [
          "*"
        ]
      },
      {
        "name": "closeKind",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 461,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "closeSpaceOKIfEmpty",
    "memberof": "src/private/lex/groupContext.js",
    "longname": "src/private/lex/groupContext.js~closeSpaceOKIfEmpty",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/groupContext.js",
    "importStyle": "{closeSpaceOKIfEmpty}",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "pos",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 462,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "openParenthesis",
    "memberof": "src/private/lex/groupContext.js",
    "longname": "src/private/lex/groupContext.js~openParenthesis",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/groupContext.js",
    "importStyle": "{openParenthesis}",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 463,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "closeParenthesis",
    "memberof": "src/private/lex/groupContext.js",
    "longname": "src/private/lex/groupContext.js~closeParenthesis",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/groupContext.js",
    "importStyle": "{closeParenthesis}",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 464,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "closeGroupsForDedent",
    "memberof": "src/private/lex/groupContext.js",
    "longname": "src/private/lex/groupContext.js~closeGroupsForDedent",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/groupContext.js",
    "importStyle": "{closeGroupsForDedent}",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "pos",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 465,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "openLine",
    "memberof": "src/private/lex/groupContext.js",
    "longname": "src/private/lex/groupContext.js~openLine",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/groupContext.js",
    "importStyle": "{openLine}",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [
      {
        "name": "pos",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 466,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "closeLine",
    "memberof": "src/private/lex/groupContext.js",
    "longname": "src/private/lex/groupContext.js~closeLine",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/groupContext.js",
    "importStyle": "{closeLine}",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [
      {
        "name": "pos",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 467,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "space",
    "memberof": "src/private/lex/groupContext.js",
    "longname": "src/private/lex/groupContext.js~space",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/groupContext.js",
    "importStyle": "{space}",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 468,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/lex/lex*.js",
    "memberof": null,
    "longname": "src/private/lex/lex*.js",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "content": "// TODO:ES6 Recursive modules should work, so this should not be necessary.\n\nexport let lexQuote\n\nexport function load(_) {\n\tlexQuote = _.lexQuote\n}\n"
  },
  {
    "__docId__": 469,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "load",
    "memberof": "src/private/lex/lex*.js",
    "longname": "src/private/lex/lex*.js~load",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/lex*.js",
    "importStyle": "{load}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 470,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/lex/lex.js",
    "memberof": null,
    "longname": "src/private/lex/lex.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import './loadLex*'\nimport {StartPos} from 'esast/dist/Loc'\nimport {openLine, setupGroupContext, tearDownGroupContext} from './groupContext'\nimport lexPlain from './lexPlain'\nimport {pos, setupSourceContext} from './sourceContext'\n\n/**\nLexes the source code into {@link Token}s.\nThe Mason lexer also groups tokens as part of lexing.\nThis makes writing a recursive-descent parser easy.\nSee {@link Group}.\n\n@param {string} sourceString\n@return {Group<Groups.Block>}\n\tBlock token representing the whole module.\n*/\nexport default function lex(sourceString) {\n\t// Algorithm requires trailing newline to close any blocks.\n\tif (!sourceString.endsWith('\\n'))\n\t\tsourceString = `${sourceString}\\n`\n\n\t/*\n\tUse a 0-terminated string so that we can use `0` as a switch case in lexPlain.\n\tThis is faster than checking whether index === length.\n\t(If we check past the end of the string we get `NaN`, which can't be switched on.)\n\t*/\n\tsourceString = `${sourceString}\\0`\n\n\tsetupGroupContext()\n\tsetupSourceContext(sourceString)\n\n\topenLine(StartPos)\n\n\tlexPlain(false)\n\n\tconst endPos = pos()\n\treturn tearDownGroupContext(endPos)\n}\n"
  },
  {
    "__docId__": 471,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "lex",
    "memberof": "src/private/lex/lex.js",
    "longname": "src/private/lex/lex.js~lex",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/lex.js",
    "importStyle": "lex",
    "description": "Lexes the source code into {@link Token}s.\nThe Mason lexer also groups tokens as part of lexing.\nThis makes writing a recursive-descent parser easy.\nSee {@link Group}.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceString",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Group<Groups.Block>"
      ],
      "spread": false,
      "description": "Block token representing the whole module."
    },
    "generator": false
  },
  {
    "__docId__": 472,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/lex/lexPlain.js",
    "memberof": null,
    "longname": "src/private/lex/lexPlain.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Loc, {Pos} from 'esast/dist/Loc'\nimport {code} from '../../CompileError'\nimport {check, fail, options, warn} from '../context'\nimport {NumberLiteral} from '../MsAst'\nimport {DocComment, Group, Groups, isKeyword, Keyword, Keywords, Name, opKeywordKindFromName\n\t} from '../Token'\nimport {ifElse, isEmpty, last} from '../util'\nimport {Chars, isDigit, isDigitBinary, isDigitHex, isDigitOctal, isNameCharacter, showChar\n\t} from './chars'\nimport {addToCurrentGroup, closeGroup, closeGroupsForDedent, closeLine,\n\tcloseParenthesis, closeSpaceOKIfEmpty, curGroup, openGroup, openLine, openParenthesis, space\n\t} from './groupContext'\nimport {lexQuote} from './lex*'\nimport {column, eat, eatRestOfLine, index, line, peek, pos, sourceString, skip, skipNewlines,\n\tskipRestOfLine, skipWhile, skipWhileEquals, takeWhileWithPrev, tryEat, tryEat2, tryEat3\n\t} from './sourceContext'\n\n/*\nIn the case of quote interpolation (\"a{b}c\") we'll recurse back into here.\nWhen isInQuote is true, we will not allow newlines.\n*/\nexport default function lexPlain(isInQuote) {\n\t// This tells us which indented block we're in.\n\t// Incrementing it means issuing a GP_OpenBlock and decrementing it means a GP_CloseBlock.\n\t// Does nothing if isInQuote.\n\tlet indent = 0\n\n\t// This is where we started lexing the current token.\n\tlet startColumn\n\tfunction startPos() {\n\t\treturn new Pos(line, startColumn)\n\t}\n\tfunction loc() {\n\t\treturn new Loc(startPos(), pos())\n\t}\n\tfunction keyword(kind) {\n\t\taddToCurrentGroup(new Keyword(loc(), kind))\n\t}\n\tfunction funKeyword(kind) {\n\t\tkeyword(kind)\n\t\t// First arg in its own spaced group\n\t\tspace(loc())\n\t}\n\tfunction eatAndAddNumber() {\n\t\tconst startIndex = index - 1\n\n\t\ttryEat(Chars.Hyphen)\n\t\tif (peek(-1) === Chars.N0) {\n\t\t\tconst p = peek()\n\t\t\tswitch (p) {\n\t\t\t\tcase Chars.LetterB: case Chars.LetterO: case Chars.LetterX:\n\t\t\t\t\tskip()\n\t\t\t\t\tconst isDigitSpecial =\n\t\t\t\t\t\tp === Chars.LetterB ?\n\t\t\t\t\t\tisDigitBinary :\n\t\t\t\t\t\tp === Chars.LetterO ?\n\t\t\t\t\t\tisDigitOctal :\n\t\t\t\t\t\tisDigitHex\n\t\t\t\t\tskipWhile(isDigitSpecial)\n\t\t\t\t\tbreak\n\t\t\t\tcase Chars.Dot:\n\t\t\t\t\tif (isDigit(peek(1))) {\n\t\t\t\t\t\tskip()\n\t\t\t\t\t\tskipWhile(isDigit)\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t}\n\t\t} else {\n\t\t\tskipWhile(isDigit)\n\t\t\tif (peek() === Chars.Dot && isDigit(peek(1))) {\n\t\t\t\tskip()\n\t\t\t\tskipWhile(isDigit)\n\t\t\t}\n\t\t}\n\n\t\tconst str = sourceString.slice(startIndex, index)\n\t\taddToCurrentGroup(new NumberLiteral(loc(), str))\n\t}\n\tfunction eatIndent() {\n\t\tconst optIndent = options.indent()\n\t\tif (optIndent === '\\t') {\n\t\t\tconst indent = skipWhileEquals(Chars.Tab)\n\t\t\tcheck(peek() !== Chars.Space, pos, 'Line begins in a space')\n\t\t\treturn indent\n\t\t} else {\n\t\t\tconst spaces = skipWhileEquals(Chars.Space)\n\t\t\tcheck(spaces % optIndent === 0, pos, () =>\n\t\t\t\t`Indentation spaces must be a multiple of ${optIndent}`)\n\t\t\treturn spaces / optIndent\n\t\t}\n\t}\n\n\n\tfunction handleName() {\n\t\tcheck(isNameCharacter(peek(-1)), loc(), () =>\n\t\t\t`Reserved character ${showChar(peek(-1))}`)\n\n\t\t// All other characters should be handled in a case above.\n\t\tconst name = takeWhileWithPrev(isNameCharacter)\n\n\t\tif (name.endsWith('_')) {\n\t\t\tif (name.length > 1)\n\t\t\t\thandleNameText(name.slice(0, name.length - 1))\n\t\t\tkeyword(Keywords.Focus)\n\t\t} else\n\t\t\thandleNameText(name)\n\t}\n\tfunction handleNameText(name) {\n\t\tifElse(opKeywordKindFromName(name),\n\t\t\tkind => {\n\t\t\t\tswitch (kind) {\n\t\t\t\t\tcase Keywords.Region:\n\t\t\t\t\t\tskipRestOfLine()\n\t\t\t\t\t\tkeyword(Keywords.Region)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase Keywords.Todo:\n\t\t\t\t\t\t// TODO: warn\n\t\t\t\t\t\tskipRestOfLine()\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tkeyword(kind)\n\t\t\t\t}\n\t\t\t},\n\t\t\t() => {\n\t\t\t\taddToCurrentGroup(new Name(loc(), name))\n\t\t\t})\n\t}\n\n\twhile (true) {\n\t\tstartColumn = column\n\t\tconst characterEaten = eat()\n\t\t// Generally, the type of a token is determined by the first character.\n\t\tswitch (characterEaten) {\n\t\t\tcase Chars.Null:\n\t\t\t\treturn\n\t\t\tcase Chars.CloseBrace:\n\t\t\t\tcheck(isInQuote, loc, () =>\n\t\t\t\t\t`Reserved character ${showChar(Chars.CloseBrace)}`)\n\t\t\t\treturn\n\t\t\tcase Chars.Quote:\n\t\t\t\tlexQuote(indent)\n\t\t\t\tbreak\n\n\t\t\t// GROUPS\n\n\t\t\tcase Chars.OpenParenthesis:\n\t\t\t\tif (tryEat(Chars.CloseParenthesis))\n\t\t\t\t\taddToCurrentGroup(new Group(loc(), [], Groups.Parenthesis))\n\t\t\t\telse\n\t\t\t\t\topenParenthesis(loc())\n\t\t\t\tbreak\n\t\t\tcase Chars.OpenBracket:\n\t\t\t\tif (tryEat(Chars.CloseBracket))\n\t\t\t\t\taddToCurrentGroup(new Group(loc(), [], Groups.Bracket))\n\t\t\t\telse {\n\t\t\t\t\topenGroup(startPos(), Groups.Bracket)\n\t\t\t\t\topenGroup(pos(), Groups.Space)\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase Chars.CloseParenthesis:\n\t\t\t\tcloseParenthesis(loc())\n\t\t\t\tbreak\n\t\t\tcase Chars.CloseBracket:\n\t\t\t\tcloseGroup(startPos(), Groups.Space)\n\t\t\t\tcloseGroup(pos(), Groups.Bracket)\n\t\t\t\tbreak\n\t\t\tcase Chars.Space:\n\t\t\t\tspace(loc())\n\t\t\t\tbreak\n\t\t\tcase Chars.Newline: {\n\t\t\t\tcheck(!isInQuote, loc, 'Quote interpolation cannot contain newline')\n\t\t\t\tif (peek(-2) === Chars.Space)\n\t\t\t\t\twarn(pos, 'Line ends in a space.')\n\n\t\t\t\t// Skip any blank lines.\n\t\t\t\tskipNewlines()\n\t\t\t\tconst oldIndent = indent\n\t\t\t\tindent = eatIndent()\n\t\t\t\tif (indent > oldIndent) {\n\t\t\t\t\tcheck(indent === oldIndent + 1, loc,\n\t\t\t\t\t\t'Line is indented more than once')\n\t\t\t\t\tconst l = loc()\n\t\t\t\t\t// Block at end of line goes in its own spaced group.\n\t\t\t\t\t// However, `~` preceding a block goes in a group with it.\n\t\t\t\t\tif (isEmpty(curGroup.subTokens) ||\n\t\t\t\t\t\t!isKeyword(Keywords.Lazy, last(curGroup.subTokens))) {\n\t\t\t\t\t\tif (curGroup.kind === Groups.Space)\n\t\t\t\t\t\t\tcloseSpaceOKIfEmpty(l.start)\n\t\t\t\t\t\topenGroup(l.end, Groups.Space)\n\t\t\t\t\t}\n\t\t\t\t\topenGroup(l.start, Groups.Block)\n\t\t\t\t\topenLine(l.end)\n\t\t\t\t} else {\n\t\t\t\t\tconst l = loc()\n\t\t\t\t\tfor (let i = indent; i < oldIndent; i = i + 1)\n\t\t\t\t\t\tcloseGroupsForDedent(l.start)\n\t\t\t\t\tcloseLine(l.start)\n\t\t\t\t\topenLine(l.end)\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase Chars.Tab:\n\t\t\t\t// We always eat tabs in the Newline handler,\n\t\t\t\t// so this will only happen in the middle of a line.\n\t\t\t\tfail(loc(), 'Tab may only be used to indent')\n\n\t\t\t// FUN\n\n\t\t\tcase Chars.Bang:\n\t\t\t\tif (tryEat(Chars.Bar))\n\t\t\t\t\tfunKeyword(Keywords.FunDo)\n\t\t\t\telse\n\t\t\t\t\thandleName()\n\t\t\t\tbreak\n\t\t\tcase Chars.Cash:\n\t\t\t\tif (tryEat2(Chars.Bang, Chars.Bar))\n\t\t\t\t\tfunKeyword(Keywords.FunAsyncDo)\n\t\t\t\telse if (tryEat(Chars.Bar))\n\t\t\t\t\tfunKeyword(Keywords.FunAsync)\n\t\t\t\telse\n\t\t\t\t\thandleName()\n\t\t\t\tbreak\n\t\t\tcase Chars.Star:\n\t\t\t\tif (tryEat2(Chars.Bang, Chars.Bar))\n\t\t\t\t\tfunKeyword(Keywords.FunGenDo)\n\t\t\t\telse if (tryEat(Chars.Bar))\n\t\t\t\t\tfunKeyword(Keywords.FunGen)\n\t\t\t\telse\n\t\t\t\t\thandleName()\n\t\t\t\tbreak\n\t\t\tcase Chars.Bar:\n\t\t\t\tif (tryEat(Chars.Space) || tryEat(Chars.Tab)) {\n\t\t\t\t\tconst text = eatRestOfLine()\n\t\t\t\t\tcloseSpaceOKIfEmpty(startPos())\n\t\t\t\t\tif (!(curGroup.kind === Groups.Line && curGroup.subTokens.length === 0))\n\t\t\t\t\t\tfail(loc,\n\t\t\t\t\t\t\t`Doc comment must go on its own line. Did you mean ${code('||')}?`)\n\t\t\t\t\taddToCurrentGroup(new DocComment(loc(), text))\n\t\t\t\t} else if (tryEat(Chars.Bar))\n\t\t\t\t\t// non-doc comment\n\t\t\t\t\tskipRestOfLine()\n\t\t\t\telse\n\t\t\t\t\tfunKeyword(Keywords.Fun)\n\t\t\t\tbreak\n\n\t\t\t// NUMBER\n\n\t\t\tcase Chars.Hyphen:\n\t\t\t\tif (isDigit(peek()))\n\t\t\t\t\t// eatAndAddNumber() looks at prev character, so hyphen included.\n\t\t\t\t\teatAndAddNumber()\n\t\t\t\telse\n\t\t\t\t\thandleName()\n\t\t\t\tbreak\n\t\t\tcase Chars.N0: case Chars.N1: case Chars.N2: case Chars.N3: case Chars.N4:\n\t\t\tcase Chars.N5: case Chars.N6: case Chars.N7: case Chars.N8: case Chars.N9:\n\t\t\t\teatAndAddNumber()\n\t\t\t\tbreak\n\n\n\t\t\t// OTHER\n\n\t\t\tcase Chars.Dot: {\n\t\t\t\tif (peek() === Chars.Space || peek() === Chars.Newline) {\n\t\t\t\t\t// Keywords.ObjEntry in its own spaced group.\n\t\t\t\t\t// We can't just create a new Group here because we want to\n\t\t\t\t\t// ensure it's not part of the preceding or following spaced group.\n\t\t\t\t\tcloseSpaceOKIfEmpty(startPos())\n\t\t\t\t\tkeyword(Keywords.ObjAssign)\n\t\t\t\t} else if (tryEat(Chars.Bar))\n\t\t\t\t\tfunKeyword(Keywords.FunThis)\n\t\t\t\telse if (tryEat2(Chars.Bang, Chars.Bar))\n\t\t\t\t\tfunKeyword(Keywords.FunThisDo)\n\t\t\t\telse if (tryEat2(Chars.Star, Chars.Bar))\n\t\t\t\t\tfunKeyword(Keywords.FunThisGen)\n\t\t\t\telse if (tryEat3(Chars.Star, Chars.Bang, Chars.Bar))\n\t\t\t\t\tfunKeyword(Keywords.FunThisGenDo)\n\t\t\t\telse if (tryEat(Chars.Dot))\n\t\t\t\t\tif (tryEat(Chars.Dot))\n\t\t\t\t\t\tkeyword(Keywords.Dot3)\n\t\t\t\t\telse\n\t\t\t\t\t\tkeyword(Keywords.Dot2)\n\t\t\t\telse\n\t\t\t\t\tkeyword(Keywords.Dot)\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tcase Chars.Colon:\n\t\t\t\tif (tryEat(Chars.Equal))\n\t\t\t\t\tkeyword(Keywords.LocalMutate)\n\t\t\t\telse\n\t\t\t\t\tkeyword(Keywords.Colon)\n\t\t\t\tbreak\n\n\t\t\tcase Chars.Tick:\n\t\t\t\tkeyword(Keywords.Tick)\n\t\t\t\tbreak\n\n\t\t\tcase Chars.Tilde:\n\t\t\t\tkeyword(Keywords.Lazy)\n\t\t\t\tbreak\n\n\t\t\tcase Chars.Ampersand:\n\t\t\t\tkeyword(Keywords.Ampersand)\n\t\t\t\tbreak\n\n\t\t\tcase Chars.Backslash: case Chars.Backtick: case Chars.Caret:\n\t\t\tcase Chars.Comma: case Chars.Percent: case Chars.Semicolon:\n\t\t\t\tfail(loc(), `Reserved character ${showChar(characterEaten)}`)\n\n\t\t\tdefault:\n\t\t\t\thandleName()\n\t\t}\n\t}\n}\n"
  },
  {
    "__docId__": 473,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "lexPlain",
    "memberof": "src/private/lex/lexPlain.js",
    "longname": "src/private/lex/lexPlain.js~lexPlain",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/lexPlain.js",
    "importStyle": "lexPlain",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "isInQuote",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 474,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/lex/lexQuote.js",
    "memberof": null,
    "longname": "src/private/lex/lexQuote.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {singleCharLoc} from 'esast/dist/Loc'\nimport {code} from '../../CompileError'\nimport {check, warn} from '../context'\nimport {Groups} from '../Token'\nimport {assert} from '../util'\nimport {Chars, isDigit, isNameCharacter} from './chars'\nimport {addToCurrentGroup, closeGroup, closeParenthesis, curGroup, openGroup, openParenthesis\n\t} from './groupContext'\nimport lexPlain from './lexPlain'\nimport {eat, peek, pos, skipNewlines, skipWhileEquals, stepBackMany, tryEatNewline\n\t} from './sourceContext'\n\nexport default function lexQuote(indent) {\n\tconst quoteIndent = indent + 1\n\n\t// Indented quote is characterized by being immediately followed by a newline.\n\t// The next line *must* have some content at the next indentation.\n\tconst isIndented = tryEatNewline()\n\tif (isIndented) {\n\t\tconst actualIndent = skipWhileEquals(Chars.Tab)\n\t\tcheck(actualIndent === quoteIndent, pos,\n\t\t\t'Indented quote must have exactly one more indent than previous line.')\n\t}\n\n\t// Current string literal part of quote we are reading.\n\t// This is a raw value.\n\tlet read = ''\n\n\tfunction maybeOutputRead() {\n\t\tif (read !== '') {\n\t\t\taddToCurrentGroup(read)\n\t\t\tread = ''\n\t\t}\n\t}\n\n\tfunction locSingle() {\n\t\treturn singleCharLoc(pos())\n\t}\n\n\topenGroup(locSingle().start, Groups.Quote)\n\n\teatChars: while (true) {\n\t\tconst char = eat()\n\t\tswitch (char) {\n\t\t\tcase Chars.Backslash: {\n\t\t\t\tconst next = eat()\n\t\t\t\tread = read + `\\\\${String.fromCharCode(next)}`\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t// Since these compile to template literals, have to remember to escape.\n\t\t\tcase Chars.Backtick:\n\t\t\t\tread = read + '\\\\`'\n\t\t\t\tbreak\n\t\t\tcase Chars.OpenBrace: {\n\t\t\t\tmaybeOutputRead()\n\t\t\t\tconst l = locSingle()\n\t\t\t\topenParenthesis(l)\n\t\t\t\tlexPlain(true)\n\t\t\t\tcloseParenthesis(l)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t// Don't need `case Chars.Null:` because that's always preceded by a newline.\n\t\t\tcase Chars.Newline: {\n\t\t\t\tconst originalPos = pos()\n\t\t\t\t// Go back to before we ate it.\n\t\t\t\toriginalPos.column = originalPos.column - 1\n\n\t\t\t\tcheck(isIndented, locSingle, 'Unclosed quote.')\n\t\t\t\t// Allow extra blank lines.\n\t\t\t\tconst numNewlines = skipNewlines()\n\t\t\t\tconst newIndent = skipWhileEquals(Chars.Tab)\n\t\t\t\tif (newIndent < quoteIndent) {\n\t\t\t\t\t// Indented quote section is over.\n\t\t\t\t\t// Undo reading the tabs and newline.\n\t\t\t\t\tstepBackMany(originalPos, numNewlines + newIndent)\n\t\t\t\t\tassert(peek() === Chars.Newline)\n\t\t\t\t\tbreak eatChars\n\t\t\t\t} else\n\t\t\t\t\tread = read +\n\t\t\t\t\t\t'\\n'.repeat(numNewlines) + '\\t'.repeat(newIndent - quoteIndent)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase Chars.Quote:\n\t\t\t\tif (!isIndented)\n\t\t\t\t\tbreak eatChars\n\t\t\t\t// Else fallthrough\n\t\t\tdefault:\n\t\t\t\t// I've tried pushing character codes to an array and stringifying them later,\n\t\t\t\t// but this turned out to be better.\n\t\t\t\tread = read + String.fromCharCode(char)\n\t\t}\n\t}\n\n\tmaybeOutputRead()\n\twarnForSimpleQuote(curGroup)\n\tcloseGroup(pos(), Groups.Quote)\n}\n\nfunction warnForSimpleQuote(quoteGroup) {\n\tconst tokens = quoteGroup.subTokens\n\tif (tokens.length === 1) {\n\t\tconst name = tokens[0]\n\t\tif (typeof name === 'string' && isName(name))\n\t\t\twarn(pos(), `Quoted text could be a simple quote ${code(`'${name}`)}.`)\n\t}\n}\n\nfunction isName(str) {\n\tconst cc0 = str.charCodeAt(0)\n\tif (isDigit(cc0) || cc0 === Chars.Tilde)\n\t\treturn false\n\tfor (let i = 0; i < str.length; i = i + 1)\n\t\tif (!isNameCharacter(str.charCodeAt(i)))\n\t\t\treturn false\n\treturn true\n}\n"
  },
  {
    "__docId__": 475,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "lexQuote",
    "memberof": "src/private/lex/lexQuote.js",
    "longname": "src/private/lex/lexQuote.js~lexQuote",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/lexQuote.js",
    "importStyle": "lexQuote",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "indent",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 476,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "warnForSimpleQuote",
    "memberof": "src/private/lex/lexQuote.js",
    "longname": "src/private/lex/lexQuote.js~warnForSimpleQuote",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/lex/lexQuote.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "quoteGroup",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 477,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "isName",
    "memberof": "src/private/lex/lexQuote.js",
    "longname": "src/private/lex/lexQuote.js~isName",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/lex/lexQuote.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 478,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/lex/loadLex*.js",
    "memberof": null,
    "longname": "src/private/lex/loadLex*.js",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "content": "// TODO:ES6 Recursive modules should work, so this should not be necessary.\n\nimport lexQuote from './lexQuote'\nimport {load} from './lex*'\n\nload({lexQuote})\n"
  },
  {
    "__docId__": 479,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/lex/sourceContext.js",
    "memberof": null,
    "longname": "src/private/lex/sourceContext.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Pos, StartLine, StartColumn} from 'esast/dist/Loc'\nimport {Chars} from './chars'\n\n/*\nThese are kept up-to-date as we iterate through sourceString.\nEvery access to index has corresponding changes to line and/or column.\nThis also explains why there are different functions for newlines vs other characters.\n*/\nexport let index\nexport let line\nexport let column\nexport let sourceString\n\nexport function setupSourceContext(_sourceString) {\n\tsourceString = _sourceString\n\tindex = 0\n\tline = StartLine\n\tcolumn = StartColumn\n}\n\n/*\nNOTE: We use character *codes* for everything.\nCharacters are of type Number and not just Strings of length one.\n*/\n\nexport function pos() {\n\treturn new Pos(line, column)\n}\n\nexport function peek(n=0) {\n\treturn sourceString.charCodeAt(index + n)\n}\n\n// May eat a Newline.\n// Caller *must* check for that case and increment line!\nexport function eat() {\n\tconst char = sourceString.charCodeAt(index)\n\tskip()\n\treturn char\n}\nexport function skip(n=1) {\n\tindex = index + n\n\tcolumn = column + n\n}\n\n// charToEat must not be Newline.\nexport function tryEat(charToEat) {\n\tconst canEat = peek() === charToEat\n\tif (canEat)\n\t\tskip()\n\treturn canEat\n}\n\n// chars must not be Newline\nexport function tryEat2(char1, char2) {\n\tconst canEat = peek() === char1 && peek(1) === char2\n\tif (canEat)\n\t\tskip(2)\n\treturn canEat\n}\n\nexport function tryEat3(char1, char2, char3) {\n\tconst canEat = peek() === char1 && peek(1) === char2 && peek(2) === char3\n\tif (canEat)\n\t\tskip(3)\n\treturn canEat\n}\n\nexport function tryEatNewline() {\n\tconst canEat = peek() === Chars.Newline\n\tif (canEat) {\n\t\tindex = index + 1\n\t\tline = line + 1\n\t\tcolumn = StartColumn\n\t}\n\treturn canEat\n}\n\n// Caller must ensure that backing up nCharsToBackUp characters brings us to oldPos.\nexport function stepBackMany(oldPos, nCharsToBackUp) {\n\tindex = index - nCharsToBackUp\n\tline = oldPos.line\n\tcolumn = oldPos.column\n}\n\n// For takeWhile, takeWhileWithPrev, and skipWhileEquals,\n// characterPredicate must *not* accept Newline.\n// Otherwise there may be an infinite loop!\nexport function takeWhile(characterPredicate) {\n\treturn _takeWhileWithStart(index, characterPredicate)\n}\nexport function takeWhileWithPrev(characterPredicate) {\n\treturn _takeWhileWithStart(index - 1, characterPredicate)\n}\nexport function _takeWhileWithStart(startIndex, characterPredicate) {\n\tskipWhile(characterPredicate)\n\treturn sourceString.slice(startIndex, index)\n}\n\nexport function skipWhileEquals(char) {\n\treturn skipWhile(_ => _ === char)\n}\n\nexport function skipRestOfLine() {\n\treturn skipWhile(_ => _ !== Chars.Newline)\n}\n\nexport function eatRestOfLine() {\n\treturn takeWhile(_ => _ !== Chars.Newline)\n}\n\nexport function skipWhile(characterPredicate) {\n\tconst startIndex = index\n\twhile (characterPredicate(peek()))\n\t\tindex = index + 1\n\tconst diff = index - startIndex\n\tcolumn = column + diff\n\treturn diff\n}\n\n// Called after seeing the first newline.\n// Returns # total newlines, including the first.\nexport function skipNewlines() {\n\tconst startLine = line\n\tline = line + 1\n\twhile (peek() === Chars.Newline) {\n\t\tindex = index + 1\n\t\tline = line + 1\n\t}\n\tcolumn = StartColumn\n\treturn line - startLine\n}\n\n// Sprinkle checkPos() around to debug line and column tracking errors.\n/*\nfunction checkPos() {\n\tconst p = _getCorrectPos()\n\tif (p.line !== line || p.column !== column)\n\t\tthrow new Error(`index: ${index}, wrong: ${Pos(line, column)}, right: ${p}`)\n}\nconst _indexToPos = new Map()\nfunction _getCorrectPos() {\n\tif (index === 0)\n\t\treturn Pos(StartLine, StartColumn)\n\n\tlet oldPos, oldIndex\n\tfor (oldIndex = index - 1; ; oldIndex = oldIndex - 1) {\n\t\toldPos = _indexToPos.get(oldIndex)\n\t\tif (oldPos !== undefined)\n\t\t\tbreak\n\t\tassert(oldIndex >= 0)\n\t}\n\tlet newLine = oldPos.line, newColumn = oldPos.column\n\tfor (; oldIndex < index; oldIndex = oldIndex + 1)\n\t\tif (sourceString.charCodeAt(oldIndex) === Newline) {\n\t\t\tnewLine = newLine + 1\n\t\t\tnewColumn = StartColumn\n\t\t} else\n\t\t\tnewColumn = newColumn + 1\n\n\tconst p = Pos(newLine, newColumn)\n\t_indexToPos.set(index, p)\n\treturn p\n}\n*/\n"
  },
  {
    "__docId__": 480,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "setupSourceContext",
    "memberof": "src/private/lex/sourceContext.js",
    "longname": "src/private/lex/sourceContext.js~setupSourceContext",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/sourceContext.js",
    "importStyle": "{setupSourceContext}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "_sourceString",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 481,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "pos",
    "memberof": "src/private/lex/sourceContext.js",
    "longname": "src/private/lex/sourceContext.js~pos",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/sourceContext.js",
    "importStyle": "{pos}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 482,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "peek",
    "memberof": "src/private/lex/sourceContext.js",
    "longname": "src/private/lex/sourceContext.js~peek",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/sourceContext.js",
    "importStyle": "{peek}",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 483,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "eat",
    "memberof": "src/private/lex/sourceContext.js",
    "longname": "src/private/lex/sourceContext.js~eat",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/sourceContext.js",
    "importStyle": "{eat}",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 484,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "skip",
    "memberof": "src/private/lex/sourceContext.js",
    "longname": "src/private/lex/sourceContext.js~skip",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/sourceContext.js",
    "importStyle": "{skip}",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 485,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "tryEat",
    "memberof": "src/private/lex/sourceContext.js",
    "longname": "src/private/lex/sourceContext.js~tryEat",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/sourceContext.js",
    "importStyle": "{tryEat}",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "charToEat",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 486,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "tryEat2",
    "memberof": "src/private/lex/sourceContext.js",
    "longname": "src/private/lex/sourceContext.js~tryEat2",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/sourceContext.js",
    "importStyle": "{tryEat2}",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "char1",
        "types": [
          "*"
        ]
      },
      {
        "name": "char2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 487,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "tryEat3",
    "memberof": "src/private/lex/sourceContext.js",
    "longname": "src/private/lex/sourceContext.js~tryEat3",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/sourceContext.js",
    "importStyle": "{tryEat3}",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "char1",
        "types": [
          "*"
        ]
      },
      {
        "name": "char2",
        "types": [
          "*"
        ]
      },
      {
        "name": "char3",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 488,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "tryEatNewline",
    "memberof": "src/private/lex/sourceContext.js",
    "longname": "src/private/lex/sourceContext.js~tryEatNewline",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/sourceContext.js",
    "importStyle": "{tryEatNewline}",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 489,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "stepBackMany",
    "memberof": "src/private/lex/sourceContext.js",
    "longname": "src/private/lex/sourceContext.js~stepBackMany",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/sourceContext.js",
    "importStyle": "{stepBackMany}",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [
      {
        "name": "oldPos",
        "types": [
          "*"
        ]
      },
      {
        "name": "nCharsToBackUp",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 490,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "takeWhile",
    "memberof": "src/private/lex/sourceContext.js",
    "longname": "src/private/lex/sourceContext.js~takeWhile",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/sourceContext.js",
    "importStyle": "{takeWhile}",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "characterPredicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 491,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "takeWhileWithPrev",
    "memberof": "src/private/lex/sourceContext.js",
    "longname": "src/private/lex/sourceContext.js~takeWhileWithPrev",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/sourceContext.js",
    "importStyle": "{takeWhileWithPrev}",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [
      {
        "name": "characterPredicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 492,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "_takeWhileWithStart",
    "memberof": "src/private/lex/sourceContext.js",
    "longname": "src/private/lex/sourceContext.js~_takeWhileWithStart",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/sourceContext.js",
    "importStyle": "{_takeWhileWithStart}",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "startIndex",
        "types": [
          "*"
        ]
      },
      {
        "name": "characterPredicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 493,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "skipWhileEquals",
    "memberof": "src/private/lex/sourceContext.js",
    "longname": "src/private/lex/sourceContext.js~skipWhileEquals",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/sourceContext.js",
    "importStyle": "{skipWhileEquals}",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "char",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 494,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "skipRestOfLine",
    "memberof": "src/private/lex/sourceContext.js",
    "longname": "src/private/lex/sourceContext.js~skipRestOfLine",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/sourceContext.js",
    "importStyle": "{skipRestOfLine}",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 495,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "eatRestOfLine",
    "memberof": "src/private/lex/sourceContext.js",
    "longname": "src/private/lex/sourceContext.js~eatRestOfLine",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/sourceContext.js",
    "importStyle": "{eatRestOfLine}",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 496,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "skipWhile",
    "memberof": "src/private/lex/sourceContext.js",
    "longname": "src/private/lex/sourceContext.js~skipWhile",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/sourceContext.js",
    "importStyle": "{skipWhile}",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [
      {
        "name": "characterPredicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 497,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "skipNewlines",
    "memberof": "src/private/lex/sourceContext.js",
    "longname": "src/private/lex/sourceContext.js~skipNewlines",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/lex/sourceContext.js",
    "importStyle": "{skipNewlines}",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 498,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/manglePath.js",
    "memberof": null,
    "longname": "src/private/manglePath.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "/** Some Mason modules have names that don't work as URl paths. */\nexport default function manglePath(path) {\n\treturn path.replace(/!/g, 'bang')\n\t.replace(/@/g, 'at')\n\t.replace(/\\?/g, 'q')\n\t.replace(/\\$/g, 'cash')\n}\n"
  },
  {
    "__docId__": 499,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "manglePath",
    "memberof": "src/private/manglePath.js",
    "longname": "src/private/manglePath.js~manglePath",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/manglePath.js",
    "importStyle": "manglePath",
    "description": "Some Mason modules have names that don't work as URl paths.",
    "lineNumber": 2,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 500,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/Slice.js",
    "memberof": null,
    "longname": "src/private/parse/Slice.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Loc from 'esast/dist/Loc'\nimport {isEmpty, opIf} from '../util'\n\n/**\nRepresents a slice of the `subTokens` of some {@link Group}.\nThis is just a view of it, so taking e.g. {@link tail} is O(1).\nMost parser functions act on a Slice and call other functions on sub-slices.\n*/\nexport default class Slice {\n\t/**\n\tSlice representing all subTokens of a {@link Group}.\n\t@type {Group} group\n\t*/\n\tstatic group(group) {\n\t\treturn new Slice(group.subTokens, 0, group.subTokens.length, group.loc)\n\t}\n\n\t/** @private */\n\tconstructor(tokens, start, end, loc) {\n\t\t/**\n\t\tArray of tokens in use.\n\t\tThe slice will only use the ones from `start` to `end`.\n\t\t(This is more efficient than calling {@link Array#slice} many times.)\n\t\t@type {Array<Token>}\n\t\t*/\n\t\tthis._tokens = tokens\n\t\t/**\n\t\tInclusive; index of first token in the slice.\n\t\t@type {number}\n\t\t*/\n\t\tthis._start = start\n\t\t/**\n\t\tExclusive; index of first token *not* in the slice.\n\t\t@type {number}\n\t\t*/\n\t\tthis._end = end\n\t\t/**\n\t\tSlice keeps track of changes to `loc` as sub-slices are made,\n\t\tso most parser functions will call `tokens.loc` when constructing the {@link MsAst}.\n\t\t@type {Loc}\n\t\t*/\n\t\tthis.loc = loc\n\t}\n\n\t/** Number of tokens. */\n\tsize() {\n\t\treturn this._end - this._start\n\t}\n\n\t/** True iff there are no tokens left. */\n\tisEmpty() {\n\t\treturn this._start === this._end\n\t}\n\n\t// For these methods, caller must ensure non-empty.\n\n\t/** First token. */\n\thead() {\n\t\treturn this._tokens[this._start]\n\t}\n\n\t/** Slice of first token. */\n\theadSlice() {\n\t\treturn Slice.group(this.head())\n\t}\n\n\t/** Second token. */\n\tsecond() {\n\t\treturn this._tokens[this._start + 1]\n\t}\n\n\t/** Last token. */\n\tlast() {\n\t\treturn this._tokens[this._end - 1]\n\t}\n\n\t/** Second-to-last token. */\n\tnextToLast() {\n\t\treturn this._tokens[this._end - 2]\n\t}\n\n\t/** Slice of all but the first token. */\n\ttail() {\n\t\treturn this._chopStart(this._start + 1)\n\t}\n\n\t/** Slice of all but the last token. */\n\trtail() {\n\t\treturn this._chopEnd(this._end - 1)\n\t}\n\n\t/**\n\tSplits on the first token satisfying `splitOn`.\n\t@splitOn {function(token:Token): boolean}\n\t@return {?{before: Slice, at: Token, after: Slice}}\n\t*/\n\topSplitOnce(splitOn) {\n\t\tfor (let i = this._start; i < this._end; i = i + 1) {\n\t\t\tconst token = this._tokens[i]\n\t\t\tif (splitOn(token))\n\t\t\t\treturn {\n\t\t\t\t\tbefore: this._chopEnd(i),\n\t\t\t\t\tat: token,\n\t\t\t\t\tafter: this._chopStart(i + 1)\n\t\t\t\t}\n\t\t}\n\t\treturn null\n\t}\n\n\t/**\n\tSplits on *every* token satisfying `splitOn`.\n\t@splitOn {function(token:Token): boolean}\n\t@return {?{Array<{before: Slice, at: Token>}}\n\t\tLast output will not have `at`.\n\t*/\n\topSplitMany(splitOn) {\n\t\tlet iLast = this._start\n\t\tconst out = []\n\t\tfor (let i = this._start; i < this._end; i = i + 1) {\n\t\t\tconst token = this._tokens[i]\n\t\t\tif (splitOn(token)) {\n\t\t\t\tout.push({before: this._chop(iLast, i), at: token})\n\t\t\t\tiLast = i + 1\n\t\t\t}\n\t\t}\n\n\t\treturn opIf(!isEmpty(out), () => {\n\t\t\tout.push({before: this._chopStart(iLast)})\n\t\t\treturn out\n\t\t})\n\t}\n\n\t/** Iterate over every Token. */\n\t* [Symbol.iterator]() {\n\t\tfor (let i = this._start; i < this._end; i = i + 1)\n\t\t\tyield this._tokens[i]\n\t}\n\n\t/**\n\tIterator over a Slice for every Token.\n\tAssumes every sub-token is a Slice too; meaning this is a {@link Group.Block} slice.\n\t*/\n\t* slices() {\n\t\tfor (const _ of this)\n\t\t\tyield Slice.group(_)\n\t}\n\n\t/**\n\tMaps over every Token.\n\t@param {function(token:Token)} mapper\n\t*/\n\tmap(mapper) {\n\t\tconst out = []\n\t\tfor (const _ of this)\n\t\t\tout.push(mapper(_))\n\t\treturn out\n\t}\n\n\t/** Maps over a Slice for every Token, as in {@link slices}.\t*/\n\tmapSlices(f) {\n\t\tconst out = []\n\t\tfor (const _ of this.slices())\n\t\t\tout.push(f(_))\n\t\treturn out\n\t}\n\n\t_chop(newStart, newEnd) {\n\t\tconst loc = new Loc(this._tokens[newStart].loc.start, this._tokens[newEnd - 1].loc.end)\n\t\treturn new Slice(this._tokens, newStart, newEnd, loc)\n\t}\n\n\t_chopStart(newStart) {\n\t\tconst loc = newStart === this._end ?\n\t\t\tthis.loc :\n\t\t\tnew Loc(this._tokens[newStart].loc.start, this.loc.end)\n\t\treturn new Slice(this._tokens, newStart, this._end, loc)\n\t}\n\n\t_chopEnd(newEnd) {\n\t\tconst loc = newEnd === this._start ?\n\t\t\tthis.loc :\n\t\t\tnew Loc(this.loc.start, this._tokens[newEnd - 1].loc.end)\n\t\treturn new Slice(this._tokens, this._start, newEnd, loc)\n\t}\n}\n"
  },
  {
    "__docId__": 501,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Slice",
    "memberof": "src/private/parse/Slice.js",
    "longname": "src/private/parse/Slice.js~Slice",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/Slice.js",
    "importStyle": "Slice",
    "description": "Represents a slice of the `subTokens` of some {@link Group}.\nThis is just a view of it, so taking e.g. {@link tail} is O(1).\nMost parser functions act on a Slice and call other functions on sub-slices.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 502,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "group",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice.group",
    "access": null,
    "description": "Slice representing all subTokens of a {@link Group}.",
    "lineNumber": 14,
    "params": [
      {
        "name": "group",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "type": {
      "nullable": null,
      "types": [
        "Group"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "__docId__": 503,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#constructor",
    "access": "private",
    "description": null,
    "lineNumber": 19,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      },
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      },
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 504,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_tokens",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#_tokens",
    "access": null,
    "description": "Array of tokens in use.\nThe slice will only use the ones from `start` to `end`.\n(This is more efficient than calling {@link Array#slice} many times.)",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Array<Token>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 505,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_start",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#_start",
    "access": null,
    "description": "Inclusive; index of first token in the slice.",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 506,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_end",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#_end",
    "access": null,
    "description": "Exclusive; index of first token *not* in the slice.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 507,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "loc",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#loc",
    "access": null,
    "description": "Slice keeps track of changes to `loc` as sub-slices are made,\nso most parser functions will call `tokens.loc` when constructing the {@link MsAst}.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Loc"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 508,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "size",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#size",
    "access": null,
    "description": "Number of tokens.",
    "lineNumber": 46,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 509,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isEmpty",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#isEmpty",
    "access": null,
    "description": "True iff there are no tokens left.",
    "lineNumber": 51,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 510,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "head",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#head",
    "access": null,
    "description": "First token.",
    "lineNumber": 58,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 511,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "headSlice",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#headSlice",
    "access": null,
    "description": "Slice of first token.",
    "lineNumber": 63,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 512,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "second",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#second",
    "access": null,
    "description": "Second token.",
    "lineNumber": 68,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 513,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "last",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#last",
    "access": null,
    "description": "Last token.",
    "lineNumber": 73,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 514,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "nextToLast",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#nextToLast",
    "access": null,
    "description": "Second-to-last token.",
    "lineNumber": 78,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 515,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "tail",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#tail",
    "access": null,
    "description": "Slice of all but the first token.",
    "lineNumber": 83,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 516,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "rtail",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#rtail",
    "access": null,
    "description": "Slice of all but the last token.",
    "lineNumber": 88,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 517,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "opSplitOnce",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#opSplitOnce",
    "access": null,
    "description": "Splits on the first token satisfying `splitOn`.",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@splitOn",
        "tagValue": "{function(token:Token): boolean}"
      }
    ],
    "params": [
      {
        "name": "splitOn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "{before: Slice, at: Token, after: Slice}"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 518,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "opSplitMany",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#opSplitMany",
    "access": null,
    "description": "Splits on *every* token satisfying `splitOn`.",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@splitOn",
        "tagValue": "{function(token:Token): boolean}"
      }
    ],
    "params": [
      {
        "name": "splitOn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "{Array<{before: Slice, at: Token>}"
      ],
      "spread": false,
      "description": "Last output will not have `at`."
    },
    "generator": false
  },
  {
    "__docId__": 519,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "[Symbol.iterator]",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#[Symbol.iterator]",
    "access": null,
    "description": "Iterate over every Token.",
    "lineNumber": 134,
    "params": [],
    "generator": true
  },
  {
    "__docId__": 520,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "slices",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#slices",
    "access": null,
    "description": "Iterator over a Slice for every Token.\nAssumes every sub-token is a Slice too; meaning this is a {@link Group.Block} slice.",
    "lineNumber": 143,
    "params": [],
    "generator": true
  },
  {
    "__docId__": 521,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "map",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#map",
    "access": null,
    "description": "Maps over every Token.",
    "lineNumber": 152,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(token:Token)"
        ],
        "spread": false,
        "optional": false,
        "name": "mapper",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 522,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "mapSlices",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#mapSlices",
    "access": null,
    "description": "Maps over a Slice for every Token, as in {@link slices}.",
    "lineNumber": 160,
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 523,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_chop",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#_chop",
    "access": null,
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [
      {
        "name": "newStart",
        "types": [
          "*"
        ]
      },
      {
        "name": "newEnd",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 524,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_chopStart",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#_chopStart",
    "access": null,
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "params": [
      {
        "name": "newStart",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 525,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_chopEnd",
    "memberof": "src/private/parse/Slice.js~Slice",
    "longname": "src/private/parse/Slice.js~Slice#_chopEnd",
    "access": null,
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [
      {
        "name": "newEnd",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 526,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/checks.js",
    "memberof": null,
    "longname": "src/private/parse/checks.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {check, fail} from '../context'\nimport {isKeyword, isReservedKeyword, showKeyword} from '../Token'\n\n/** Throw a {@link CompileError} if `tokens` has content. */\nexport function checkEmpty(tokens, message) {\n\tcheck(tokens.isEmpty(), tokens.loc, message)\n}\n\n/** Throw a {@link CompileError} if `tokens` is empty. */\nexport function checkNonEmpty(tokens, message) {\n\tcheck(!tokens.isEmpty(), tokens.loc, message)\n}\n\n/** Throw a {@link CompileError} if the token is not the expected keyword. */\nexport function checkKeyword(keyword, token) {\n\tcheck(isKeyword(keyword, token), token.loc, () =>\n\t\t`Expected ${showKeyword(keyword)}`)\n}\n\n/** Throw a {@link CompileError} about encountering an unparseable token. */\nexport function unexpected(token) {\n\tconst message = isReservedKeyword(token) ? `Reserved word ${token}.` : `Unexpected ${token}.`\n\tfail(token.loc, message)\n}\n"
  },
  {
    "__docId__": 527,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "checkEmpty",
    "memberof": "src/private/parse/checks.js",
    "longname": "src/private/parse/checks.js~checkEmpty",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/checks.js",
    "importStyle": "{checkEmpty}",
    "description": "Throw a {@link CompileError} if `tokens` has content.",
    "lineNumber": 5,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 528,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "checkNonEmpty",
    "memberof": "src/private/parse/checks.js",
    "longname": "src/private/parse/checks.js~checkNonEmpty",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/checks.js",
    "importStyle": "{checkNonEmpty}",
    "description": "Throw a {@link CompileError} if `tokens` is empty.",
    "lineNumber": 10,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 529,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "checkKeyword",
    "memberof": "src/private/parse/checks.js",
    "longname": "src/private/parse/checks.js~checkKeyword",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/checks.js",
    "importStyle": "{checkKeyword}",
    "description": "Throw a {@link CompileError} if the token is not the expected keyword.",
    "lineNumber": 15,
    "params": [
      {
        "name": "keyword",
        "types": [
          "*"
        ]
      },
      {
        "name": "token",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 530,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "unexpected",
    "memberof": "src/private/parse/checks.js",
    "longname": "src/private/parse/checks.js~unexpected",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/checks.js",
    "importStyle": "{unexpected}",
    "description": "Throw a {@link CompileError} about encountering an unparseable token.",
    "lineNumber": 21,
    "params": [
      {
        "name": "token",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 531,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/loadParse*.js",
    "memberof": null,
    "longname": "src/private/parse/loadParse*.js",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "content": "// TODO:ES6 Recursive modules should work, so this should not be necessary.\n\nimport parseClass from './parseClass'\nimport parseExcept from './parseExcept'\nimport parseExpr, {opParseExpr, parseExprParts} from './parseExpr'\nimport parseSingle from './parseSingle'\nimport parseSpaced from './parseSpaced'\nimport parseSwitch from './parseSwitch'\nimport {load} from './parse*'\n\nload({\n\topParseExpr,\n\tparseClass, parseExcept, parseExpr, parseExprParts, parseSingle, parseSpaced, parseSwitch\n})\n"
  },
  {
    "__docId__": 532,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parse*.js",
    "memberof": null,
    "longname": "src/private/parse/parse*.js",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "content": "// TODO:ES6 Recursive modules should work, so this should not be necessary.\n\nexport let opParseExpr\nexport let parseClass\nexport let parseExcept\nexport let parseExpr\nexport let parseExprParts\nexport let parseSingle\nexport let parseSpaced\nexport let parseSwitch\n\nexport function load(_) {\n\topParseExpr = _.opParseExpr\n\tparseClass = _.parseClass\n\tparseExcept = _.parseExcept\n\tparseExpr = _.parseExpr\n\tparseExprParts = _.parseExprParts\n\tparseSingle = _.parseSingle\n\tparseSpaced = _.parseSpaced\n\tparseSwitch = _.parseSwitch\n}\n"
  },
  {
    "__docId__": 533,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "load",
    "memberof": "src/private/parse/parse*.js",
    "longname": "src/private/parse/parse*.js~load",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parse*.js",
    "importStyle": "{load}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 534,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parse.js",
    "memberof": null,
    "longname": "src/private/parse/parse.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import './loadParse*'\nimport parseModule from './parseModule'\nimport Slice from './Slice'\n\n/**\nThis converts a Token tree to a MsAst.\nThis is a recursive-descent parser, made easier by two facts:\n\t* We have already grouped tokens.\n\t* Most of the time, an ast's type is determined by the first token.\n\nThere are exceptions such as assignment statements (indicated by a `=` somewhere in the middle).\nFor those we must iterate through tokens and split.\n(See {@link Slice#opSplitOnce} and {@link Slice#opSplitMany}.)\n\n@param {Group<Groups.Block>} rootToken\n@return {Module}\n*/\nexport default function parse(rootToken) {\n\treturn parseModule(Slice.group(rootToken))\n}\n"
  },
  {
    "__docId__": 535,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parse",
    "memberof": "src/private/parse/parse.js",
    "longname": "src/private/parse/parse.js~parse",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parse.js",
    "importStyle": "parse",
    "description": "This converts a Token tree to a MsAst.\nThis is a recursive-descent parser, made easier by two facts:\nWe have already grouped tokens.\nMost of the time, an ast's type is determined by the first token.\nThere are exceptions such as assignment statements (indicated by a `=` somewhere in the middle).\nFor those we must iterate through tokens and split.\n(See {@link Slice#opSplitOnce} and {@link Slice#opSplitMany}.)",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Group<Groups.Block>"
        ],
        "spread": false,
        "optional": false,
        "name": "rootToken",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Module"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 536,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseBlock.js",
    "memberof": null,
    "longname": "src/private/parse/parseBlock.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {check} from '../context'\nimport {Block, BlockWrap} from '../MsAst'\nimport {Groups, isGroup, showKeyword} from '../Token'\nimport {checkEmpty} from './checks'\nimport {parseLines} from './parseLine'\nimport tryTakeComment from './tryTakeComment'\nimport Slice from './Slice'\n\n/** Parse lines in a block and leading doc comment. */\nexport default function parseBlock(lineTokens) {\n\tconst [opComment, rest] = tryTakeComment(lineTokens)\n\treturn new Block(lineTokens.loc, opComment, parseLines(rest))\n}\n\n/**\nTokens on the line before a block, and tokens for the block itself.\n@return {[Slice, Slice]}\n*/\nexport function beforeAndBlock(tokens) {\n\tconst [before, opBlock] = beforeAndOpBlock(tokens)\n\tcheck(opBlock !== null, tokens.loc, 'Expected an indented block at the end.')\n\treturn [before, opBlock]\n}\n\n/**\n`beforeAndBlock` that returns `null` for missing block.\n@return {[Slice, ?Slice]}\n*/\nexport function beforeAndOpBlock(tokens) {\n\tif (tokens.isEmpty())\n\t\treturn [tokens, null]\n\telse {\n\t\tconst block = tokens.last()\n\t\treturn isGroup(Groups.Block, block) ? [tokens.rtail(), Slice.group(block)] : [tokens, null]\n\t}\n}\n\n/** Parse a Block as a single value. */\nexport function parseBlockWrap(tokens) {\n\treturn new BlockWrap(tokens.loc, parseBlock(tokens))\n}\n\n/**\nParse a block, failing if there's something preceding it.\n@param {Keywords} keywordKind Keyword that precedes the block. Used for error message.\n@param {Slice} tokens Tokens which should have a block at the end.\n*/\nexport function justBlock(keywordKind, tokens) {\n\tconst [before, block] = beforeAndBlock(tokens)\n\tcheckEmpty(before, () =>\n\t\t`Did not expect anything between ${showKeyword(keywordKind)} and block.`)\n\treturn block\n}\n\n/** Parse a block from the end of `tokens`, failing if there's something preceding it. */\nexport function parseJustBlock(keywordKind, tokens) {\n\treturn parseBlock(justBlock(keywordKind, tokens))\n}\n"
  },
  {
    "__docId__": 537,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseBlock",
    "memberof": "src/private/parse/parseBlock.js",
    "longname": "src/private/parse/parseBlock.js~parseBlock",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseBlock.js",
    "importStyle": "parseBlock",
    "description": "Parse lines in a block and leading doc comment.",
    "lineNumber": 10,
    "params": [
      {
        "name": "lineTokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 538,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "beforeAndBlock",
    "memberof": "src/private/parse/parseBlock.js",
    "longname": "src/private/parse/parseBlock.js~beforeAndBlock",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseBlock.js",
    "importStyle": "{beforeAndBlock}",
    "description": "Tokens on the line before a block, and tokens for the block itself.",
    "lineNumber": 19,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[Slice, Slice]"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 539,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "beforeAndOpBlock",
    "memberof": "src/private/parse/parseBlock.js",
    "longname": "src/private/parse/parseBlock.js~beforeAndOpBlock",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseBlock.js",
    "importStyle": "{beforeAndOpBlock}",
    "description": "`beforeAndBlock` that returns `null` for missing block.",
    "lineNumber": 29,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[Slice, ?Slice]"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 540,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseBlockWrap",
    "memberof": "src/private/parse/parseBlock.js",
    "longname": "src/private/parse/parseBlock.js~parseBlockWrap",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseBlock.js",
    "importStyle": "{parseBlockWrap}",
    "description": "Parse a Block as a single value.",
    "lineNumber": 39,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 541,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "justBlock",
    "memberof": "src/private/parse/parseBlock.js",
    "longname": "src/private/parse/parseBlock.js~justBlock",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseBlock.js",
    "importStyle": "{justBlock}",
    "description": "Parse a block, failing if there's something preceding it.",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "Keywords"
        ],
        "spread": false,
        "optional": false,
        "name": "keywordKind",
        "description": "Keyword that precedes the block. Used for error message."
      },
      {
        "nullable": null,
        "types": [
          "Slice"
        ],
        "spread": false,
        "optional": false,
        "name": "tokens",
        "description": "Tokens which should have a block at the end."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 542,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseJustBlock",
    "memberof": "src/private/parse/parseBlock.js",
    "longname": "src/private/parse/parseBlock.js~parseJustBlock",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseBlock.js",
    "importStyle": "{parseJustBlock}",
    "description": "Parse a block from the end of `tokens`, failing if there's something preceding it.",
    "lineNumber": 56,
    "params": [
      {
        "name": "keywordKind",
        "types": [
          "*"
        ]
      },
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 543,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseCase.js",
    "memberof": null,
    "longname": "src/private/parse/parseCase.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {check} from '../context'\nimport {AssignSingle, Case, CasePart, Pattern} from '../MsAst'\nimport {Groups, isGroup, isKeyword, Keywords, showKeyword} from '../Token'\nimport {opMap} from '../util'\nimport {checkEmpty} from './checks'\nimport {opParseExpr, parseExpr} from './parse*'\nimport parseBlock, {beforeAndBlock, parseJustBlock} from './parseBlock'\nimport parseLocalDeclares from './parseLocalDeclares'\nimport parseSpaced from './parseSpaced'\nimport Slice from './Slice'\n\n/** Parse a {@link Case}. */\nexport default function parseCase(casedFromFun, tokens) {\n\tconst [before, block] = beforeAndBlock(tokens)\n\n\tlet opCased\n\tif (casedFromFun) {\n\t\tcheckEmpty(before, 'Can\\'t make focus — is implicitly provided as first argument.')\n\t\topCased = null\n\t} else\n\t\topCased = opMap(opParseExpr(before), _ => AssignSingle.focus(_.loc, _))\n\n\tconst lastLine = Slice.group(block.last())\n\tconst [partLines, opElse] = isKeyword(Keywords.Else, lastLine.head()) ?\n\t\t[block.rtail(), parseJustBlock(Keywords.Else, lastLine.tail())] :\n\t\t[block, null]\n\n\tconst parts = partLines.mapSlices(line => {\n\t\tconst [before, block] = beforeAndBlock(line)\n\t\treturn new CasePart(line.loc, parseCaseTest(before), parseBlock(block))\n\t})\n\tcheck(parts.length > 0, tokens.loc, () =>\n\t\t`Must have at least 1 non-${showKeyword(Keywords.Else)} test.`)\n\n\treturn new Case(tokens.loc, opCased, parts, opElse)\n}\n\nfunction parseCaseTest(tokens) {\n\tconst first = tokens.head()\n\t// Pattern match starts with type test and is followed by local declares.\n\t// E.g., `:Some val`\n\tif (isGroup(Groups.Space, first) && tokens.size() > 1) {\n\t\tconst ft = Slice.group(first)\n\t\tif (isKeyword(Keywords.Colon, ft.head())) {\n\t\t\tconst type = parseSpaced(ft.tail())\n\t\t\tconst locals = parseLocalDeclares(tokens.tail())\n\t\t\treturn new Pattern(tokens.loc, type, locals)\n\t\t}\n\t}\n\treturn parseExpr(tokens)\n}\n"
  },
  {
    "__docId__": 544,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseCase",
    "memberof": "src/private/parse/parseCase.js",
    "longname": "src/private/parse/parseCase.js~parseCase",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseCase.js",
    "importStyle": "parseCase",
    "description": "Parse a {@link Case}.",
    "lineNumber": 13,
    "params": [
      {
        "name": "casedFromFun",
        "types": [
          "*"
        ]
      },
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 545,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseCaseTest",
    "memberof": "src/private/parse/parseCase.js",
    "longname": "src/private/parse/parseCase.js~parseCaseTest",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseCase.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 546,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseClass.js",
    "memberof": null,
    "longname": "src/private/parse/parseClass.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Class, ClassKindDo, Constructor, Fun} from '../MsAst'\nimport {isKeyword, Keywords} from '../Token'\nimport {ifElse} from '../util'\nimport {opParseExpr, parseExprParts} from './parse*'\nimport {beforeAndOpBlock, parseJustBlock} from './parseBlock'\nimport {funArgsAndBlock} from './parseFun'\nimport parseMethodImpls, {parseStatics} from './parseMethodImpls'\nimport tryTakeComment from './tryTakeComment'\n\n/** Parse a {@link Class}. */\nexport default function parseClass(tokens) {\n\tconst [before, opBlock] = beforeAndOpBlock(tokens)\n\tconst {opSuperClass, kinds} = parseClassHeader(before)\n\n\tlet opComment = null, opDo = null, statics = [], opConstructor = null, methods = []\n\tconst finish = () => new Class(tokens.loc,\n\t\t\topSuperClass, kinds, opComment, opDo, statics, opConstructor, methods)\n\n\tif (opBlock === null)\n\t\treturn finish()\n\n\tlet [opCom, rest] = tryTakeComment(opBlock)\n\topComment = opCom\n\n\tif (rest.isEmpty())\n\t\treturn finish()\n\n\tconst line1 = rest.headSlice()\n\tif (isKeyword(Keywords.Do, line1.head())) {\n\t\tconst done = parseJustBlock(Keywords.Do, line1.tail())\n\t\topDo = new ClassKindDo(line1.loc, done)\n\t\trest = rest.tail()\n\t}\n\n\tif (rest.isEmpty())\n\t\treturn finish()\n\n\tconst line2 = rest.headSlice()\n\tif (isKeyword(Keywords.Static, line2.head())) {\n\t\tstatics = parseStatics(line2.tail())\n\t\trest = rest.tail()\n\t}\n\n\tif (rest.isEmpty())\n\t\treturn finish()\n\n\tconst line3 = rest.headSlice()\n\tif (isKeyword(Keywords.Construct, line3.head())) {\n\t\topConstructor = parseConstructor(line3.tail())\n\t\trest = rest.tail()\n\t}\n\tmethods = parseMethodImpls(rest)\n\n\treturn finish()\n}\n\nfunction parseClassHeader(tokens) {\n\tconst [extendedTokens, kinds] =\n\t\tifElse(tokens.opSplitOnce(_ => isKeyword(Keywords.Kind, _)),\n\t\t\t({before, after}) => [before, parseExprParts(after)],\n\t\t\t() => [tokens, []])\n\tconst opSuperClass = opParseExpr(extendedTokens)\n\treturn {opSuperClass, kinds}\n}\n\nfunction parseConstructor(tokens) {\n\tconst {args, memberArgs, opRestArg, block} = funArgsAndBlock(tokens, false, true)\n\tconst fun = new Fun(tokens.loc, args, opRestArg, block, {isThisFun: true, isDo: true})\n\treturn new Constructor(tokens.loc, fun, memberArgs)\n}\n"
  },
  {
    "__docId__": 547,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseClass",
    "memberof": "src/private/parse/parseClass.js",
    "longname": "src/private/parse/parseClass.js~parseClass",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseClass.js",
    "importStyle": "parseClass",
    "description": "Parse a {@link Class}.",
    "lineNumber": 11,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 548,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseClassHeader",
    "memberof": "src/private/parse/parseClass.js",
    "longname": "src/private/parse/parseClass.js~parseClassHeader",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseClass.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 549,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseConstructor",
    "memberof": "src/private/parse/parseClass.js",
    "longname": "src/private/parse/parseClass.js~parseConstructor",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseClass.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 550,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseDel.js",
    "memberof": null,
    "longname": "src/private/parse/parseDel.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {check} from '../context'\nimport {Call} from '../MsAst'\nimport {unexpected} from './checks'\nimport {Groups, isGroup, Keywords, showKeyword} from '../Token'\nimport {parseExprParts, parseSpaced} from './parse*'\nimport Slice from './Slice'\n\nexport default function parseDel(tokens) {\n\tcheck(tokens.size() === 1, tokens.loc, () =>\n\t\t`${showKeyword(Keywords.Del)} takes only one argument.`)\n\tconst spaced = tokens.head()\n\tif (!isGroup(Groups.Space, spaced))\n\t\tunexpected(spaced)\n\n\tconst parts = Slice.group(spaced)\n\tconst last = parts.last()\n\tif (isGroup(Groups.Bracket, last)) {\n\t\tconst object = parseSpaced(parts.rtail())\n\t\tconst args = parseExprParts(Slice.group(last))\n\t\treturn Call.delSub(tokens.loc, object, args)\n\t} else\n\t\tunexpected(spaced)\n}\n"
  },
  {
    "__docId__": 551,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseDel",
    "memberof": "src/private/parse/parseDel.js",
    "longname": "src/private/parse/parseDel.js~parseDel",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseDel.js",
    "importStyle": "parseDel",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 552,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseExcept.js",
    "memberof": null,
    "longname": "src/private/parse/parseExcept.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {check} from '../context'\nimport {Catch, Except} from '../MsAst'\nimport {isKeyword, Keywords, showKeyword} from '../Token'\nimport {checkKeyword} from './checks'\nimport parseBlock, {beforeAndBlock, justBlock, parseJustBlock} from './parseBlock'\nimport {parseLocalDeclareOrFocus} from './parseLocalDeclares'\n\n/** Parse an {@link Except}. */\nexport default function parseExcept(tokens) {\n\tconst lines = justBlock(Keywords.Except, tokens)\n\tconst [_try, rest] = takeTry(lines)\n\tconst [typedCatches, opCatchAll, rest2] = takeTypedCatches(rest)\n\tconst [opElse, rest3] = opTakeElse(rest2)\n\tconst opFinally = parseOpFinally(rest3)\n\treturn new Except(tokens.loc, _try, typedCatches, opCatchAll, opElse, opFinally)\n}\n\nfunction takeTry(lines) {\n\tconst line = lines.headSlice()\n\tcheckKeyword(Keywords.Try, line.head())\n\treturn [parseJustBlock(Keywords.Try, line.tail()), lines.tail()]\n}\n\nfunction takeTypedCatches(lines) {\n\tconst typedCatches = []\n\tlet opCatchAll = null\n\n\twhile (!lines.isEmpty()) {\n\t\tconst line = lines.headSlice()\n\t\tif (!isKeyword(Keywords.Catch, line.head()))\n\t\t\tbreak\n\n\t\tconst [before, block] = beforeAndBlock(line.tail())\n\t\tconst caught = parseLocalDeclareOrFocus(before)\n\t\tconst _catch = new Catch(line.loc, caught, parseBlock(block))\n\n\t\tlines = lines.tail()\n\n\t\tif (caught.opType === null) {\n\t\t\topCatchAll = _catch\n\t\t\tbreak\n\t\t} else\n\t\t\ttypedCatches.push(_catch)\n\t}\n\treturn [typedCatches, opCatchAll, lines]\n}\n\nfunction opTakeElse(lines) {\n\tif (lines.isEmpty())\n\t\treturn [null, lines]\n\n\tconst line = lines.headSlice()\n\tconst tokenElse = line.head()\n\treturn isKeyword(Keywords.Else, tokenElse) ?\n\t\t[parseJustBlock(Keywords.Else, line.tail()), lines.tail()] :\n\t\t[null, lines]\n}\n\nfunction parseOpFinally(lines) {\n\tif (lines.isEmpty())\n\t\treturn null\n\n\tconst line = lines.headSlice()\n\tcheckKeyword(Keywords.Finally, line.head())\n\tcheck(lines.size() === 1, lines.loc, () =>\n\t\t`Nothing may come after ${showKeyword(Keywords.Finally)}.`)\n\treturn parseJustBlock(Keywords.Finally, line.tail())\n}\n"
  },
  {
    "__docId__": 553,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseExcept",
    "memberof": "src/private/parse/parseExcept.js",
    "longname": "src/private/parse/parseExcept.js~parseExcept",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseExcept.js",
    "importStyle": "parseExcept",
    "description": "Parse an {@link Except}.",
    "lineNumber": 9,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 554,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "takeTry",
    "memberof": "src/private/parse/parseExcept.js",
    "longname": "src/private/parse/parseExcept.js~takeTry",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseExcept.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "lines",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 555,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "takeTypedCatches",
    "memberof": "src/private/parse/parseExcept.js",
    "longname": "src/private/parse/parseExcept.js~takeTypedCatches",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseExcept.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "lines",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 556,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "opTakeElse",
    "memberof": "src/private/parse/parseExcept.js",
    "longname": "src/private/parse/parseExcept.js~opTakeElse",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseExcept.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [
      {
        "name": "lines",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 557,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseOpFinally",
    "memberof": "src/private/parse/parseExcept.js",
    "longname": "src/private/parse/parseExcept.js~parseOpFinally",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseExcept.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "lines",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 558,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseExpr.js",
    "memberof": null,
    "longname": "src/private/parse/parseExpr.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Loc from 'esast/dist/Loc'\nimport {check} from '../context'\nimport {Await, Call, Cond, Conditional, LocalDeclare, Logic, Logics, New, Not, ObjPair, ObjSimple,\n\tPipe, SuperCall, With, Yield, YieldTo} from '../MsAst'\nimport {isAnyKeyword, isKeyword, Keywords, Name, showKeyword} from '../Token'\nimport {cat, head, ifElse, opIf, tail} from '../util'\nimport {checkNonEmpty} from './checks'\nimport {parseClass, parseExcept, parseSingle, parseSwitch} from './parse*'\nimport parseBlock, {beforeAndBlock, beforeAndOpBlock} from './parseBlock'\nimport parseCase from './parseCase'\nimport parseDel from './parseDel'\nimport parseFor from './parseFor'\nimport parseFun from './parseFun'\nimport parseMethod from './parseMethod'\nimport parseKind from './parseKind'\nimport {parseLocalDeclare} from './parseLocalDeclares'\n\n/** Parse a {@link Val}. */\nexport default function parseExpr(tokens) {\n\treturn ifElse(tokens.opSplitMany(_ => isKeyword(Keywords.ObjAssign, _)),\n\t\tsplits => {\n\t\t\t// Short object form, such as (a. 1, b. 2)\n\t\t\tconst first = splits[0].before\n\t\t\tcheckNonEmpty(first, () => `Unexpected ${splits[0].at}`)\n\t\t\tconst tokensCaller = first.rtail()\n\n\t\t\tconst pairs = []\n\t\t\tfor (let i = 0; i < splits.length - 1; i = i + 1) {\n\t\t\t\tconst name = splits[i].before.last()\n\t\t\t\tcheck(name instanceof Name, name.loc, () =>\n\t\t\t\t\t`Expected a name, not ${name}`)\n\t\t\t\tconst tokensValue = i === splits.length - 2 ?\n\t\t\t\t\tsplits[i + 1].before :\n\t\t\t\t\tsplits[i + 1].before.rtail()\n\t\t\t\tconst value = parseExprPlain(tokensValue)\n\t\t\t\tconst loc = new Loc(name.loc.start, tokensValue.loc.end)\n\t\t\t\tpairs.push(new ObjPair(loc, name.name, value))\n\t\t\t}\n\t\t\tconst val = new ObjSimple(tokens.loc, pairs)\n\t\t\tif (tokensCaller.isEmpty())\n\t\t\t\treturn val\n\t\t\telse {\n\t\t\t\tconst parts = parseExprParts(tokensCaller)\n\t\t\t\treturn new Call(tokens.loc, head(parts), cat(tail(parts), val))\n\t\t\t}\n\t\t},\n\t\t() => parseExprPlain(tokens))\n}\n\nexport function opParseExpr(tokens) {\n\treturn opIf(!tokens.isEmpty(), () => parseExpr(tokens))\n}\n\n/**\nTreating tokens separately, parse {@link Val}s.\nThis is called for e.g. the contents of an array (`[a b c]`).\nThis is different from {@link parseExpr} because `a b` will parse as 2 different things, not a call.\nHowever, `cond a b c` will still parse as a single expression.\n@return {Array<Val>}\n*/\nexport function parseExprParts(tokens) {\n\treturn ifElse(tokens.opSplitOnce(_ => isAnyKeyword(exprSplitKeywords, _)),\n\t\t({before, at, after}) => cat(before.map(parseSingle), keywordExpr(at, after)),\n\t\t() => tokens.map(parseSingle))\n}\n\n/** The keyword `at` groups with everything after it. */\nfunction keywordExpr(at, after) {\n\tswitch (at.kind) {\n\t\tcase Keywords.And: case Keywords.Or: {\n\t\t\tconst kind = at.kind === Keywords.And ? Logics.And : Logics.Or\n\t\t\treturn new Logic(at.loc, kind, parseExprParts(after))\n\t\t}\n\t\tcase Keywords.Await:\n\t\t\treturn new Await(at.loc, parseExprPlain(after))\n\t\tcase Keywords.Case:\n\t\t\treturn parseCase(false, after)\n\t\tcase Keywords.Class:\n\t\t\treturn parseClass(after)\n\t\tcase Keywords.Cond:\n\t\t\treturn parseCond(after)\n\t\tcase Keywords.Del:\n\t\t\treturn parseDel(after)\n\t\tcase Keywords.Except:\n\t\t\treturn parseExcept(after)\n\t\tcase Keywords.For: case Keywords.ForAsync: case Keywords.ForBag:\n\t\t\treturn parseFor(at.kind, after)\n\t\tcase Keywords.Fun: case Keywords.FunDo:\n\t\tcase Keywords.FunThis: case Keywords.FunThisDo:\n\t\tcase Keywords.FunAsync: case Keywords.FunAsyncDo:\n\t\tcase Keywords.FunThisAsync: case Keywords.FunThisAsyncDo:\n\t\tcase Keywords.FunGen: case Keywords.FunGenDo:\n\t\tcase Keywords.FunThisGen: case Keywords.FunThisGenDo:\n\t\t\treturn parseFun(at.kind, after)\n\t\tcase Keywords.If: case Keywords.Unless:\n\t\t\treturn parseConditional(at.kind, after)\n\t\tcase Keywords.Kind:\n\t\t\treturn parseKind(after)\n\t\tcase Keywords.Method:\n\t\t\treturn parseMethod(after)\n\t\tcase Keywords.New: {\n\t\t\tconst parts = parseExprParts(after)\n\t\t\treturn new New(at.loc, head(parts), tail(parts))\n\t\t}\n\t\tcase Keywords.Not:\n\t\t\treturn new Not(at.loc, parseExprPlain(after))\n\t\tcase Keywords.Pipe:\n\t\t\treturn parsePipe(after)\n\t\tcase Keywords.Super:\n\t\t\treturn new SuperCall(at.loc, parseExprParts(after))\n\t\tcase Keywords.Switch:\n\t\t\treturn parseSwitch(false, after)\n\t\tcase Keywords.With:\n\t\t\treturn parseWith(after)\n\t\tcase Keywords.Yield:\n\t\t\treturn new Yield(at.loc, opIf(!after.isEmpty(), () => parseExprPlain(after)))\n\t\tcase Keywords.YieldTo:\n\t\t\treturn new YieldTo(at.loc, parseExprPlain(after))\n\t\tdefault:\n\t\t\tthrow new Error(at.kind)\n\t}\n}\n\n\nconst exprSplitKeywords = new Set([\n\tKeywords.And, Keywords.Await, Keywords.Case, Keywords.Class, Keywords.Cond, Keywords.Del,\n\tKeywords.Except, Keywords.For, Keywords.ForAsync, Keywords.ForBag, Keywords.Fun, Keywords.FunDo,\n\tKeywords.FunThis, Keywords.FunThisDo, Keywords.FunAsync, Keywords.FunAsyncDo,\n\tKeywords.FunThisAsync, Keywords.FunThisAsyncDo, Keywords.FunGen, Keywords.FunGenDo,\n\tKeywords.FunThisGen, Keywords.FunThisGenDo, Keywords.If, Keywords.Kind, Keywords.Method,\n\tKeywords.New, Keywords.Not, Keywords.Or, Keywords.Pipe, Keywords.Super, Keywords.Switch,\n\tKeywords.Unless, Keywords.With, Keywords.Yield, Keywords.YieldTo\n])\n\nfunction parseExprPlain(tokens) {\n\tcheckNonEmpty(tokens, 'Expected an expression, got nothing.')\n\tconst parts = parseExprParts(tokens)\n\treturn parts.length === 1 ? head(parts) : new Call(tokens.loc, head(parts), tail(parts))\n}\n\nfunction parseCond(tokens) {\n\tconst parts = parseExprParts(tokens)\n\tcheck(parts.length === 3, tokens.loc, () =>\n\t\t`${showKeyword(Keywords.Cond)} takes exactly 3 arguments.`)\n\treturn new Cond(tokens.loc, ...parts)\n}\n\nfunction parseConditional(kind, tokens) {\n\tconst [before, opBlock] = beforeAndOpBlock(tokens)\n\tconst [condition, result] = ifElse(opBlock,\n\t\t_ => [parseExprPlain(before), parseBlock(_)],\n\t\t() => {\n\t\t\tconst parts = parseExprParts(before)\n\t\t\tcheck(parts.length === 2, tokens.loc, () =>\n\t\t\t\t`${showKeyword(kind)} with no block takes exactly 2 arguments.`)\n\t\t\treturn parts\n\t\t})\n\treturn new Conditional(tokens.loc, condition, result, kind === Keywords.Unless)\n}\n\nfunction parsePipe(tokens) {\n\tconst [before, block] = beforeAndBlock(tokens)\n\tconst val = parseExpr(before)\n\tconst pipes = block.mapSlices(parseExpr)\n\treturn new Pipe(tokens.loc, val, pipes)\n}\n\nfunction parseWith(tokens) {\n\tconst [before, block] = beforeAndBlock(tokens)\n\n\tconst [val, declare] = ifElse(before.opSplitOnce(_ => isKeyword(Keywords.As, _)),\n\t\t({before, after}) => {\n\t\t\tcheck(after.size() === 1, () =>\n\t\t\t\t`Expected only 1 token after ${showKeyword(Keywords.As)}.`)\n\t\t\treturn [parseExprPlain(before), parseLocalDeclare(after.head())]\n\t\t},\n\t\t() => [parseExprPlain(before), LocalDeclare.focus(tokens.loc)])\n\n\treturn new With(tokens.loc, declare, val, parseBlock(block))\n}\n"
  },
  {
    "__docId__": 559,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseExpr",
    "memberof": "src/private/parse/parseExpr.js",
    "longname": "src/private/parse/parseExpr.js~parseExpr",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseExpr.js",
    "importStyle": "parseExpr",
    "description": "Parse a {@link Val}.",
    "lineNumber": 19,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 560,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "opParseExpr",
    "memberof": "src/private/parse/parseExpr.js",
    "longname": "src/private/parse/parseExpr.js~opParseExpr",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseExpr.js",
    "importStyle": "{opParseExpr}",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 561,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseExprParts",
    "memberof": "src/private/parse/parseExpr.js",
    "longname": "src/private/parse/parseExpr.js~parseExprParts",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseExpr.js",
    "importStyle": "{parseExprParts}",
    "description": "Treating tokens separately, parse {@link Val}s.\nThis is called for e.g. the contents of an array (`[a b c]`).\nThis is different from {@link parseExpr} because `a b` will parse as 2 different things, not a call.\nHowever, `cond a b c` will still parse as a single expression.",
    "lineNumber": 61,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Val>"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 562,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "keywordExpr",
    "memberof": "src/private/parse/parseExpr.js",
    "longname": "src/private/parse/parseExpr.js~keywordExpr",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseExpr.js",
    "importStyle": null,
    "description": "The keyword `at` groups with everything after it.",
    "lineNumber": 68,
    "params": [
      {
        "name": "at",
        "types": [
          "*"
        ]
      },
      {
        "name": "after",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 563,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "exprSplitKeywords",
    "memberof": "src/private/parse/parseExpr.js",
    "longname": "src/private/parse/parseExpr.js~exprSplitKeywords",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseExpr.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "type": {
      "types": [
        "Set"
      ]
    }
  },
  {
    "__docId__": 564,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseExprPlain",
    "memberof": "src/private/parse/parseExpr.js",
    "longname": "src/private/parse/parseExpr.js~parseExprPlain",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseExpr.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 565,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseCond",
    "memberof": "src/private/parse/parseExpr.js",
    "longname": "src/private/parse/parseExpr.js~parseCond",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseExpr.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 566,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseConditional",
    "memberof": "src/private/parse/parseExpr.js",
    "longname": "src/private/parse/parseExpr.js~parseConditional",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseExpr.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "params": [
      {
        "name": "kind",
        "types": [
          "*"
        ]
      },
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 567,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parsePipe",
    "memberof": "src/private/parse/parseExpr.js",
    "longname": "src/private/parse/parseExpr.js~parsePipe",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseExpr.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 568,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseWith",
    "memberof": "src/private/parse/parseExpr.js",
    "longname": "src/private/parse/parseExpr.js~parseWith",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseExpr.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 569,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseFor.js",
    "memberof": null,
    "longname": "src/private/parse/parseFor.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {check} from '../context'\nimport {For, ForAsync, ForBag, Iteratee, LocalDeclare} from '../MsAst'\nimport {isKeyword, Keywords} from '../Token'\nimport {ifElse, opIf} from '../util'\nimport {parseExpr} from './parse*'\nimport parseBlock, {beforeAndBlock} from './parseBlock'\nimport {parseLocalDeclaresJustNames} from './parseLocalDeclares'\n\nexport default function parseFor(kind, tokens) {\n\tconst [before, block] = beforeAndBlock(tokens)\n\tconst ctr = kindToCtr.get(kind)\n\tconst opIter = ctr === ForAsync ?\n\t\tparseIteratee(before) :\n\t\topIf(!before.isEmpty(), () => parseIteratee(before))\n\treturn new ctr(tokens.loc, opIter, parseBlock(block))\n}\n\nconst kindToCtr = new Map(\n\t[[Keywords.For, For], [Keywords.ForAsync, ForAsync], [Keywords.ForBag, ForBag]])\n\nfunction parseIteratee(tokens) {\n\tconst [element, bag] =\n\t\tifElse(tokens.opSplitOnce(_ => isKeyword(Keywords.Of, _)),\n\t\t\t({before, after}) => {\n\t\t\t\tcheck(before.size() === 1, before.loc, 'TODO: pattern in for')\n\t\t\t\treturn [parseLocalDeclaresJustNames(before)[0], parseExpr(after)]\n\t\t\t},\n\t\t\t() => [LocalDeclare.focus(tokens.loc), parseExpr(tokens)])\n\treturn new Iteratee(tokens.loc, element, bag)\n}\n"
  },
  {
    "__docId__": 570,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseFor",
    "memberof": "src/private/parse/parseFor.js",
    "longname": "src/private/parse/parseFor.js~parseFor",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseFor.js",
    "importStyle": "parseFor",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "kind",
        "types": [
          "*"
        ]
      },
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 571,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "kindToCtr",
    "memberof": "src/private/parse/parseFor.js",
    "longname": "src/private/parse/parseFor.js~kindToCtr",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseFor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "Map"
      ]
    }
  },
  {
    "__docId__": 572,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseIteratee",
    "memberof": "src/private/parse/parseFor.js",
    "longname": "src/private/parse/parseFor.js~parseIteratee",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseFor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 573,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseFun.js",
    "memberof": null,
    "longname": "src/private/parse/parseFun.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Block, Fun, FunAbstract, Funs, LocalDeclare} from '../MsAst'\nimport {Groups, isAnyKeyword, isGroup, isKeyword, Keywords} from '../Token'\nimport {head} from '../util'\nimport {checkNonEmpty} from './checks'\nimport parseBlock, {beforeAndBlock} from './parseBlock'\nimport parseCase from './parseCase'\nimport parseLocalDeclares, {parseLocalDeclareFromSpaced, parseLocalDeclaresAndMemberArgs\n\t} from './parseLocalDeclares'\nimport parseSpaced from './parseSpaced'\nimport parseSwitch from './parseSwitch'\nimport Slice from './Slice'\nimport tryTakeComment from './tryTakeComment'\n\n/**\nParse a {@link Fun}.\n@param keywordKind {Keywords} A function keyword.\n@param {Slice} tokens Rest of the line after the function keyword.\n*/\nexport default function parseFun(keywordKind, tokens) {\n\tconst [isThisFun, isDo, kind] = funKind(keywordKind)\n\tconst {opReturnType, rest} = tryTakeReturnType(tokens)\n\tconst {args, opRestArg, block} = funArgsAndBlock(rest, !isDo)\n\treturn new Fun(tokens.loc, args, opRestArg, block, {kind, isThisFun, isDo, opReturnType})\n}\n\n/** Parse a {@link FunLike}. */\nexport function parseFunLike(keywordKind, tokens) {\n\tconst [isThisFun, isDo, kind] = funKind(keywordKind)\n\tconst {opReturnType, rest} = tryTakeReturnType(tokens)\n\tconst [before, blockLines] = beforeAndBlock(rest)\n\tconst [opComment, restLines] = tryTakeComment(blockLines)\n\n\tif (restLines.size() === 1) {\n\t\tconst h = restLines.headSlice()\n\t\tif (h.size() === 1 && isKeyword(Keywords.Abstract, h.head())) {\n\t\t\tconst {args, opRestArg} = parseFunLocals(before)\n\t\t\treturn new FunAbstract(tokens.loc, args, opRestArg, opReturnType, opComment)\n\t\t}\n\t}\n\n\tconst {args, opRestArg, block} = funArgsAndBlock(rest, !isDo)\n\treturn new Fun(tokens.loc, args, opRestArg, block, {kind, isThisFun, isDo, opReturnType})\n}\n\n/**\nParse function arguments and body.\nThis also handles the `|case` and `|switch` forms.\n@param {Slice} tokens\n@param {boolean} isVal Whether this is a `|` as opposed to a `!|`\n@param [includeMemberArgs]\n\tThis is for constructors.\n\tIf true, output will include `memberArgs`.\n\tThis is the subset of `args` whose names are prefixed with `.`.\n\te.g.: `construct! .x .y`\n@return {\n\targs: Array<LocalDeclare>,\n\topRestArg: ?LocalDeclare,\n\tmemberArgs:Array<LocalDeclare>,\n\tblock: Block\n}\n*/\nexport function funArgsAndBlock(tokens, isVal, includeMemberArgs=false) {\n\tcheckNonEmpty(tokens, 'Expected an indented block.')\n\tconst h = tokens.head()\n\n\t// Might be `|case` or `|switch`\n\tif (isAnyKeyword(funFocusKeywords, h)) {\n\t\tconst expr = (h.kind === Keywords.Case ? parseCase : parseSwitch)(true, tokens.tail())\n\t\tconst args = [LocalDeclare.focus(h.loc)]\n\t\treturn {args, opRestArg: null, memberArgs: [], block: new Block(tokens.loc, null, [expr])}\n\t} else {\n\t\tconst [before, blockLines] = beforeAndBlock(tokens)\n\t\tconst {args, opRestArg, memberArgs} = parseFunLocals(before, includeMemberArgs)\n\t\tconst block = parseBlock(blockLines)\n\t\treturn {args, opRestArg, memberArgs, block}\n\t}\n}\n\nconst funFocusKeywords = new Set([Keywords.Case, Keywords.Switch])\n\nfunction funKind(keywordKind) {\n\tswitch (keywordKind) {\n\t\tcase Keywords.Fun:\n\t\t\treturn [false, false, Funs.Plain]\n\t\tcase Keywords.FunDo:\n\t\t\treturn [false, true, Funs.Plain]\n\t\tcase Keywords.FunThis:\n\t\t\treturn [true, false, Funs.Plain]\n\t\tcase Keywords.FunThisDo:\n\t\t\treturn [true, true, Funs.Plain]\n\t\tcase Keywords.FunAsync:\n\t\t\treturn [false, false, Funs.Async]\n\t\tcase Keywords.FunAsyncDo:\n\t\t\treturn [false, true, Funs.Async]\n\t\tcase Keywords.FunThisAsync:\n\t\t\treturn [true, false, Funs.Async]\n\t\tcase Keywords.FunThisAsyncDo:\n\t\t\treturn [true, true, Funs.Async]\n\t\tcase Keywords.FunGen:\n\t\t\treturn [false, false, Funs.Generator]\n\t\tcase Keywords.FunGenDo:\n\t\t\treturn [false, true, Funs.Generator]\n\t\tcase Keywords.FunThisGen:\n\t\t\treturn [true, false, Funs.Generator]\n\t\tcase Keywords.FunThisGenDo:\n\t\t\treturn [true, true, Funs.Generator]\n\t\tdefault:\n\t\t\tthrow new Error(keywordKind)\n\t}\n}\n\nfunction tryTakeReturnType(tokens) {\n\tif (!tokens.isEmpty()) {\n\t\tconst h = tokens.head()\n\t\tif (isGroup(Groups.Space, h) && isKeyword(Keywords.Colon, head(h.subTokens)))\n\t\t\treturn {\n\t\t\t\topReturnType: parseSpaced(Slice.group(h).tail()),\n\t\t\t\trest: tokens.tail()\n\t\t\t}\n\t}\n\treturn {opReturnType: null, rest: tokens}\n}\n\nfunction parseFunLocals(tokens, includeMemberArgs) {\n\tif (tokens.isEmpty())\n\t\treturn {args: [], memberArgs: [], opRestArg: null}\n\telse {\n\t\tlet rest = tokens, opRestArg = null\n\t\tconst l = tokens.last()\n\t\tif (isGroup(Groups.Space, l)) {\n\t\t\tconst g = Slice.group(l)\n\t\t\tif (isKeyword(Keywords.Dot3, g.head())) {\n\t\t\t\trest = tokens.rtail()\n\t\t\t\topRestArg = parseLocalDeclareFromSpaced(g.tail())\n\t\t\t}\n\t\t}\n\t\tif (includeMemberArgs) {\n\t\t\tconst {declares: args, memberArgs} = parseLocalDeclaresAndMemberArgs(rest)\n\t\t\treturn {args, memberArgs, opRestArg}\n\t\t} else\n\t\t\treturn {args: parseLocalDeclares(rest), opRestArg}\n\t}\n}\n"
  },
  {
    "__docId__": 574,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseFun",
    "memberof": "src/private/parse/parseFun.js",
    "longname": "src/private/parse/parseFun.js~parseFun",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseFun.js",
    "importStyle": "parseFun",
    "description": "Parse a {@link Fun}.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "keywordKind",
        "description": "{Keywords} A function keyword."
      },
      {
        "nullable": null,
        "types": [
          "Slice"
        ],
        "spread": false,
        "optional": false,
        "name": "tokens",
        "description": "Rest of the line after the function keyword."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 575,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseFunLike",
    "memberof": "src/private/parse/parseFun.js",
    "longname": "src/private/parse/parseFun.js~parseFunLike",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseFun.js",
    "importStyle": "{parseFunLike}",
    "description": "Parse a {@link FunLike}.",
    "lineNumber": 27,
    "params": [
      {
        "name": "keywordKind",
        "types": [
          "*"
        ]
      },
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 576,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "funArgsAndBlock",
    "memberof": "src/private/parse/parseFun.js",
    "longname": "src/private/parse/parseFun.js~funArgsAndBlock",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseFun.js",
    "importStyle": "{funArgsAndBlock}",
    "description": "Parse function arguments and body.\nThis also handles the `|case` and `|switch` forms.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "Slice"
        ],
        "spread": false,
        "optional": false,
        "name": "tokens",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isVal",
        "description": "Whether this is a `|` as opposed to a `!|`"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "includeMemberArgs",
        "description": "This is for constructors.\nIf true, output will include `memberArgs`.\nThis is the subset of `args` whose names are prefixed with `.`.\ne.g.: `construct! .x .y`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "\nargs: Array<LocalDeclare>,\nopRestArg: ?LocalDeclare,\nmemberArgs:Array<LocalDeclare>,\nblock: Block\n"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 577,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "funFocusKeywords",
    "memberof": "src/private/parse/parseFun.js",
    "longname": "src/private/parse/parseFun.js~funFocusKeywords",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseFun.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "Set"
      ]
    }
  },
  {
    "__docId__": 578,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "funKind",
    "memberof": "src/private/parse/parseFun.js",
    "longname": "src/private/parse/parseFun.js~funKind",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseFun.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "keywordKind",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 579,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "tryTakeReturnType",
    "memberof": "src/private/parse/parseFun.js",
    "longname": "src/private/parse/parseFun.js~tryTakeReturnType",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseFun.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 580,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseFunLocals",
    "memberof": "src/private/parse/parseFun.js",
    "longname": "src/private/parse/parseFun.js~parseFunLocals",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseFun.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      },
      {
        "name": "includeMemberArgs",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 581,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseKind.js",
    "memberof": null,
    "longname": "src/private/parse/parseKind.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {ClassKindDo, Kind} from '../MsAst'\nimport {isKeyword, Keywords} from '../Token'\nimport {parseExprParts} from './parse*'\nimport {beforeAndOpBlock, parseJustBlock} from './parseBlock'\nimport parseMethodImpls, {parseStatics} from './parseMethodImpls'\nimport tryTakeComment from './tryTakeComment'\n\n/** Parse a {@link Kind}. */\nexport default function parseKind(tokens) {\n\tconst [before, opBlock] = beforeAndOpBlock(tokens)\n\tconst superKinds = parseExprParts(before)\n\n\tlet opComment = null, opDo = null, statics = [], methods = []\n\tconst finish = () => new Kind(tokens.loc,\n\t\tsuperKinds, opComment, opDo, statics, methods)\n\n\tif (opBlock === null)\n\t\treturn finish()\n\n\tlet [opCom, rest] = tryTakeComment(opBlock)\n\topComment = opCom\n\n\tif (rest.isEmpty())\n\t\treturn finish()\n\n\tconst line1 = rest.headSlice()\n\tif (isKeyword(Keywords.Do, line1.head())) {\n\t\tconst done = parseJustBlock(Keywords.Do, line1.tail())\n\t\topDo = new ClassKindDo(line1.loc, done)\n\t\trest = rest.tail()\n\t}\n\n\tif (rest.isEmpty())\n\t\treturn finish()\n\n\tconst line2 = rest.headSlice()\n\tif (isKeyword(Keywords.Static, line2.head())) {\n\t\tstatics = parseStatics(line2.tail())\n\t\trest = rest.tail()\n\t}\n\n\tif (rest.isEmpty())\n\t\treturn finish()\n\n\tmethods = parseMethodImpls(rest)\n\n\treturn finish()\n}\n"
  },
  {
    "__docId__": 582,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseKind",
    "memberof": "src/private/parse/parseKind.js",
    "longname": "src/private/parse/parseKind.js~parseKind",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseKind.js",
    "importStyle": "parseKind",
    "description": "Parse a {@link Kind}.",
    "lineNumber": 9,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 583,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseLine.js",
    "memberof": null,
    "longname": "src/private/parse/parseLine.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {check} from '../context'\nimport {Assert, AssignSingle, AssignDestructure, BagEntry, Break, Call, Ignore, LocalAccess,\n\tLocalMutate, MapEntry, MemberSet, ObjEntryAssign, ObjEntryPlain, QuoteSimple, SetSub, Setters,\n\tSpecialDo, SpecialDos, SpecialVal, SpecialVals, Throw} from '../MsAst'\nimport {Groups, isGroup, isAnyKeyword, isKeyword, Keyword, keywordName, Keywords, showKeyword\n\t} from '../Token'\nimport {ifElse, tail} from '../util'\nimport {checkEmpty, checkNonEmpty, unexpected} from './checks'\nimport {justBlock} from './parseBlock'\nimport parseLocalDeclares, {parseLocalDeclaresJustNames, parseLocalName} from './parseLocalDeclares'\nimport parseMemberName from './parseMemberName'\nimport parseName from './parseName'\nimport parseQuote from './parseQuote'\nimport {opParseExpr, parseExpr, parseExprParts, parseSpaced} from './parse*'\nimport Slice from './Slice'\n\n/** Parse the content of a line. */\nexport default function parseLine(tokens) {\n\tconst loc = tokens.loc\n\tconst head = tokens.head()\n\tconst rest = () => tokens.tail()\n\n\tconst noRest = () => {\n\t\tcheckEmpty(rest(), () => `Did not expect anything after ${head}.`)\n\t}\n\n\t// We only deal with mutable expressions here, otherwise we fall back to parseExpr.\n\tif (head instanceof Keyword)\n\t\tswitch (head.kind) {\n\t\t\tcase Keywords.Assert: case Keywords.Forbid:\n\t\t\t\treturn parseAssert(head.kind === Keywords.Forbid, rest())\n\t\t\tcase Keywords.Break:\n\t\t\t\treturn new Break(loc, opParseExpr(rest()))\n\t\t\tcase Keywords.Debugger:\n\t\t\t\tnoRest()\n\t\t\t\treturn new SpecialDo(loc, SpecialDos.Debugger)\n\t\t\tcase Keywords.Dot3:\n\t\t\t\treturn new BagEntry(loc, parseExpr(rest()), true)\n\t\t\tcase Keywords.Ignore:\n\t\t\t\treturn new Ignore(loc, rest().map(parseLocalName))\n\t\t\tcase Keywords.ObjAssign:\n\t\t\t\treturn new BagEntry(loc, parseExpr(rest()))\n\t\t\tcase Keywords.Pass:\n\t\t\t\tnoRest()\n\t\t\t\treturn []\n\t\t\tcase Keywords.Region:\n\t\t\t\treturn parseLines(justBlock(Keywords.Region, rest()))\n\t\t\tcase Keywords.Throw:\n\t\t\t\treturn new Throw(loc, opParseExpr(rest()))\n\t\t\tdefault:\n\t\t\t\t// fall through\n\t\t}\n\n\treturn ifElse(tokens.opSplitOnce(_ => isAnyKeyword(lineSplitKeywords, _)),\n\t\t({before, at, after}) => {\n\t\t\tswitch (at.kind) {\n\t\t\t\tcase Keywords.MapEntry:\n\t\t\t\t\treturn new MapEntry(loc, parseExpr(before), parseExpr(after))\n\t\t\t\tcase Keywords.ObjAssign:\n\t\t\t\t\treturn parseObjEntry(before, after, loc)\n\t\t\t\tdefault:\n\t\t\t\t\treturn parseAssignLike(before, at, parseExpr(after), loc)\n\t\t\t}\n\t\t},\n\t\t() => parseExpr(tokens))\n}\nconst lineSplitKeywords = new Set(\n\t[Keywords.Assign, Keywords.LocalMutate, Keywords.MapEntry, Keywords.ObjAssign])\n\nexport function parseLines(lineTokens) {\n\tconst lines = []\n\tfor (const line of lineTokens.slices()) {\n\t\tconst _ = parseLine(line)\n\t\tif (_ instanceof Array)\n\t\t\tlines.push(..._)\n\t\telse\n\t\t\tlines.push(_)\n\t}\n\treturn lines\n}\n\nfunction parseAssignLike(before, at, value, loc) {\n\tconst kind = at.kind\n\n\tif (before.size() === 1) {\n\t\tconst token = before.head()\n\t\t// `a.b = c`, `.b = c`, `a.\"b\" = c`, `.\"b\" = c`, `a[b] = c`; and their `:=` variants.\n\t\tif (isGroup(Groups.Space, token)) {\n\t\t\tconst spaced = Slice.group(token)\n\t\t\tconst [assignee, opType] = ifElse(spaced.opSplitOnce(_ => isKeyword(Keywords.Colon, _)),\n\t\t\t\t({before, after}) => [before, parseExpr(after)],\n\t\t\t\t() => [spaced, null])\n\n\t\t\tconst last = assignee.last()\n\t\t\tconst object = obj =>\n\t\t\t\tobj.isEmpty() ? LocalAccess.this(obj.loc) : parseSpaced(obj)\n\n\t\t\tif (isKeyword(Keywords.Dot, assignee.nextToLast())) {\n\t\t\t\tconst name = parseMemberName(last)\n\t\t\t\tconst set = object(assignee.rtail().rtail())\n\t\t\t\treturn new MemberSet(loc, set, name, opType, setKind(at), value)\n\t\t\t} else if (isGroup(Groups.Bracket, last)) {\n\t\t\t\tconst set = object(assignee.rtail())\n\t\t\t\tconst subbeds = parseExprParts(Slice.group(last))\n\t\t\t\treturn new SetSub(loc, set, subbeds, opType, setKind(at), value, loc)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn kind === Keywords.LocalMutate ?\n\t\tparseLocalMutate(before, value, loc) :\n\t\tparseAssign(before, kind, value, loc)\n}\n\nfunction parseObjEntry(before, after, loc) {\n\tif (before.size() === 1) {\n\t\tconst token = before.head()\n\t\tconst isName = isKeyword(Keywords.Name, token)\n\t\tconst value = () => parseExpr(after)\n\n\t\t// Handle `a.` which moves an outer local into an ObjEntry.\n\t\tif (after.isEmpty())\n\t\t\treturn isName ?\n\t\t\t\tObjEntryPlain.name(loc, new SpecialVal(loc, SpecialVals.Name)) :\n\t\t\t\tObjEntryPlain.access(loc, parseLocalName(token))\n\t\telse if (token instanceof Keyword)\n\t\t\treturn new ObjEntryPlain(loc, keywordName(token.kind), value())\n\t\t// `\"1\". 1`\n\t\telse if (isGroup(Groups.Quote, token))\n\t\t\treturn new ObjEntryPlain(loc, parseQuote(Slice.group(token)), value())\n\t\t// 'foo. 1\n\t\telse if (isGroup(Groups.Space, token)) {\n\t\t\tconst slice = Slice.group(token)\n\t\t\tif (slice.size() === 2 && isKeyword(Keywords.Tick, slice.head())) {\n\t\t\t\tconst name = new QuoteSimple(loc, parseName(slice.second()))\n\t\t\t\treturn new ObjEntryPlain(loc, name, value())\n\t\t\t}\n\t\t}\n\t}\n\n\tconst assign = parseAssign(before, Keywords.ObjAssign, parseExpr(after), loc)\n\treturn new ObjEntryAssign(loc, assign)\n}\n\nfunction setKind(keyword) {\n\tswitch (keyword.kind) {\n\t\tcase Keywords.Assign:\n\t\t\treturn Setters.Init\n\t\tcase Keywords.LocalMutate:\n\t\t\treturn Setters.Mutate\n\t\tdefault:\n\t\t\tunexpected(keyword)\n\t}\n}\n\nfunction parseLocalMutate(localsTokens, value, loc) {\n\tconst locals = parseLocalDeclaresJustNames(localsTokens)\n\tcheck(locals.length === 1, loc, 'TODO: LocalDestructureMutate')\n\treturn new LocalMutate(loc, locals[0].name, value)\n}\n\nfunction parseAssign(localsTokens, kind, value, loc) {\n\tconst locals = parseLocalDeclares(localsTokens)\n\tif (locals.length === 1)\n\t\treturn new AssignSingle(loc, locals[0], value)\n\telse {\n\t\tcheck(locals.length > 1, localsTokens.loc, 'Assignment to nothing.')\n\t\tconst kind = locals[0].kind\n\t\tfor (const _ of locals)\n\t\t\tcheck(_.kind === kind, _.loc,\n\t\t\t\t'All locals of destructuring assignment must be of the same kind.')\n\t\treturn new AssignDestructure(loc, locals, value, kind)\n\t}\n}\n\nfunction parseAssert(negate, tokens) {\n\tcheckNonEmpty(tokens, () => `Expected something after ${showKeyword(Keywords.Assert)}.`)\n\n\tconst [condTokens, opThrown] =\n\t\tifElse(tokens.opSplitOnce(_ => isKeyword(Keywords.Throw, _)),\n\t\t\t({before, after}) => [before, parseExpr(after)],\n\t\t\t() => [tokens, null])\n\n\tconst parts = parseExprParts(condTokens)\n\tconst cond = parts.length === 1 ? parts[0] : new Call(condTokens.loc, parts[0], tail(parts))\n\treturn new Assert(tokens.loc, negate, cond, opThrown)\n}\n"
  },
  {
    "__docId__": 584,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseLine",
    "memberof": "src/private/parse/parseLine.js",
    "longname": "src/private/parse/parseLine.js~parseLine",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseLine.js",
    "importStyle": "parseLine",
    "description": "Parse the content of a line.",
    "lineNumber": 18,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 585,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "lineSplitKeywords",
    "memberof": "src/private/parse/parseLine.js",
    "longname": "src/private/parse/parseLine.js~lineSplitKeywords",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseLine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "Set"
      ]
    }
  },
  {
    "__docId__": 586,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseLines",
    "memberof": "src/private/parse/parseLine.js",
    "longname": "src/private/parse/parseLine.js~parseLines",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseLine.js",
    "importStyle": "{parseLines}",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "lineTokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 587,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseAssignLike",
    "memberof": "src/private/parse/parseLine.js",
    "longname": "src/private/parse/parseLine.js~parseAssignLike",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseLine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "before",
        "types": [
          "*"
        ]
      },
      {
        "name": "at",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 588,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseObjEntry",
    "memberof": "src/private/parse/parseLine.js",
    "longname": "src/private/parse/parseLine.js~parseObjEntry",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseLine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [
      {
        "name": "before",
        "types": [
          "*"
        ]
      },
      {
        "name": "after",
        "types": [
          "*"
        ]
      },
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 589,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "setKind",
    "memberof": "src/private/parse/parseLine.js",
    "longname": "src/private/parse/parseLine.js~setKind",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseLine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [
      {
        "name": "keyword",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 590,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseLocalMutate",
    "memberof": "src/private/parse/parseLine.js",
    "longname": "src/private/parse/parseLine.js~parseLocalMutate",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseLine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [
      {
        "name": "localsTokens",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 591,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseAssign",
    "memberof": "src/private/parse/parseLine.js",
    "longname": "src/private/parse/parseLine.js~parseAssign",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseLine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "params": [
      {
        "name": "localsTokens",
        "types": [
          "*"
        ]
      },
      {
        "name": "kind",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 592,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseAssert",
    "memberof": "src/private/parse/parseLine.js",
    "longname": "src/private/parse/parseLine.js~parseAssert",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseLine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "params": [
      {
        "name": "negate",
        "types": [
          "*"
        ]
      },
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 593,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseLocalDeclares.js",
    "memberof": null,
    "longname": "src/private/parse/parseLocalDeclares.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {check} from '../context'\nimport {LocalDeclare, LocalDeclares} from '../MsAst'\nimport {Groups, isGroup, isKeyword, Keywords, Name} from '../Token'\nimport {opIf} from '../util'\nimport {checkNonEmpty, checkKeyword} from './checks'\nimport {parseSpaced} from './parse*'\nimport Slice from './Slice'\n\n/**\nParse locals (`a` or `a:b`).\n@return {Array<LocalDeclare>}\n*/\nexport default function parseLocalDeclares(tokens) {\n\treturn tokens.map(parseLocalDeclare)\n}\n\n/**\nParse locals with no types allowed.\n@return {Array<LocalDeclare>}\n*/\nexport function parseLocalDeclaresJustNames(tokens) {\n\treturn tokens.map(_ => LocalDeclare.plain(_.loc, parseLocalName(_)))\n}\n\n/** Parse a single local declare. */\nexport function parseLocalDeclare(token) {\n\treturn _parseLocalDeclare(token)\n}\n\n/** Parse a single local declare from the tokens in a {@link Groups.Space}. */\nexport function parseLocalDeclareFromSpaced(tokens) {\n\treturn _parseLocalDeclareFromSpaced(tokens)\n}\n\n/**\nFor constructor. Parse local declares while allowing `.x`-style arguments.\n@return {{declares: Array<LocalDeclare>, memberArgs: Array<LocalDeclare>}}\n\t`memberArgs` is  a subset of `declares`.\n*/\nexport function parseLocalDeclaresAndMemberArgs(tokens) {\n\tconst declares = [], memberArgs = []\n\tfor (const token of tokens) {\n\t\tconst {declare, isMember} = _parseLocalDeclare(token, true)\n\t\tdeclares.push(declare)\n\t\tif (isMember)\n\t\t\tmemberArgs.push(declare)\n\t}\n\treturn {declares, memberArgs}\n}\n\n/**\nParse a name for a local variable.\nUnlike {@link parseName}, `_` is the only allowed Keyword.\n@return {string}\n*/\nexport function parseLocalName(token) {\n\tif (isKeyword(Keywords.Focus, token))\n\t\treturn '_'\n\telse {\n\t\tcheck(token instanceof Name, token.loc, () => `Expected a local name, not ${token}.`)\n\t\treturn token.name\n\t}\n}\n\n/**\nIf `tokens` is:\n\tempty: untyped focus\n\t`:Type`: typed focus\n\t`foo` or `foo:Type`: A normal LocalDeclare.\n*/\nexport function parseLocalDeclareOrFocus(tokens) {\n\tif (tokens.isEmpty())\n\t\treturn LocalDeclare.focus(tokens.loc)\n\telse {\n\t\tcheck(tokens.size() === 1, tokens.loc, 'Expected only one local declare.')\n\t\tconst token = tokens.head()\n\t\tif (isGroup(Groups.Space, token)) {\n\t\t\tconst slice = Slice.group(token)\n\t\t\tif (isKeyword(Keywords.Colon, slice.head()))\n\t\t\t\treturn LocalDeclare.typedFocus(tokens.loc, parseSpaced(slice.tail()))\n\t\t}\n\t\treturn parseLocalDeclare(token)\n\t}\n}\n\nfunction _parseLocalDeclare(token, orMember=false) {\n\tif (isGroup(Groups.Space, token))\n\t\treturn _parseLocalDeclareFromSpaced(Slice.group(token), orMember)\n\telse {\n\t\tconst declare = LocalDeclare.plain(token.loc, parseLocalName(token))\n\t\treturn orMember ? {declare, isMember: false} : declare\n\t}\n}\n\nfunction _parseLocalDeclareFromSpaced(tokens, orMember=false) {\n\tconst [rest, kind, isMember] =\n\t\tisKeyword(Keywords.Lazy, tokens.head()) ?\n\t\t\t[tokens.tail(), LocalDeclares.Lazy, false] :\n\t\t\torMember && isKeyword(Keywords.Dot, tokens.head()) ?\n\t\t\t[tokens.tail(), LocalDeclares.Eager, true] :\n\t\t\t[tokens, LocalDeclares.Eager, false]\n\tconst name = parseLocalName(rest.head())\n\tconst rest2 = rest.tail()\n\tconst opType = opIf(!rest2.isEmpty(), () => {\n\t\tconst colon = rest2.head()\n\t\tcheckKeyword(Keywords.Colon, colon)\n\t\tconst tokensType = rest2.tail()\n\t\tcheckNonEmpty(tokensType, () => `Expected something after ${colon}`)\n\t\treturn parseSpaced(tokensType)\n\t})\n\tconst declare = new LocalDeclare(tokens.loc, name, opType, kind)\n\treturn orMember ? {declare, isMember} : declare\n}\n"
  },
  {
    "__docId__": 594,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseLocalDeclares",
    "memberof": "src/private/parse/parseLocalDeclares.js",
    "longname": "src/private/parse/parseLocalDeclares.js~parseLocalDeclares",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseLocalDeclares.js",
    "importStyle": "parseLocalDeclares",
    "description": "Parse locals (`a` or `a:b`).",
    "lineNumber": 13,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<LocalDeclare>"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 595,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseLocalDeclaresJustNames",
    "memberof": "src/private/parse/parseLocalDeclares.js",
    "longname": "src/private/parse/parseLocalDeclares.js~parseLocalDeclaresJustNames",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseLocalDeclares.js",
    "importStyle": "{parseLocalDeclaresJustNames}",
    "description": "Parse locals with no types allowed.",
    "lineNumber": 21,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<LocalDeclare>"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 596,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseLocalDeclare",
    "memberof": "src/private/parse/parseLocalDeclares.js",
    "longname": "src/private/parse/parseLocalDeclares.js~parseLocalDeclare",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseLocalDeclares.js",
    "importStyle": "{parseLocalDeclare}",
    "description": "Parse a single local declare.",
    "lineNumber": 26,
    "params": [
      {
        "name": "token",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 597,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseLocalDeclareFromSpaced",
    "memberof": "src/private/parse/parseLocalDeclares.js",
    "longname": "src/private/parse/parseLocalDeclares.js~parseLocalDeclareFromSpaced",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseLocalDeclares.js",
    "importStyle": "{parseLocalDeclareFromSpaced}",
    "description": "Parse a single local declare from the tokens in a {@link Groups.Space}.",
    "lineNumber": 31,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 598,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseLocalDeclaresAndMemberArgs",
    "memberof": "src/private/parse/parseLocalDeclares.js",
    "longname": "src/private/parse/parseLocalDeclares.js~parseLocalDeclaresAndMemberArgs",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseLocalDeclares.js",
    "importStyle": "{parseLocalDeclaresAndMemberArgs}",
    "description": "For constructor. Parse local declares while allowing `.x`-style arguments.",
    "lineNumber": 40,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{declares: Array<LocalDeclare>, memberArgs: Array<LocalDeclare>}"
      ],
      "spread": false,
      "description": "`memberArgs` is  a subset of `declares`."
    },
    "generator": false
  },
  {
    "__docId__": 599,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseLocalName",
    "memberof": "src/private/parse/parseLocalDeclares.js",
    "longname": "src/private/parse/parseLocalDeclares.js~parseLocalName",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseLocalDeclares.js",
    "importStyle": "{parseLocalName}",
    "description": "Parse a name for a local variable.\nUnlike {@link parseName}, `_` is the only allowed Keyword.",
    "lineNumber": 56,
    "params": [
      {
        "name": "token",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 600,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseLocalDeclareOrFocus",
    "memberof": "src/private/parse/parseLocalDeclares.js",
    "longname": "src/private/parse/parseLocalDeclares.js~parseLocalDeclareOrFocus",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseLocalDeclares.js",
    "importStyle": "{parseLocalDeclareOrFocus}",
    "description": "If `tokens` is:\nempty: untyped focus\n`:Type`: typed focus\n`foo` or `foo:Type`: A normal LocalDeclare.",
    "lineNumber": 71,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 601,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "_parseLocalDeclare",
    "memberof": "src/private/parse/parseLocalDeclares.js",
    "longname": "src/private/parse/parseLocalDeclares.js~_parseLocalDeclare",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseLocalDeclares.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "token",
        "types": [
          "*"
        ]
      },
      {
        "name": "orMember",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 602,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "_parseLocalDeclareFromSpaced",
    "memberof": "src/private/parse/parseLocalDeclares.js",
    "longname": "src/private/parse/parseLocalDeclares.js~_parseLocalDeclareFromSpaced",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseLocalDeclares.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      },
      {
        "name": "orMember",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 603,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseMemberName.js",
    "memberof": null,
    "longname": "src/private/parse/parseMemberName.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Groups, isGroup} from '../Token'\nimport {unexpected} from './checks'\nimport {tryParseName} from './parseName'\nimport parseQuote from './parseQuote'\nimport Slice from './Slice'\n\n/**\nParse a plain member (`a.b`) or computed member (`a.\"b\"`).\n@param {Token} token\n@return {string|Quote}\n*/\nexport default function parseMemberName(token) {\n\tconst name = tryParseName(token)\n\tif (name !== null)\n\t\treturn name\n\telse if (isGroup(Groups.Quote, token))\n\t\treturn parseQuote(Slice.group(token))\n\telse\n\t\tunexpected(token)\n}\n"
  },
  {
    "__docId__": 604,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseMemberName",
    "memberof": "src/private/parse/parseMemberName.js",
    "longname": "src/private/parse/parseMemberName.js~parseMemberName",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseMemberName.js",
    "importStyle": "parseMemberName",
    "description": "Parse a plain member (`a.b`) or computed member (`a.\"b\"`).",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Token"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "Quote"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 605,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseMethod.js",
    "memberof": null,
    "longname": "src/private/parse/parseMethod.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Method} from '../MsAst'\nimport {Keywords, showKeyword} from '../Token'\nimport {checkEmpty} from './checks'\nimport {parseFunLike} from './parseFun'\nimport parseMethodSplit from './parseMethodSplit'\n\nexport default function parseMethod(tokens) {\n\tconst {before, kind, after} = parseMethodSplit(tokens)\n\tcheckEmpty(before, () =>\n\t\t`Did not expect anything between ${showKeyword(Keywords.Method)} and function.`)\n\treturn new Method(tokens.loc, parseFunLike(kind, after))\n}\n"
  },
  {
    "__docId__": 606,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseMethod",
    "memberof": "src/private/parse/parseMethod.js",
    "longname": "src/private/parse/parseMethod.js~parseMethod",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseMethod.js",
    "importStyle": "parseMethod",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 607,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseMethodImpls.js",
    "memberof": null,
    "longname": "src/private/parse/parseMethodImpls.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {MethodImpl, MethodGetter, MethodSetter, QuoteSimple} from '../MsAst'\nimport {isKeyword, Keywords} from '../Token'\nimport {parseExpr} from './parse*'\nimport parseBlock, {beforeAndBlock, justBlock} from './parseBlock'\nimport parseFun from './parseFun'\nimport parseMethodSplit from './parseMethodSplit'\n\nexport default function parseMethodImpls(tokens) {\n\treturn tokens.mapSlices(parseMethodImpl)\n}\n\nexport function parseStatics(tokens) {\n\treturn parseMethodImpls(justBlock(Keywords.Static, tokens))\n}\n\nfunction parseMethodImpl(tokens) {\n\tlet head = tokens.head()\n\n\tconst isMy = isKeyword(Keywords.My, head)\n\tif (isMy) {\n\t\ttokens = tokens.tail()\n\t\thead = tokens.head()\n\t}\n\n\tif (isKeyword(Keywords.Get, head)) {\n\t\tconst [before, block] = beforeAndBlock(tokens.tail())\n\t\treturn new MethodGetter(tokens.loc, isMy, parseExprOrQuoteSimple(before), parseBlock(block))\n\t} else if (isKeyword(Keywords.Set, head)) {\n\t\tconst [before, block] = beforeAndBlock(tokens.tail())\n\t\treturn new MethodSetter(tokens.loc, isMy, parseExprOrQuoteSimple(before), parseBlock(block))\n\t} else {\n\t\tconst {before, kind, after} = parseMethodSplit(tokens)\n\t\tconst fun = parseFun(kind, after)\n\t\treturn new MethodImpl(tokens.loc, isMy, parseExprOrQuoteSimple(before), fun)\n\t}\n}\n\n// If symbol is just a quoted name, store it as a string, which is handled specially.\nfunction parseExprOrQuoteSimple(tokens) {\n\tconst expr = parseExpr(tokens)\n\treturn expr instanceof QuoteSimple ? expr.name : expr\n}\n"
  },
  {
    "__docId__": 608,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseMethodImpls",
    "memberof": "src/private/parse/parseMethodImpls.js",
    "longname": "src/private/parse/parseMethodImpls.js~parseMethodImpls",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseMethodImpls.js",
    "importStyle": "parseMethodImpls",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 609,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseStatics",
    "memberof": "src/private/parse/parseMethodImpls.js",
    "longname": "src/private/parse/parseMethodImpls.js~parseStatics",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseMethodImpls.js",
    "importStyle": "{parseStatics}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 610,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseMethodImpl",
    "memberof": "src/private/parse/parseMethodImpls.js",
    "longname": "src/private/parse/parseMethodImpls.js~parseMethodImpl",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseMethodImpls.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 611,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseExprOrQuoteSimple",
    "memberof": "src/private/parse/parseMethodImpls.js",
    "longname": "src/private/parse/parseMethodImpls.js~parseExprOrQuoteSimple",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseMethodImpls.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 612,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseMethodSplit.js",
    "memberof": null,
    "longname": "src/private/parse/parseMethodSplit.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {check, fail} from '../context'\nimport {isAnyKeyword, Keywords} from '../Token'\n\n/** Split on a function keyword. */\nexport default function parseMethodSplit(tokens) {\n\tconst baa = tokens.opSplitOnce(_ => isAnyKeyword(funKeywords, _))\n\tcheck(baa !== null, tokens.loc, 'Expected a function keyword somewhere.')\n\tconst {before, at, after} = baa\n\tconst kind = methodFunKind(at)\n\treturn {before, kind, after}\n}\n\nfunction methodFunKind(funKindToken) {\n\tswitch (funKindToken.kind) {\n\t\tcase Keywords.Fun:\n\t\t\treturn Keywords.FunThis\n\t\tcase Keywords.FunDo:\n\t\t\treturn Keywords.FunThisDo\n\t\tcase Keywords.FunAsync:\n\t\t\treturn Keywords.FunThisAsync\n\t\tcase Keywords.FunAsyncDo:\n\t\t\treturn Keywords.FunThisAsyncDo\n\t\tcase Keywords.FunGen:\n\t\t\treturn Keywords.FunThisGen\n\t\tcase Keywords.FunGenDo:\n\t\t\treturn Keywords.FunThisGenDo\n\t\tcase Keywords.FunThis: case Keywords.FunThisDo:\n\t\tcase Keywords.FunThisAsync: case Keywords.FunThisAsyncDo:\n\t\tcase Keywords.FunThisGen: case Keywords.FunThisGenDo:\n\t\t\tfail(funKindToken.loc, 'Function `.` is implicit for methods.')\n\t\tdefault:\n\t\t\tfail(funKindToken.loc, `Expected function kind, got ${funKindToken}.`)\n\t}\n}\n\nconst funKeywords = new Set([\n\tKeywords.Fun, Keywords.FunDo, Keywords.FunThis, Keywords.FunThisDo,\n\tKeywords.FunAsync, Keywords.FunAsyncDo, Keywords.FunThisAsync, Keywords.FunThisAsyncDo,\n\tKeywords.FunGen, Keywords.FunGenDo, Keywords.FunThisGen, Keywords.FunThisGenDo\n])\n"
  },
  {
    "__docId__": 613,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseMethodSplit",
    "memberof": "src/private/parse/parseMethodSplit.js",
    "longname": "src/private/parse/parseMethodSplit.js~parseMethodSplit",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseMethodSplit.js",
    "importStyle": "parseMethodSplit",
    "description": "Split on a function keyword.",
    "lineNumber": 5,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 614,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "methodFunKind",
    "memberof": "src/private/parse/parseMethodSplit.js",
    "longname": "src/private/parse/parseMethodSplit.js~methodFunKind",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseMethodSplit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "funKindToken",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 615,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "funKeywords",
    "memberof": "src/private/parse/parseMethodSplit.js",
    "longname": "src/private/parse/parseMethodSplit.js~funKeywords",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseMethodSplit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "Set"
      ]
    }
  },
  {
    "__docId__": 616,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseModule.js",
    "memberof": null,
    "longname": "src/private/parse/parseModule.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {check, options} from '../context'\nimport {ImportDo, Import, LocalDeclare, LocalDeclares, Module} from '../MsAst'\nimport {Groups, isGroup, isKeyword, Keyword, Keywords, showKeyword} from '../Token'\nimport {checkEmpty, checkNonEmpty, checkKeyword} from './checks'\nimport {justBlock} from './parseBlock'\nimport {parseLines} from './parseLine'\nimport {parseLocalDeclaresJustNames} from './parseLocalDeclares'\nimport parseName, {tryParseName} from './parseName'\nimport Slice from './Slice'\nimport tryTakeComment from './tryTakeComment'\n\n/**\nParse the whole Token tree.\n@param {Slice} tokens\n@return {Module}\n*/\nexport default function parseModule(tokens) {\n\t// Module doc comment must come first.\n\tconst [opComment, rest0] = tryTakeComment(tokens)\n\t// Import statements must appear in order.\n\tconst [doImports, rest1] = takeImports(Keywords.ImportDo, rest0)\n\tconst [plainImports, rest2] = takeImports(Keywords.Import, rest1)\n\tconst [lazyImports, rest3] = takeImports(Keywords.ImportLazy, rest2)\n\tconst lines = parseLines(rest3)\n\tconst imports = plainImports.concat(lazyImports)\n\treturn new Module(tokens.loc, options.moduleName(), opComment, doImports, imports, lines)\n}\n\nfunction takeImports(importKeywordKind, lines) {\n\tif (!lines.isEmpty()) {\n\t\tconst line = lines.headSlice()\n\t\tif (isKeyword(importKeywordKind, line.head()))\n\t\t\treturn [parseImports(importKeywordKind, line.tail()), lines.tail()]\n\t}\n\treturn [[], lines]\n}\n\nfunction parseImports(importKeywordKind, tokens) {\n\tconst lines = justBlock(importKeywordKind, tokens)\n\treturn lines.mapSlices(line => {\n\t\tconst {path, name} = parseRequire(line.head())\n\t\tconst rest = line.tail()\n\t\tif (importKeywordKind === Keywords.ImportDo) {\n\t\t\tcheckEmpty(rest, () =>\n\t\t\t\t`This is an ${showKeyword(Keywords.ImportDo)}, so you can't import any values.`)\n\t\t\treturn new ImportDo(line.loc, path)\n\t\t} else {\n\t\t\tconst {imported, opImportDefault} =\n\t\t\t\tparseThingsImported(name, importKeywordKind === Keywords.ImportLazy, rest)\n\t\t\treturn new Import(line.loc, path, imported, opImportDefault)\n\t\t}\n\t})\n}\n\nfunction parseThingsImported(name, isLazy, tokens) {\n\tconst importDefault = () =>\n\t\tLocalDeclare.untyped(\n\t\t\ttokens.loc,\n\t\t\tname,\n\t\t\tisLazy ? LocalDeclares.Lazy : LocalDeclares.Eager)\n\n\tif (tokens.isEmpty())\n\t\treturn {imported: [], opImportDefault: importDefault()}\n\telse {\n\t\tconst [opImportDefault, rest] = isKeyword(Keywords.Focus, tokens.head()) ?\n\t\t\t[importDefault(), tokens.tail()] :\n\t\t\t[null, tokens]\n\t\tconst imported = parseLocalDeclaresJustNames(rest).map(l => {\n\t\t\tcheck(l.name !== '_', l.pos, () =>\n\t\t\t\t`${showKeyword(Keywords.Focus)} not allowed as import name.`)\n\t\t\tif (isLazy)\n\t\t\t\tl.kind = LocalDeclares.Lazy\n\t\t\treturn l\n\t\t})\n\t\treturn {imported, opImportDefault}\n\t}\n}\n\nfunction parseRequire(token) {\n\tconst name = tryParseName(token)\n\tif (name !== null)\n\t\treturn {path: name, name}\n\telse {\n\t\tcheck(isGroup(Groups.Space, token), token.loc, 'Not a valid module name.')\n\t\tconst tokens = Slice.group(token)\n\n\t\t// Take leading dots.\n\t\tlet rest = tokens\n\t\tconst parts = []\n\t\tconst head = rest.head()\n\t\tconst n = tryTakeNDots(head)\n\t\tif (n !== null) {\n\t\t\tparts.push('.')\n\t\t\tfor (let i = 1; i < n; i = i + 1)\n\t\t\t\tparts.push('..')\n\t\t\trest = rest.tail()\n\t\t\twhile (!rest.isEmpty()) {\n\t\t\t\tconst n = tryTakeNDots(rest.head())\n\t\t\t\tif (n === null)\n\t\t\t\t\tbreak\n\t\t\t\tfor (let i = 0; i < n; i = i + 1)\n\t\t\t\t\tparts.push('..')\n\t\t\t\trest = rest.tail()\n\t\t\t}\n\t\t}\n\n\t\t// Take name, then any number of dot-then-name (`.x`)\n\t\tfor (;;) {\n\t\t\tcheckNonEmpty(rest)\n\t\t\tparts.push(parseName(rest.head()))\n\t\t\trest = rest.tail()\n\n\t\t\tif (rest.isEmpty())\n\t\t\t\tbreak\n\n\t\t\t// If there's something left, it should be a dot, followed by a name.\n\t\t\tcheckKeyword(Keywords.Dot, rest.head())\n\t\t\trest = rest.tail()\n\t\t}\n\n\t\treturn {path: parts.join('/'), name: parts[parts.length - 1]}\n\t}\n}\n\nfunction tryTakeNDots(token) {\n\tif (!(token instanceof Keyword))\n\t\treturn null\n\tswitch (token.kind) {\n\t\tcase Keywords.Dot:\n\t\t\treturn 1\n\t\tcase Keywords.Dot2:\n\t\t\treturn 2\n\t\tcase Keywords.Dot3:\n\t\t\treturn 3\n\t\tdefault:\n\t\t\treturn null\n\t}\n}\n"
  },
  {
    "__docId__": 617,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseModule",
    "memberof": "src/private/parse/parseModule.js",
    "longname": "src/private/parse/parseModule.js~parseModule",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseModule.js",
    "importStyle": "parseModule",
    "description": "Parse the whole Token tree.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Slice"
        ],
        "spread": false,
        "optional": false,
        "name": "tokens",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Module"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 618,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "takeImports",
    "memberof": "src/private/parse/parseModule.js",
    "longname": "src/private/parse/parseModule.js~takeImports",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "importKeywordKind",
        "types": [
          "*"
        ]
      },
      {
        "name": "lines",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 619,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseImports",
    "memberof": "src/private/parse/parseModule.js",
    "longname": "src/private/parse/parseModule.js~parseImports",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "importKeywordKind",
        "types": [
          "*"
        ]
      },
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 620,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseThingsImported",
    "memberof": "src/private/parse/parseModule.js",
    "longname": "src/private/parse/parseModule.js~parseThingsImported",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "isLazy",
        "types": [
          "*"
        ]
      },
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 621,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseRequire",
    "memberof": "src/private/parse/parseModule.js",
    "longname": "src/private/parse/parseModule.js~parseRequire",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "token",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 622,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "tryTakeNDots",
    "memberof": "src/private/parse/parseModule.js",
    "longname": "src/private/parse/parseModule.js~tryTakeNDots",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "params": [
      {
        "name": "token",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "number"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 623,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseName.js",
    "memberof": null,
    "longname": "src/private/parse/parseName.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {unexpected} from './checks'\nimport {isNameKeyword, keywordName, Name} from '../Token'\n\n/**\nParse a {@link Name} or {@link Keyword} usable as one.\n@return {string}\n*/\nexport default function parseName(token) {\n\tconst name = tryParseName(token)\n\tif (name === null)\n\t\tunexpected(token)\n\treturn name\n}\n\n/**\nLike {@link parseName} but returns `null` on failure.\n@return {?string}\n*/\nexport function tryParseName(token) {\n\treturn token instanceof Name ?\n\t\ttoken.name :\n\t\tisNameKeyword(token) ?\n\t\tkeywordName(token.kind) :\n\t\tnull\n}\n"
  },
  {
    "__docId__": 624,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseName",
    "memberof": "src/private/parse/parseName.js",
    "longname": "src/private/parse/parseName.js~parseName",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseName.js",
    "importStyle": "parseName",
    "description": "Parse a {@link Name} or {@link Keyword} usable as one.",
    "lineNumber": 8,
    "params": [
      {
        "name": "token",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 625,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "tryParseName",
    "memberof": "src/private/parse/parseName.js",
    "longname": "src/private/parse/parseName.js~tryParseName",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseName.js",
    "importStyle": "{tryParseName}",
    "description": "Like {@link parseName} but returns `null` on failure.",
    "lineNumber": 19,
    "params": [
      {
        "name": "token",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 626,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseQuote.js",
    "memberof": null,
    "longname": "src/private/parse/parseQuote.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {QuotePlain} from '../MsAst'\nimport {parseSingle} from './parse*'\n\n/** Parse tokens in a {@link Groups.Quote}. */\nexport default function parseQuote(tokens) {\n\treturn new QuotePlain(tokens.loc, tokens.map(_ => typeof _ === 'string' ? _ : parseSingle(_)))\n}\n"
  },
  {
    "__docId__": 627,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseQuote",
    "memberof": "src/private/parse/parseQuote.js",
    "longname": "src/private/parse/parseQuote.js~parseQuote",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseQuote.js",
    "importStyle": "parseQuote",
    "description": "Parse tokens in a {@link Groups.Quote}.",
    "lineNumber": 5,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 628,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseSingle.js",
    "memberof": null,
    "longname": "src/private/parse/parseSingle.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {BagSimple, LocalAccess, NumberLiteral, SpecialVal} from '../MsAst'\nimport {Group, Groups, Name, opKeywordKindToSpecialValueKind, Keyword, Keywords} from '../Token'\nimport {ifElse} from '../util'\nimport {unexpected} from './checks'\nimport {parseBlockWrap} from './parseBlock'\nimport parseQuote from './parseQuote'\nimport {parseExpr, parseExprParts, parseSpaced} from './parse*'\nimport Slice from './Slice'\n\n/** Parse a single token. */\nexport default function parseSingle(token) {\n\tconst {loc} = token\n\tif (token instanceof Name)\n\t\treturn new LocalAccess(loc, token.name)\n\telse if (token instanceof Group) {\n\t\tconst slice = Slice.group(token)\n\t\tswitch (token.kind) {\n\t\t\tcase Groups.Space:\n\t\t\t\treturn parseSpaced(slice)\n\t\t\tcase Groups.Parenthesis:\n\t\t\t\treturn parseExpr(slice)\n\t\t\tcase Groups.Bracket:\n\t\t\t\treturn new BagSimple(loc, parseExprParts(slice))\n\t\t\tcase Groups.Block:\n\t\t\t\treturn parseBlockWrap(slice)\n\t\t\tcase Groups.Quote:\n\t\t\t\treturn parseQuote(slice)\n\t\t\tdefault:\n\t\t\t\tthrow new Error(token.kind)\n\t\t}\n\t} else if (token instanceof NumberLiteral)\n\t\treturn token\n\telse if (token instanceof Keyword)\n\t\tswitch (token.kind) {\n\t\t\tcase Keywords.Focus:\n\t\t\t\treturn LocalAccess.focus(loc)\n\t\t\tdefault:\n\t\t\t\treturn ifElse(opKeywordKindToSpecialValueKind(token.kind),\n\t\t\t\t\t_ => new SpecialVal(loc, _),\n\t\t\t\t\t() => unexpected(token))\n\t\t}\n\telse\n\t\tunexpected(token)\n}\n"
  },
  {
    "__docId__": 629,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseSingle",
    "memberof": "src/private/parse/parseSingle.js",
    "longname": "src/private/parse/parseSingle.js~parseSingle",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseSingle.js",
    "importStyle": "parseSingle",
    "description": "Parse a single token.",
    "lineNumber": 11,
    "params": [
      {
        "name": "token",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 630,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseSpaced.js",
    "memberof": null,
    "longname": "src/private/parse/parseSpaced.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {code} from '../../CompileError'\nimport {check, fail} from '../context'\nimport {Call, GetterFun, Lazy, LocalAccess, Member, MemberFun, QuoteSimple, QuoteTaggedTemplate,\n\tRange, SimpleFun, Spread, SuperCall, SuperMember} from '../MsAst'\nimport {Group, Groups, isGroup, isKeyword, Keyword, Keywords, showKeyword} from '../Token'\nimport {assert, opIf} from '../util'\nimport {checkEmpty, unexpected} from './checks'\nimport {parseExpr, parseExprParts} from './parse*'\nimport parseMemberName from './parseMemberName'\nimport parseName from './parseName'\nimport parseQuote from './parseQuote'\nimport parseSingle from './parseSingle'\nimport Slice from './Slice'\n\n/**\nParse tokens in a {@link Groups.Space}.\n@return {Val}\n*/\nexport default function parseSpaced(tokens) {\n\tconst h = tokens.head(), rest = tokens.tail()\n\tif (h instanceof Keyword)\n\t\tswitch (h.kind) {\n\t\t\tcase Keywords.Ampersand: {\n\t\t\t\tconst h2 = rest.head()\n\t\t\t\tif (isGroup(Groups.Parenthesis, h2))\n\t\t\t\t\treturn new SimpleFun(tokens.loc, parseExpr(Slice.group(h2)))\n\t\t\t\telse if (isKeyword(Keywords.Dot, h2)) {\n\t\t\t\t\tconst tail = rest.tail()\n\t\t\t\t\tconst h3 = tail.head()\n\t\t\t\t\tconst fun = new GetterFun(h3.loc, parseMemberName(h3))\n\t\t\t\t\treturn parseSpacedFold(fun, tail.tail())\n\t\t\t\t} else {\n\t\t\t\t\tconst fun = new MemberFun(h2.loc, null, parseMemberName(h2))\n\t\t\t\t\treturn parseSpacedFold(fun, rest.tail())\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase Keywords.Dot: {\n\t\t\t\tconst h2 = rest.head()\n\t\t\t\tif (isKeyword(Keywords.Ampersand, h2)) {\n\t\t\t\t\tconst tail = rest.tail()\n\t\t\t\t\tconst h3 = tail.head()\n\t\t\t\t\tconst name = parseMemberName(h3)\n\t\t\t\t\tconst fun = new MemberFun(h2.loc, LocalAccess.this(h2.loc), name)\n\t\t\t\t\treturn parseSpacedFold(fun, tail.tail())\n\t\t\t\t} else {\n\t\t\t\t\tconst name = parseMemberName(rest.head())\n\t\t\t\t\tconst member = new Member(h.loc, LocalAccess.this(h.loc), name)\n\t\t\t\t\treturn parseSpacedFold(member, rest.tail())\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase Keywords.Dot3:\n\t\t\t\treturn new Spread(tokens.loc, parseSpacedFold(parseSingle(rest.head()), rest.tail))\n\t\t\tcase Keywords.Lazy:\n\t\t\t\treturn new Lazy(h.loc, parseSpaced(rest))\n\t\t\tcase Keywords.Super: {\n\t\t\t\t// TODO: handle sub here as well\n\t\t\t\tconst h2 = rest.head()\n\t\t\t\tif (isKeyword(Keywords.Dot, h2)) {\n\t\t\t\t\tconst tail = rest.tail()\n\t\t\t\t\tconst sup = new SuperMember(h2.loc, parseMemberName(tail.head()))\n\t\t\t\t\treturn parseSpacedFold(sup, tail.tail())\n\t\t\t\t} else if (isGroup(Groups.Parenthesis, h2) && Slice.group(h2).isEmpty()) {\n\t\t\t\t\tconst x = new SuperCall(h2.loc, [], true)\n\t\t\t\t\treturn parseSpacedFold(x, rest.tail())\n\t\t\t\t} else\n\t\t\t\t\tfail(`Expected ${showKeyword(Keywords.Dot)} or ${code('()')} ` +\n\t\t\t\t\t\t`after ${showKeyword(Keywords.Super)}`)\n\t\t\t}\n\t\t\tcase Keywords.Tick: {\n\t\t\t\tconst h2 = rest.head()\n\t\t\t\tconst quote = new QuoteSimple(h2.loc, parseName(h2))\n\t\t\t\treturn parseSpacedFold(quote, rest.tail())\n\t\t\t}\n\t\t\tcase Keywords.Colon:\n\t\t\t\treturn Call.contains(h.loc, parseSpaced(rest), LocalAccess.focus(h.loc))\n\t\t\tdefault:\n\t\t\t\t// fall through\n\t\t}\n\treturn parseSpacedFold(parseSingle(h), rest)\n}\n\nfunction parseSpacedFold(start, rest) {\n\tlet acc = start\n\tfor (let i = rest._start; i < rest._end; i = i + 1) {\n\t\tfunction restVal() {\n\t\t\treturn parseSpaced(rest._chopStart(i + 1))\n\t\t}\n\n\t\tconst token = rest._tokens[i]\n\t\tconst loc = token.loc\n\t\tif (token instanceof Keyword)\n\t\t\tswitch (token.kind) {\n\t\t\t\tcase Keywords.Ampersand:\n\t\t\t\t\tif (i === rest._end - 1)\n\t\t\t\t\t\tunexpected(token)\n\t\t\t\t\ti = i + 1\n\t\t\t\t\tacc = new MemberFun(token.loc, acc, parseMemberName(rest._tokens[i]))\n\t\t\t\t\tbreak\n\t\t\t\tcase Keywords.Dot: {\n\t\t\t\t\t// If this were the last one,\n\t\t\t\t\t// it would not be a Keywords.Dot but a Keywords.ObjAssign\n\t\t\t\t\tassert(i < rest._end - 1)\n\t\t\t\t\ti = i + 1\n\t\t\t\t\tacc = new Member(token.loc, acc, parseMemberName(rest._tokens[i]))\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase Keywords.Dot2:\n\t\t\t\t\tcheck(i < rest._end - 1, token.loc, () =>\n\t\t\t\t\t\t`Use ${showKeyword(Keywords.Dot3)} for infinite ranges.`)\n\t\t\t\t\treturn new Range(token.loc, acc, restVal(), false)\n\t\t\t\tcase Keywords.Dot3:\n\t\t\t\t\treturn new Range(token.loc, acc, opIf(i < rest._end - 1, restVal), true)\n\t\t\t\tcase Keywords.Focus:\n\t\t\t\t\tacc = new Call(token.loc, acc, [LocalAccess.focus(loc)])\n\t\t\t\t\tbreak\n\t\t\t\tcase Keywords.Colon:\n\t\t\t\t\treturn Call.contains(token.loc, restVal(), acc)\n\t\t\t\tdefault:\n\t\t\t\t\tunexpected(token)\n\t\t\t}\n\t\telse if (token instanceof Group) {\n\t\t\tconst slice = Slice.group(token)\n\t\t\tswitch (token.kind) {\n\t\t\t\tcase Groups.Bracket:\n\t\t\t\t\tacc = Call.sub(loc, acc, parseExprParts(slice))\n\t\t\t\t\tbreak\n\t\t\t\tcase Groups.Parenthesis:\n\t\t\t\t\tcheckEmpty(slice, () => `Use ${code('(a b)')}, not ${code('a(b)')}`)\n\t\t\t\t\tacc = new Call(loc, acc, [])\n\t\t\t\t\tbreak\n\t\t\t\tcase Groups.Quote:\n\t\t\t\t\tacc = new QuoteTaggedTemplate(loc, acc, parseQuote(slice))\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tunexpected(token)\n\t\t\t}\n\t\t} else\n\t\t\tunexpected(token)\n\t}\n\treturn acc\n}\n"
  },
  {
    "__docId__": 631,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseSpaced",
    "memberof": "src/private/parse/parseSpaced.js",
    "longname": "src/private/parse/parseSpaced.js~parseSpaced",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseSpaced.js",
    "importStyle": "parseSpaced",
    "description": "Parse tokens in a {@link Groups.Space}.",
    "lineNumber": 19,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Val"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 632,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseSpacedFold",
    "memberof": "src/private/parse/parseSpaced.js",
    "longname": "src/private/parse/parseSpaced.js~parseSpacedFold",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/parse/parseSpaced.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "rest",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 633,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/parseSwitch.js",
    "memberof": null,
    "longname": "src/private/parse/parseSwitch.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {check} from '../context'\nimport {LocalAccess, Switch, SwitchPart} from '../MsAst'\nimport {isKeyword, Keywords, showKeyword} from '../Token'\nimport {checkEmpty} from './checks'\nimport {parseExpr, parseExprParts} from './parse*'\nimport parseBlock, {beforeAndBlock, parseJustBlock} from './parseBlock'\nimport Slice from './Slice'\n\n/** Parse a {@link Switch}. */\nexport default function parseSwitch(switchedFromFun, tokens) {\n\tconst [before, block] = beforeAndBlock(tokens)\n\n\tif (switchedFromFun)\n\t\tcheckEmpty(before, 'Value to switch on is `_`, the function\\'s implicit argument.')\n\tconst switched = switchedFromFun ? LocalAccess.focus(tokens.loc) : parseExpr(before)\n\n\tconst lastLine = Slice.group(block.last())\n\tconst [partLines, opElse] = isKeyword(Keywords.Else, lastLine.head()) ?\n\t\t[block.rtail(), parseJustBlock(Keywords.Else, lastLine.tail())] :\n\t\t[block, null]\n\n\tconst parts = partLines.mapSlices(line => {\n\t\tconst [before, block] = beforeAndBlock(line)\n\t\treturn new SwitchPart(line.loc, parseExprParts(before), parseBlock(block))\n\t})\n\tcheck(parts.length > 0, tokens.loc, () =>\n\t\t`Must have at least 1 non-${showKeyword(Keywords.Else)} test.`)\n\treturn new Switch(tokens.loc, switched, parts, opElse)\n}\n"
  },
  {
    "__docId__": 634,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseSwitch",
    "memberof": "src/private/parse/parseSwitch.js",
    "longname": "src/private/parse/parseSwitch.js~parseSwitch",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/parseSwitch.js",
    "importStyle": "parseSwitch",
    "description": "Parse a {@link Switch}.",
    "lineNumber": 10,
    "params": [
      {
        "name": "switchedFromFun",
        "types": [
          "*"
        ]
      },
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 635,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/parse/tryTakeComment.js",
    "memberof": null,
    "longname": "src/private/parse/tryTakeComment.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {DocComment} from '../Token'\nimport {assert, isEmpty} from '../util'\n\n/**\nTakes DocComment lines and puts them into a comment.\n@return {?string}\n*/\nexport default function tryTakeComment(lines) {\n\tlet comments = []\n\tlet rest = lines\n\n\twhile (true) {\n\t\tif (rest.isEmpty())\n\t\t\tbreak\n\n\t\tconst hs = rest.headSlice()\n\t\tconst h = hs.head()\n\t\tif (!(h instanceof DocComment))\n\t\t\tbreak\n\n\t\tassert(hs.size() === 1)\n\t\tcomments.push(h)\n\t\trest = rest.tail()\n\t}\n\n\treturn [isEmpty(comments) ? null : comments.map(_ => _.text).join('\\n'), rest]\n}\n"
  },
  {
    "__docId__": 636,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "tryTakeComment",
    "memberof": "src/private/parse/tryTakeComment.js",
    "longname": "src/private/parse/tryTakeComment.js~tryTakeComment",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/parse/tryTakeComment.js",
    "importStyle": "tryTakeComment",
    "description": "Takes DocComment lines and puts them into a comment.",
    "lineNumber": 8,
    "params": [
      {
        "name": "lines",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 637,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/render.js",
    "memberof": null,
    "longname": "src/private/render.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import esRender, {renderWithSourceMap} from 'esast/dist/render'\nimport {options} from './context'\n\n/** Renders the transpiled Ast. */\nexport default function render(esAst) {\n\treturn options.includeSourceMap() ?\n\t\trenderWithSourceMap(esAst, options.modulePath(), `./${options.jsBaseName()}`) :\n\t\tesRender(esAst)\n}\n"
  },
  {
    "__docId__": 638,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "render",
    "memberof": "src/private/render.js",
    "longname": "src/private/render.js~render",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/render.js",
    "importStyle": "render",
    "description": "Renders the transpiled Ast.",
    "lineNumber": 5,
    "params": [
      {
        "name": "esAst",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 639,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/transpile/ast-constants.js",
    "memberof": null,
    "longname": "src/private/transpile/ast-constants.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {ArrayExpression, AssignmentExpression, Identifier, Literal, NewExpression, ObjectExpression,\n\tReturnStatement, SwitchCase, ThisExpression, VariableDeclaration, VariableDeclarator}\n\tfrom 'esast/dist/ast'\nimport {member} from 'esast/dist/util'\nimport {throwErrorFromString} from './util'\n\nexport const\n\tGlobalError = new Identifier('Error'),\n\tGlobalInfinity = new Identifier('Infinity'),\n\tIdArguments = new Identifier('arguments'),\n\tIdBuilt = new Identifier('built'),\n\tIdError = new Identifier('Error'),\n\tIdExports = new Identifier('exports'),\n\tIdExtract = new Identifier('_$'),\n\tIdFocus = new Identifier('_'),\n\t// TODO:ES6 Shouldn't need, just use arrow functions.\n\tIdLexicalThis = new Identifier('_this'),\n\tIdSuper = new Identifier('super'),\n\tLitEmptyArray = new ArrayExpression([]),\n\tLitEmptyString = new Literal(''),\n\tLitNull = new Literal(null),\n\tLitStrThrow = new Literal('An error occurred.'),\n\tLitTrue = new Literal(true),\n\tLitZero = new Literal(0),\n\tReturnBuilt = new ReturnStatement(IdBuilt),\n\tReturnFocus = new ReturnStatement(IdFocus),\n\tSwitchCaseNoMatch = new SwitchCase(undefined, [\n\t\tthrowErrorFromString('No branch of `switch` matches.')]),\n\tSymbolIterator = member(new Identifier('Symbol'), 'iterator'),\n\tThrowAssertFail = throwErrorFromString('Assertion failed.'),\n\tThrowNoCaseMatch = throwErrorFromString('No branch of `case` matches.'),\n\n\tArraySliceCall = member(member(LitEmptyArray, 'slice'), 'call'),\n\tDeclareBuiltBag = new VariableDeclaration('let',\n\t\t[new VariableDeclarator(IdBuilt, LitEmptyArray)]),\n\tDeclareBuiltMap = new VariableDeclaration('let', [\n\t\tnew VariableDeclarator(IdBuilt,\n\t\t\tnew NewExpression(member(new Identifier('global'), 'Map'), []))]),\n\tDeclareBuiltObj = new VariableDeclaration('let', [\n\t\tnew VariableDeclarator(IdBuilt, new ObjectExpression([]))]),\n\tExportsDefault = member(IdExports, 'default'),\n\n\tDeclareLexicalThis = new VariableDeclaration('let',\n\t\t[new VariableDeclarator(IdLexicalThis, new ThisExpression())]),\n\tLetLexicalThis = new VariableDeclaration('let', [new VariableDeclarator(IdLexicalThis)]),\n\tSetLexicalThis = new AssignmentExpression('=', IdLexicalThis, new ThisExpression())\n"
  },
  {
    "__docId__": 640,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "GlobalError",
    "memberof": "src/private/transpile/ast-constants.js",
    "longname": "src/private/transpile/ast-constants.js~GlobalError",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/ast-constants.js",
    "importStyle": "{GlobalError}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "esast/dist/ast~Identifier"
      ]
    }
  },
  {
    "__docId__": 641,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/transpile/context.js",
    "memberof": null,
    "longname": "src/private/transpile/context.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Funs} from '../MsAst'\n\nexport let verifyResults\n/** Whether we are in an async/generator function. */\nexport let funKind\nexport let nextDestructuredId\n\nexport function setup(_verifyResults) {\n\tverifyResults = _verifyResults\n\tfunKind = Funs.Plain\n\tnextDestructuredId = 0\n}\n\nexport function tearDown() {\n\t// Release for garbage collection.\n\tverifyResults = null\n}\n\nexport function getDestructuredId() {\n\tconst _ = nextDestructuredId\n\tnextDestructuredId = nextDestructuredId + 1\n\treturn _\n}\n\nexport function withFunKind(newFunKind, func) {\n\tconst oldFunKind = funKind\n\tfunKind = newFunKind\n\tconst _ = func()\n\tfunKind = oldFunKind\n\treturn _\n}\n"
  },
  {
    "__docId__": 642,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "setup",
    "memberof": "src/private/transpile/context.js",
    "longname": "src/private/transpile/context.js~setup",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/context.js",
    "importStyle": "{setup}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "_verifyResults",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 643,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "tearDown",
    "memberof": "src/private/transpile/context.js",
    "longname": "src/private/transpile/context.js~tearDown",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/context.js",
    "importStyle": "{tearDown}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 644,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getDestructuredId",
    "memberof": "src/private/transpile/context.js",
    "longname": "src/private/transpile/context.js~getDestructuredId",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/context.js",
    "importStyle": "{getDestructuredId}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 645,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "withFunKind",
    "memberof": "src/private/transpile/context.js",
    "longname": "src/private/transpile/context.js~withFunKind",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/context.js",
    "importStyle": "{withFunKind}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "newFunKind",
        "types": [
          "*"
        ]
      },
      {
        "name": "func",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 646,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/transpile/transpile.js",
    "memberof": null,
    "longname": "src/private/transpile/transpile.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {ArrayExpression, ArrowFunctionExpression, AssignmentExpression, BinaryExpression,\n\tBlockStatement, BreakStatement, CallExpression, ClassBody, ClassExpression,\n\tConditionalExpression, DebuggerStatement, ForOfStatement, ForStatement, FunctionExpression,\n\tIdentifier, IfStatement, Literal, LogicalExpression, MemberExpression, MethodDefinition,\n\tNewExpression, ObjectExpression, Property, ReturnStatement, SpreadElement, SwitchCase,\n\tSwitchStatement, TaggedTemplateExpression, TemplateElement, TemplateLiteral, ThisExpression,\n\tThrowStatement, VariableDeclaration, UnaryExpression, VariableDeclarator, YieldExpression\n\t} from 'esast/dist/ast'\nimport {identifier, member, propertyIdOrLiteral} from 'esast/dist/util'\nimport {options} from '../context'\nimport * as MsAstTypes from '../MsAst'\nimport {AssignSingle, Call, Constructor, Fun, Funs, Logics, Member, LocalDeclares, Pattern, Setters,\n\tSpecialDos, SpecialVals} from '../MsAst'\nimport {assert, cat, flatMap, flatOpMap, ifElse, implementMany, isEmpty, last, opIf, opMap, rtail,\n\ttail} from '../util'\nimport {Blocks} from '../VerifyResults'\nimport {ArraySliceCall, DeclareBuiltBag, DeclareBuiltMap, DeclareBuiltObj, DeclareLexicalThis,\n\tIdArguments, IdBuilt, IdExtract, IdFocus, IdLexicalThis, IdSuper, GlobalError, GlobalInfinity,\n\tLetLexicalThis, LitEmptyString, LitNull, LitStrThrow, LitZero, ReturnBuilt, ReturnFocus,\n\tSetLexicalThis, SwitchCaseNoMatch, ThrowAssertFail, ThrowNoCaseMatch} from './ast-constants'\nimport {setup, tearDown, verifyResults, withFunKind} from './context'\nimport transpileExcept, {transpileCatch} from './transpileExcept'\nimport {transpileMethodToDefinition, transpileMethodToProperty} from './transpileMethod'\nimport transpileModule, {exportNamedOrDefault} from './transpileModule'\nimport {accessLocalDeclare, blockWrap, blockWrapIfBlock, blockWrapIfVal, callFocusFun, declare,\n\tdoThrow, focusFun, idForDeclareCached, lazyWrap, makeDeclarator, makeDestructureDeclarators,\n\tmaybeWrapInCheckContains, memberStringOrVal, msCall, msMember, opTypeCheckForLocalDeclare, t0,\n\tt1, t2, t3, tLines, transpileName} from './util'\n\n/** Transform a {@link MsAst} into an esast. **/\nexport default function transpile(moduleExpression, verifyResults) {\n\tsetup(verifyResults)\n\tconst res = t0(moduleExpression)\n\ttearDown()\n\treturn res\n}\n\nimplementMany(MsAstTypes, 'transpile', {\n\tAssert() {\n\t\tconst failCond = () => {\n\t\t\tconst cond = t0(this.condition)\n\t\t\treturn this.negate ? cond : new UnaryExpression('!', cond)\n\t\t}\n\n\t\treturn ifElse(this.opThrown,\n\t\t\t_ => new IfStatement(failCond(), doThrow(_)),\n\t\t\t() => {\n\t\t\t\tif (this.condition instanceof Call) {\n\t\t\t\t\tconst call = this.condition\n\t\t\t\t\tconst called = call.called\n\t\t\t\t\tconst args = call.args.map(t0)\n\t\t\t\t\tif (called instanceof Member) {\n\t\t\t\t\t\tconst ass = this.negate ? 'assertNotMember' : 'assertMember'\n\t\t\t\t\t\treturn msCall(ass, t0(called.object), transpileName(called.name), ...args)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst ass = this.negate ? 'assertNot' : 'assert'\n\t\t\t\t\t\treturn msCall(ass, t0(called), ...args)\n\t\t\t\t\t}\n\t\t\t\t} else\n\t\t\t\t\treturn new IfStatement(failCond(), ThrowAssertFail)\n\t\t\t})\n\t},\n\n\tAssignSingle(valWrap) {\n\t\tconst val = valWrap === undefined ? t0(this.value) : valWrap(t0(this.value))\n\t\tconst declare = makeDeclarator(this.assignee, val, false)\n\t\treturn new VariableDeclaration('let', [declare])\n\t},\n\t// TODO:ES6 Just use native destructuring assign\n\tAssignDestructure() {\n\t\treturn new VariableDeclaration(\n\t\t\t'let',\n\t\t\tmakeDestructureDeclarators(\n\t\t\t\tthis.assignees,\n\t\t\t\tthis.kind() === LocalDeclares.Lazy,\n\t\t\t\tt0(this.value),\n\t\t\t\tfalse))\n\t},\n\n\tAwait() {\n\t\treturn new YieldExpression(t0(this.value), false)\n\t},\n\n\tBagEntry() {\n\t\treturn msCall(this.isMany ? 'addMany' : 'add', IdBuilt, t0(this.value))\n\t},\n\n\tBagSimple() {\n\t\treturn new ArrayExpression(this.parts.map(t0))\n\t},\n\n\tBlock(lead=null, opReturnType=null, follow=null) {\n\t\tconst kind = verifyResults.blockKind(this)\n\t\tswitch (kind) {\n\t\t\tcase Blocks.Do:\n\t\t\t\tassert(opReturnType === null)\n\t\t\t\treturn new BlockStatement(cat(lead, tLines(this.lines), follow))\n\t\t\tcase Blocks.Throw:\n\t\t\t\treturn new BlockStatement(\n\t\t\t\t\tcat(lead, tLines(rtail(this.lines)), t0(last(this.lines))))\n\t\t\tcase Blocks.Return:\n\t\t\t\treturn transpileBlockReturn(\n\t\t\t\t\tt0(last(this.lines)), tLines(rtail(this.lines)), lead, opReturnType)\n\t\t\tcase Blocks.Bag: case Blocks.Map: case Blocks.Obj: {\n\t\t\t\tconst declare = kind === Blocks.Bag ?\n\t\t\t\t\tDeclareBuiltBag :\n\t\t\t\t\tkind === Blocks.Map ? DeclareBuiltMap : DeclareBuiltObj\n\t\t\t\tconst body = cat(declare, tLines(this.lines))\n\t\t\t\treturn transpileBlockReturn(IdBuilt, body, lead, opReturnType)\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new Error(kind)\n\t\t}\n\t},\n\n\tBlockWrap() {\n\t\treturn blockWrap(t0(this.block))\n\t},\n\n\tBreak() {\n\t\treturn ifElse(this.opValue,\n\t\t\t_ => new ReturnStatement(t0(_)),\n\t\t\t() => new BreakStatement())\n\t},\n\n\tCall() {\n\t\treturn new CallExpression(t0(this.called), this.args.map(t0))\n\t},\n\n\tCase() {\n\t\tconst body = caseBody(this.parts, this.opElse)\n\t\tif (verifyResults.isStatement(this))\n\t\t\treturn ifElse(this.opCased, _ => new BlockStatement([t0(_), body]), () => body)\n\t\telse {\n\t\t\tconst block = ifElse(this.opCased, _ => [t0(_), body], () => [body])\n\t\t\treturn blockWrap(new BlockStatement(block))\n\t\t}\n\t},\n\n\tCasePart(alternate) {\n\t\tif (this.test instanceof Pattern) {\n\t\t\tconst {type, patterned, locals} = this.test\n\t\t\tconst decl = new VariableDeclaration('let', [\n\t\t\t\tnew VariableDeclarator(IdExtract, msCall('extract', t0(type), t0(patterned)))])\n\t\t\tconst test = new BinaryExpression('!==', IdExtract, LitNull)\n\t\t\tconst extract = new VariableDeclaration('let', locals.map((_, idx) =>\n\t\t\t\tnew VariableDeclarator(\n\t\t\t\t\tidForDeclareCached(_),\n\t\t\t\t\tnew MemberExpression(IdExtract, new Literal(idx)))))\n\t\t\tconst res = t1(this.result, extract)\n\t\t\treturn new BlockStatement([decl, new IfStatement(test, res, alternate)])\n\t\t} else\n\t\t\t// alternate written to by `caseBody`.\n\t\t\treturn new IfStatement(t0(this.test), t0(this.result), alternate)\n\t},\n\n\tClass() {\n\t\tconst methods = cat(\n\t\t\tthis.statics.map(_ => transpileMethodToDefinition(_, true)),\n\t\t\topMap(this.opConstructor, t0),\n\t\t\tthis.methods.map(_ => transpileMethodToDefinition(_, false)))\n\t\tconst opName = opMap(verifyResults.opName(this), identifier)\n\t\tconst classExpr = new ClassExpression(opName,\n\t\t\topMap(this.opSuperClass, t0), new ClassBody(methods))\n\n\t\tif (this.opDo === null && isEmpty(this.kinds))\n\t\t\treturn classExpr\n\t\telse {\n\t\t\tconst lead = cat(\n\t\t\t\tnew VariableDeclaration('let', [\n\t\t\t\t\tnew VariableDeclarator(IdFocus, classExpr)]),\n\t\t\t\tthis.kinds.map(_ => msCall('kindDo', IdFocus, t0(_))))\n\t\t\tconst block = ifElse(this.opDo,\n\t\t\t\t_ => t3(_.block, lead, null, ReturnFocus),\n\t\t\t\t() => new BlockStatement(cat(lead, ReturnFocus)))\n\t\t\treturn blockWrap(block)\n\t\t}\n\t},\n\n\tCond() {\n\t\treturn new ConditionalExpression(t0(this.test), t0(this.ifTrue), t0(this.ifFalse))\n\t},\n\n\tConditional() {\n\t\tconst test = t0(this.test)\n\t\tif (verifyResults.isStatement(this))\n\t\t\treturn new IfStatement(\n\t\t\t\tthis.isUnless ? new UnaryExpression('!', test) : test, t0(this.result))\n\t\telse {\n\t\t\tconst result = msCall('some', blockWrapIfBlock(this.result))\n\t\t\tconst none = msMember('None')\n\t\t\tconst [then, _else] = this.isUnless ? [none, result] : [result, none]\n\t\t\treturn new ConditionalExpression(test, then, _else)\n\t\t}\n\t},\n\n\tConstructor() {\n\t\t// If there is a `super`, `this` will not be defined until then,\n\t\t// so must wait until then.\n\t\t// Otherwise, do it at the beginning.\n\t\treturn MethodDefinition.constructor(verifyResults.constructorHasSuper(this) ?\n\t\t\tt2(this.fun, LetLexicalThis, true) :\n\t\t\tt1(this.fun, constructorSetMembers(this)))\n\t},\n\n\tCatch: transpileCatch,\n\n\tExcept: transpileExcept,\n\n\tFor() {\n\t\treturn blockWrapIfVal(this, forLoop(this.opIteratee, this.block))\n\t},\n\n\tForAsync() {\n\t\tconst {element, bag} = this.iteratee\n\t\tconst func = new FunctionExpression(null, [t0(element)], t0(this.block), true)\n\t\tconst call = msCall('$for', t0(bag), func)\n\t\treturn verifyResults.isStatement(this) ? new YieldExpression(call) : call\n\t},\n\n\tForBag() {\n\t\treturn blockWrap(new BlockStatement([\n\t\t\tDeclareBuiltBag,\n\t\t\tforLoop(this.opIteratee, this.block),\n\t\t\tReturnBuilt\n\t\t]))\n\t},\n\n\t// leadStatements comes from constructor members\n\t// dontDeclareThis: applies if this is the fun for a Constructor,\n\t// which may declare `this` at a `super` call.\n\tFun(leadStatements=null, dontDeclareThis=false) {\n\t\treturn withFunKind(this.kind, () => {\n\t\t\t// TODO:ES6 use `...`f\n\t\t\tconst nArgs = new Literal(this.args.length)\n\t\t\tconst opDeclareRest = opMap(this.opRestArg, rest =>\n\t\t\t\tdeclare(rest, new CallExpression(ArraySliceCall, [IdArguments, nArgs])))\n\t\t\tconst argChecks = opIf(options.includeChecks(), () =>\n\t\t\t\tflatOpMap(this.args, opTypeCheckForLocalDeclare))\n\n\t\t\tconst opDeclareThis = opIf(this.opDeclareThis !== null && !dontDeclareThis, () =>\n\t\t\t\tDeclareLexicalThis)\n\n\t\t\tconst lead = cat(opDeclareRest, opDeclareThis, argChecks, leadStatements)\n\n\t\t\tconst body =() => t2(this.block, lead, this.opReturnType)\n\t\t\tconst args = this.args.map(t0)\n\t\t\tconst id = opMap(verifyResults.opName(this), identifier)\n\n\t\t\tswitch (this.kind) {\n\t\t\t\tcase Funs.Plain:\n\t\t\t\t\t// TODO:ES6 Should be able to use rest args in arrow function\n\t\t\t\t\tif (id === null && this.opDeclareThis === null && opDeclareRest === null)\n\t\t\t\t\t\treturn new ArrowFunctionExpression(args, body())\n\t\t\t\t\telse\n\t\t\t\t\t\treturn new FunctionExpression(id, args, body())\n\t\t\t\tcase Funs.Async: {\n\t\t\t\t\tconst plainBody = t2(this.block, null, this.opReturnType)\n\t\t\t\t\tconst genFunc = new FunctionExpression(null, [], plainBody, true)\n\t\t\t\t\tconst ret = new ReturnStatement(msCall('async', genFunc))\n\t\t\t\t\treturn new FunctionExpression(id, args, new BlockStatement(cat(lead, ret)))\n\t\t\t\t}\n\t\t\t\tcase Funs.Generator:\n\t\t\t\t\treturn new FunctionExpression(id, args, body(), true)\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(this.kind)\n\t\t\t}\n\t\t})\n\t},\n\n\tGetterFun() {\n\t\t// _ => _.foo\n\t\treturn focusFun(memberStringOrVal(IdFocus, this.name))\n\t},\n\n\tIgnore() {\n\t\treturn []\n\t},\n\n\tKind() {\n\t\tconst name = new Literal(verifyResults.name(this))\n\t\tconst supers = new ArrayExpression(this.superKinds.map(t0))\n\t\tconst methods = _ =>\n\t\t\tnew ObjectExpression(_.map(transpileMethodToProperty))\n\t\tconst kind = msCall('kind', name, supers, methods(this.statics), methods(this.methods))\n\n\t\tif (this.opDo === null)\n\t\t\treturn kind\n\t\telse {\n\t\t\tconst lead = new VariableDeclaration('let',\n\t\t\t\t[new VariableDeclarator(IdFocus, kind)])\n\t\t\treturn blockWrap(t3(this.opDo.block, lead, null, ReturnFocus))\n\t\t}\n\t},\n\n\tLazy() {\n\t\treturn lazyWrap(t0(this.value))\n\t},\n\n\tNumberLiteral() {\n\t\t// Negative numbers are not part of ES spec.\n\t\t// http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.3\n\t\tconst value = Number(this.value)\n\t\tconst lit = new Literal(Math.abs(value))\n\t\tconst isPositive = value >= 0 && 1 / value !== -Infinity\n\t\treturn isPositive ? lit : new UnaryExpression('-', lit)\n\t},\n\n\tLocalAccess() {\n\t\tif (this.name === 'this')\n\t\t\treturn IdLexicalThis\n\t\telse {\n\t\t\tconst ld = verifyResults.localDeclareForAccess(this)\n\t\t\t// If ld missing, this is a builtin, and builtins are never lazy\n\t\t\treturn ld === undefined ? identifier(this.name) : accessLocalDeclare(ld)\n\t\t}\n\t},\n\n\tLocalDeclare() { return new Identifier(idForDeclareCached(this).name) },\n\n\tLocalMutate() {\n\t\treturn new AssignmentExpression('=', identifier(this.name), t0(this.value))\n\t},\n\n\tLogic() {\n\t\tconst op = this.kind === Logics.And ? '&&' : '||'\n\t\treturn tail(this.args).reduce(\n\t\t\t(a, b) => new LogicalExpression(op, a, t0(b)),\n\t\t\tt0(this.args[0]))\n\t},\n\n\tMapEntry() { return msCall('setSub', IdBuilt, t0(this.key), t0(this.val)) },\n\n\tMember() {\n\t\treturn memberStringOrVal(t0(this.object), this.name)\n\t},\n\n\tMemberFun() {\n\t\tconst name = transpileName(this.name)\n\t\treturn ifElse(this.opObject,\n\t\t\t_ => msCall('methodBound', t0(_), name),\n\t\t\t() => msCall('methodUnbound', name))\n\t},\n\n\tMemberSet() {\n\t\tconst obj = t0(this.object)\n\t\tconst val = maybeWrapInCheckContains(t0(this.value), this.opType, this.name)\n\t\tswitch (this.kind) {\n\t\t\tcase Setters.Init:\n\t\t\t\treturn msCall('newProperty', obj, transpileName(this.name), val)\n\t\t\tcase Setters.Mutate:\n\t\t\t\treturn new AssignmentExpression('=', memberStringOrVal(obj, this.name), val)\n\t\t\tdefault:\n\t\t\t\tthrow new Error()\n\t\t}\n\t},\n\n\tMethod() {\n\t\tconst name = new Literal(verifyResults.name(this))\n\n\t\tlet args\n\t\tif (this.fun.opRestArg !== null)\n\t\t\t// TODO: do something better for rest arg\n\t\t\targs = new UnaryExpression('void', new Literal(0))\n\t\telse\n\t\t\targs = new ArrayExpression(this.fun.args.map(arg => {\n\t\t\t\tconst name = new Literal(arg.name)\n\t\t\t\tconst opType = opMap(arg.opType, t0)\n\t\t\t\treturn ifElse(opType,\n\t\t\t\t\t_ => new ArrayExpression([name, _]),\n\t\t\t\t\t() => name)\n\t\t\t}))\n\n\t\tconst impl = this.fun instanceof Fun ? [t0(this.fun)] : []\n\t\treturn msCall('method', name, args, ...impl)\n\t},\n\n\tModule: transpileModule,\n\n\tNew() {\n\t\treturn new NewExpression(t0(this.type), this.args.map(t0))\n\t},\n\n\tNot() { return new UnaryExpression('!', t0(this.arg)) },\n\n\tObjEntryAssign() {\n\t\tif (this.assign instanceof AssignSingle && !this.assign.assignee.isLazy()) {\n\t\t\tconst name = this.assign.assignee.name\n\t\t\treturn t1(this.assign, val =>\n\t\t\t\tverifyResults.isObjEntryExport(this) ?\n\t\t\t\t\texportNamedOrDefault(val, name) :\n\t\t\t\t\tnew AssignmentExpression('=', member(IdBuilt, name), val))\n\t\t} else {\n\t\t\tconst assigns = this.assign.allAssignees().map(_ =>\n\t\t\t\tmsCall('setLazy', IdBuilt, new Literal(_.name), idForDeclareCached(_)))\n\t\t\treturn cat(t0(this.assign), assigns)\n\t\t}\n\t},\n\n\tObjEntryPlain() {\n\t\tconst val = t0(this.value)\n\t\treturn verifyResults.isObjEntryExport(this) ?\n\t\t\t// We've verified that for module export, this.name must be a string.\n\t\t\texportNamedOrDefault(val, this.name) :\n\t\t\tnew AssignmentExpression('=', memberStringOrVal(IdBuilt, this.name), val)\n\t},\n\n\tObjSimple() {\n\t\treturn new ObjectExpression(this.pairs.map(pair =>\n\t\t\tnew Property('init', propertyIdOrLiteral(pair.key), t0(pair.value))))\n\t},\n\n\tPipe() {\n\t\treturn this.pipes.reduce((expr, pipe) => callFocusFun(t0(pipe), expr), t0(this.value))\n\t},\n\n\tQuotePlain() {\n\t\tif (this.parts.length === 0)\n\t\t\treturn LitEmptyString\n\t\telse {\n\t\t\tconst quasis = [], expressions = []\n\n\t\t\t// TemplateLiteral must start with a TemplateElement\n\t\t\tif (typeof this.parts[0] !== 'string')\n\t\t\t\tquasis.push(TemplateElement.empty)\n\n\t\t\tfor (let part of this.parts)\n\t\t\t\tif (typeof part === 'string')\n\t\t\t\t\tquasis.push(TemplateElement.forRawString(part))\n\t\t\t\telse {\n\t\t\t\t\t// \"{1}{1}\" needs an empty quasi in the middle (and on the ends)\n\t\t\t\t\tif (quasis.length === expressions.length)\n\t\t\t\t\t\tquasis.push(TemplateElement.empty)\n\t\t\t\t\texpressions.push(t0(part))\n\t\t\t\t}\n\n\t\t\t// TemplateLiteral must end with a TemplateElement, so one more quasi than expression.\n\t\t\tif (quasis.length === expressions.length)\n\t\t\t\tquasis.push(TemplateElement.empty)\n\n\t\t\treturn new TemplateLiteral(quasis, expressions)\n\t\t}\n\t},\n\n\tQuoteSimple() {\n\t\treturn new Literal(this.name)\n\t},\n\n\tQuoteTaggedTemplate() {\n\t\treturn new TaggedTemplateExpression(t0(this.tag), t0(this.quote))\n\t},\n\n\tRange() {\n\t\tconst end = ifElse(this.end, t0, () => GlobalInfinity)\n\t\treturn msCall('range', t0(this.start), end, new Literal(this.isExclusive))\n\t},\n\n\tSetSub() {\n\t\tconst getKind = () => {\n\t\t\tswitch (this.kind) {\n\t\t\t\tcase Setters.Init:\n\t\t\t\t\treturn 'init'\n\t\t\t\tcase Setters.Mutate:\n\t\t\t\t\treturn 'mutate'\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error()\n\t\t\t}\n\t\t}\n\t\tconst kind = getKind()\n\t\treturn msCall(\n\t\t\t'setSub',\n\t\t\tt0(this.object),\n\t\t\tthis.subbeds.length === 1 ? t0(this.subbeds[0]) : this.subbeds.map(t0),\n\t\t\tmaybeWrapInCheckContains(t0(this.value), this.opType, 'value'),\n\t\t\tnew Literal(kind))\n\t},\n\n\tSimpleFun() {\n\t\treturn focusFun(t0(this.value))\n\t},\n\n\tSpecialDo() {\n\t\tswitch (this.kind) {\n\t\t\tcase SpecialDos.Debugger: return new DebuggerStatement()\n\t\t\tdefault: throw new Error(this.kind)\n\t\t}\n\t},\n\n\tSpecialVal() {\n\t\t// Make new objects because we will assign `loc` to them.\n\t\tswitch (this.kind) {\n\t\t\tcase SpecialVals.Contains:\n\t\t\t\treturn msMember('contains')\n\t\t\tcase SpecialVals.DelSub:\n\t\t\t\treturn msMember('delSub')\n\t\t\tcase SpecialVals.False:\n\t\t\t\treturn new Literal(false)\n\t\t\tcase SpecialVals.Name:\n\t\t\t\treturn new Literal(verifyResults.name(this))\n\t\t\tcase SpecialVals.Null:\n\t\t\t\treturn new Literal(null)\n\t\t\tcase SpecialVals.Sub:\n\t\t\t\treturn msMember('sub')\n\t\t\tcase SpecialVals.True:\n\t\t\t\treturn new Literal(true)\n\t\t\tcase SpecialVals.Undefined:\n\t\t\t\treturn new UnaryExpression('void', LitZero)\n\t\t\tdefault:\n\t\t\t\tthrow new Error(this.kind)\n\t\t}\n\t},\n\n\tSpread() {\n\t\treturn new SpreadElement(t0(this.spreaded))\n\t},\n\n\tSuperCall() {\n\t\tconst args = this.args.map(t0)\n\t\tconst method = verifyResults.superCallToMethod.get(this)\n\n\t\tif (method instanceof Constructor) {\n\t\t\t// super must appear as a statement, so OK to decalre `this`\n\t\t\tconst call = new CallExpression(IdSuper, args)\n\t\t\tconst memberSets = constructorSetMembers(method)\n\t\t\treturn cat(call, memberSets, SetLexicalThis)\n\t\t} else\n\t\t\treturn new CallExpression(memberStringOrVal(IdSuper, method.symbol), args)\n\t},\n\n\tSuperMember() {\n\t\treturn memberStringOrVal(IdSuper, this.name)\n\t},\n\n\tSwitch() {\n\t\tconst parts = flatMap(this.parts, t0)\n\t\tparts.push(ifElse(this.opElse,\n\t\t\t_ => new SwitchCase(undefined, t0(_).body),\n\t\t\t() => SwitchCaseNoMatch))\n\t\treturn blockWrapIfVal(this, new SwitchStatement(t0(this.switched), parts))\n\t},\n\n\tSwitchPart() {\n\t\tconst follow = opIf(verifyResults.isStatement(this), () => new BreakStatement)\n\t\t/*\n\t\tWe could just pass block.body for the switch lines, but instead\n\t\tenclose the body of the switch case in curly braces to ensure a new scope.\n\t\tThat way this code works:\n\t\t\tswitch (0) {\n\t\t\t\tcase 0: {\n\t\t\t\t\tconst a = 0\n\t\t\t\t\treturn a\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\t// Without curly braces this would conflict with the other `a`.\n\t\t\t\t\tconst a = 1\n\t\t\t\t\ta\n\t\t\t\t}\n\t\t\t}\n\t\t*/\n\t\tconst block = t3(this.result, null, null, follow)\n\t\t// If switch has multiple values, build up a statement like: `case 1: case 2: { doBlock() }`\n\t\tconst x = []\n\t\tfor (let i = 0; i < this.values.length - 1; i = i + 1)\n\t\t\t// These cases fallthrough to the one at the end.\n\t\t\tx.push(new SwitchCase(t0(this.values[i]), []))\n\t\tx.push(new SwitchCase(t0(this.values[this.values.length - 1]), [block]))\n\t\treturn x\n\t},\n\n\tThrow() {\n\t\treturn ifElse(this.opThrown,\n\t\t\t_ => doThrow(_),\n\t\t\t() => new ThrowStatement(new NewExpression(GlobalError, [LitStrThrow])))\n\t},\n\n\tWith() {\n\t\tconst idDeclare = idForDeclareCached(this.declare)\n\t\tconst val = t0(this.value)\n\t\tconst lead = new VariableDeclaration('let', [new VariableDeclarator(idDeclare, val)])\n\t\treturn verifyResults.isStatement(this) ?\n\t\t\tt1(this.block, lead) :\n\t\t\tblockWrap(t3(this.block, lead, null, new ReturnStatement(idDeclare)))\n\t},\n\n\tYield() {\n\t\treturn new YieldExpression(opMap(this.opValue, t0), false)\n\t},\n\n\tYieldTo() {\n\t\treturn new YieldExpression(t0(this.value), true)\n\t}\n})\n\n// Functions specific to certain expressions\n\nfunction caseBody(parts, opElse) {\n\tlet acc = ifElse(opElse, t0, () => ThrowNoCaseMatch)\n\tfor (let i = parts.length - 1; i >= 0; i = i - 1)\n\t\tacc = t1(parts[i], acc)\n\treturn acc\n}\n\nfunction constructorSetMembers(constructor) {\n\treturn constructor.memberArgs.map(_ =>\n\t\tmsCall('newProperty', new ThisExpression(), new Literal(_.name), idForDeclareCached(_)))\n}\n\nfunction forLoop(opIteratee, block) {\n\treturn ifElse(opIteratee,\n\t\t({element, bag}) => {\n\t\t\tconst declare = new VariableDeclaration('let',\n\t\t\t\t[new VariableDeclarator(t0(element))])\n\t\t\treturn new ForOfStatement(declare, t0(bag), t0(block))\n\t\t},\n\t\t() => new ForStatement(null, null, null, t0(block)))\n}\n\nfunction transpileBlockReturn(returned, lines, lead, opReturnType) {\n\tconst ret = new ReturnStatement(\n\t\tmaybeWrapInCheckContains(returned, opReturnType, 'returned value'))\n\treturn new BlockStatement(cat(lead, lines, ret))\n}\n"
  },
  {
    "__docId__": 647,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "transpile",
    "memberof": "src/private/transpile/transpile.js",
    "longname": "src/private/transpile/transpile.js~transpile",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/transpile.js",
    "importStyle": "transpile",
    "description": "Transform a {@link MsAst} into an esast. *",
    "lineNumber": 31,
    "params": [
      {
        "name": "moduleExpression",
        "types": [
          "*"
        ]
      },
      {
        "name": "verifyResults",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 648,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "caseBody",
    "memberof": "src/private/transpile/transpile.js",
    "longname": "src/private/transpile/transpile.js~caseBody",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 596,
    "undocument": true,
    "params": [
      {
        "name": "parts",
        "types": [
          "*"
        ]
      },
      {
        "name": "opElse",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 649,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "constructorSetMembers",
    "memberof": "src/private/transpile/transpile.js",
    "longname": "src/private/transpile/transpile.js~constructorSetMembers",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 603,
    "undocument": true,
    "params": [
      {
        "name": "constructor",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 650,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "forLoop",
    "memberof": "src/private/transpile/transpile.js",
    "longname": "src/private/transpile/transpile.js~forLoop",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 608,
    "undocument": true,
    "params": [
      {
        "name": "opIteratee",
        "types": [
          "*"
        ]
      },
      {
        "name": "block",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 651,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "transpileBlockReturn",
    "memberof": "src/private/transpile/transpile.js",
    "longname": "src/private/transpile/transpile.js~transpileBlockReturn",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 618,
    "undocument": true,
    "params": [
      {
        "name": "returned",
        "types": [
          "*"
        ]
      },
      {
        "name": "lines",
        "types": [
          "*"
        ]
      },
      {
        "name": "lead",
        "types": [
          "*"
        ]
      },
      {
        "name": "opReturnType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 652,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/transpile/transpileExcept.js",
    "memberof": null,
    "longname": "src/private/transpile/transpileExcept.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {AssignmentExpression, BlockStatement, CatchClause, Identifier, IfStatement, Literal,\n\tThrowStatement, TryStatement, VariableDeclaration, VariableDeclarator} from 'esast/dist/ast'\nimport {allSame, cat, ifElse, isEmpty, opMap, reverseIter} from '../util'\nimport {accessLocalDeclare, blockWrapIfVal, msCall, t0, t1, tLines} from './util'\n\nexport default function() {\n\tconst block = this.opElse === null ?\n\t\tnew TryStatement(\n\t\t\tt0(this.try),\n\t\t\ttranspileCatches(this.typedCatches, this.opCatchAll, false),\n\t\t\topMap(this.opFinally, t0)) :\n\t\ttranspileWithElse(this)\n\treturn blockWrapIfVal(this, block)\n}\n\n/**\n@param {boolean} needsErrorDeclare\n\tIf there are multiple catches with different error names, each one must declare its own.\n\tThe common error (used by the compiled `catch` block) is IdError.\n*/\nexport function transpileCatch(needsErrorDeclare) {\n\tif (needsErrorDeclare) {\n\t\tconst declareError = new VariableDeclaration('let', [\n\t\t\tnew VariableDeclarator(t0(this.caught), IdError)])\n\t\treturn t1(this.block, declareError)\n\t} else\n\t\treturn t0(this.block)\n}\n\n/**\nlet exceptElse_ = false\ntry {\n\t{{try}}\n\texceptElse_ = true\n\t{{opElse}}\n} catch (_) {\n\tif (exceptElse_)\n\t\tthrow _\n\t{{allCatches}}\n}\n*/\nfunction transpileWithElse(_) {\n\tconst _try = t1(_.opElse, cat(tLines(_.try.lines), SetExceptElse))\n\tconst _catch = transpileCatches(_.typedCatches, _.opCatchAll, true)\n\treturn [LetExceptElse, new TryStatement(_try, _catch, opMap(_.opFinally, t0))]\n}\n\nfunction transpileCatches(typedCatches, opCatchAll, hasElse) {\n\tconst allCatches = cat(typedCatches, opCatchAll)\n\t// If they all have the same name, we don't need individual declare for their errors.\n\tconst needsErrorDeclare = !allSame(allCatches, _ => _.caught.name)\n\tconst idError = needsErrorDeclare ? IdError : accessLocalDeclare(allCatches[0].caught)\n\tconst throwIfOnElse = () =>\n\t\tnew IfStatement(IdExceptElse, new ThrowStatement(idError))\n\n\tconst catchAll = ifElse(opCatchAll,\n\t\t_ => t1(_, needsErrorDeclare),\n\t\t() => new ThrowStatement(idError))\n\n\tif (isEmpty(typedCatches)) {\n\t\tif (hasElse)\n\t\t\tcatchAll.body.unshift(throwIfOnElse())\n\t\treturn new CatchClause(idError, catchAll)\n\t} else {\n\t\tlet catches = catchAll\n\t\tfor (const typedCatch of reverseIter(typedCatches)) {\n\t\t\tconst cond = msCall('contains', t0(typedCatch.caught.opType), idError)\n\t\t\tconst then = t1(typedCatch, needsErrorDeclare)\n\t\t\tcatches = new IfStatement(cond, then, catches)\n\t\t}\n\t\treturn new CatchClause(idError,\n\t\t\tnew BlockStatement(hasElse ? [throwIfOnElse(), catches] : [catches]))\n\t}\n}\n\nconst\n\tIdError = new Identifier('error_'),\n\tIdExceptElse = new Identifier('exceptElse_'),\n\tLetExceptElse = new VariableDeclaration('let', [\n\t\tnew VariableDeclarator(IdExceptElse, new Literal(false))]),\n\tSetExceptElse = new AssignmentExpression('=', IdExceptElse, new Literal(true))\n"
  },
  {
    "__docId__": 653,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "transpileExcept",
    "memberof": "src/private/transpile/transpileExcept.js",
    "longname": "src/private/transpile/transpileExcept.js~transpileExcept",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/transpileExcept.js",
    "importStyle": "transpileExcept",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 654,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "transpileCatch",
    "memberof": "src/private/transpile/transpileExcept.js",
    "longname": "src/private/transpile/transpileExcept.js~transpileCatch",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/transpileExcept.js",
    "importStyle": "{transpileCatch}",
    "description": null,
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "needsErrorDeclare",
        "description": "If there are multiple catches with different error names, each one must declare its own.\nThe common error (used by the compiled `catch` block) is IdError."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 655,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "transpileWithElse",
    "memberof": "src/private/transpile/transpileExcept.js",
    "longname": "src/private/transpile/transpileExcept.js~transpileWithElse",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpileExcept.js",
    "importStyle": null,
    "description": "let exceptElse_ = false\ntry {\n{{try}}\nexceptElse_ = true\n{{opElse}}\n} catch (_) {\nif (exceptElse_)\nthrow _\n{{allCatches}}\n}",
    "lineNumber": 42,
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 656,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "transpileCatches",
    "memberof": "src/private/transpile/transpileExcept.js",
    "longname": "src/private/transpile/transpileExcept.js~transpileCatches",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpileExcept.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [
      {
        "name": "typedCatches",
        "types": [
          "*"
        ]
      },
      {
        "name": "opCatchAll",
        "types": [
          "*"
        ]
      },
      {
        "name": "hasElse",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 657,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "IdError",
    "memberof": "src/private/transpile/transpileExcept.js",
    "longname": "src/private/transpile/transpileExcept.js~IdError",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpileExcept.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "esast/dist/ast~Identifier"
      ]
    }
  },
  {
    "__docId__": 658,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/transpile/transpileMethod.js",
    "memberof": null,
    "longname": "src/private/transpile/transpileMethod.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {FunctionExpression, MethodDefinition, Property} from 'esast/dist/ast'\nimport {propertyIdOrLiteral} from 'esast/dist/util'\nimport {MethodGetter, MethodImpl, QuoteAbstract} from '../MsAst'\nimport {DeclareLexicalThis, IdFocus} from './ast-constants'\nimport {msCall, t0, t1} from './util'\n\n/** Transpile method to a MethodDefinition in a class. */\nexport function transpileMethodToDefinition(_, isStatic) {\n\tconst {computed, key, kind, value} = methodParams(_, 'method')\n\treturn new MethodDefinition(key, value, kind, isStatic, computed)\n}\n\n/** Transpile method to a property of an object. */\nexport function transpileMethodToProperty(_) {\n\tconst {computed, isImpl, key, kind, value} = methodParams(_, 'init')\n\treturn new Property(kind, key, value, computed, isImpl)\n}\n\nfunction methodParams(_, defaultKind) {\n\tconst computed = !(typeof _.symbol === 'string')\n\tconst isImpl = _ instanceof MethodImpl\n\treturn {\n\t\tcomputed,\n\t\tisImpl,\n\t\tkey: computed ?\n\t\t\t_.symbol instanceof QuoteAbstract ? t0(_.symbol) : msCall('symbol', t0(_.symbol)) :\n\t\t\tpropertyIdOrLiteral(_.symbol),\n\t\tkind: isImpl ? defaultKind : _ instanceof MethodGetter ? 'get' : 'set',\n\t\tvalue: isImpl ? t0(_.fun) : getSetFun(_)\n\t}\n}\n\nfunction getSetFun(_) {\n\tconst args = _ instanceof MethodGetter ? [] : [IdFocus]\n\treturn new FunctionExpression(null, args, t1(_.block, DeclareLexicalThis))\n}\n"
  },
  {
    "__docId__": 659,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "transpileMethodToDefinition",
    "memberof": "src/private/transpile/transpileMethod.js",
    "longname": "src/private/transpile/transpileMethod.js~transpileMethodToDefinition",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/transpileMethod.js",
    "importStyle": "{transpileMethodToDefinition}",
    "description": "Transpile method to a MethodDefinition in a class.",
    "lineNumber": 8,
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      },
      {
        "name": "isStatic",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 660,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "transpileMethodToProperty",
    "memberof": "src/private/transpile/transpileMethod.js",
    "longname": "src/private/transpile/transpileMethod.js~transpileMethodToProperty",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/transpileMethod.js",
    "importStyle": "{transpileMethodToProperty}",
    "description": "Transpile method to a property of an object.",
    "lineNumber": 14,
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 661,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "methodParams",
    "memberof": "src/private/transpile/transpileMethod.js",
    "longname": "src/private/transpile/transpileMethod.js~methodParams",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpileMethod.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultKind",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 662,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getSetFun",
    "memberof": "src/private/transpile/transpileMethod.js",
    "longname": "src/private/transpile/transpileMethod.js~getSetFun",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpileMethod.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 663,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/transpile/transpileModule.js",
    "memberof": null,
    "longname": "src/private/transpile/transpileModule.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {ArrayExpression, ArrowFunctionExpression, AssignmentExpression, BinaryExpression,\n\tBlockStatement, CallExpression, ExpressionStatement, Identifier, IfStatement, Literal, Program,\n\tVariableDeclaration, VariableDeclarator, ReturnStatement, UnaryExpression\n\t} from 'esast/dist/ast'\nimport {identifier, loc, member, toStatement} from 'esast/dist/util'\nimport {options} from '../context'\nimport manglePath from '../manglePath'\nimport {Import, LocalDeclare} from '../MsAst'\nimport {cat, flatMap, isEmpty, last, opIf, opMap, rtail} from '../util'\nimport {Modules} from '../VerifyResults'\nimport {DeclareBuiltBag, DeclareBuiltMap, ExportsDefault, IdBuilt, IdExports} from './ast-constants'\nimport {verifyResults} from './context'\nimport {idForDeclareCached, lazyWrap, makeDestructureDeclarators, msCall, t0, tLines} from './util'\n\nexport default function transpileModule() {\n\tconst body = moduleBody(verifyResults.moduleKind, this.lines)\n\n\tconst imports = this.imports.filter(_ => _.path !== 'global')\n\n\tfor (const [path, imported] of verifyResults.builtinPathToNames)\n\t\tif (path !== 'global') {\n\t\t\tconst importedDeclares = []\n\t\t\tlet opImportDefault = null\n\t\t\tlet defaultName = last(path.split('/'))\n\t\t\tfor (const name of imported) {\n\t\t\t\tconst declare = LocalDeclare.plain(this.loc, name)\n\t\t\t\tif (name === defaultName)\n\t\t\t\t\topImportDefault = declare\n\t\t\t\telse\n\t\t\t\t\timportedDeclares.push(declare)\n\t\t\t}\n\t\t\timports.push(new Import(this.loc, path, importedDeclares, opImportDefault))\n\t\t}\n\n\tconst amd = amdWrapModule(this.doImports, imports, body)\n\n\treturn new Program(cat(\n\t\topIf(options.includeUseStrict(), () => UseStrict),\n\t\topIf(options.includeAmdefine(), () => AmdefineHeader),\n\t\ttoStatement(amd)))\n}\n\nfunction moduleBody(kind, lines) {\n\tswitch (kind) {\n\t\tcase Modules.Do: case Modules.Exports:\n\t\t\treturn tLines(lines)\n\t\tcase Modules.Val: {\n\t\t\tconst a = tLines(rtail(lines))\n\t\t\tconst b = t0(last(lines))\n\t\t\treturn cat(a, exportDefault(b))\n\t\t}\n\t\tcase Modules.Bag: case Modules.Map: {\n\t\t\tconst declare = kind === Modules.Bag ? DeclareBuiltBag : DeclareBuiltMap\n\t\t\treturn cat(declare, tLines(lines), exportDefault(IdBuilt))\n\t\t}\n\t\tdefault:\n\t\t\tthrow new Error(verifyResults.moduleKind)\n\t}\n}\n\nexport function exportNamedOrDefault(val, name) {\n\tif (name === options.moduleName())\n\t\treturn exportDefault(val)\n\telse\n\t\treturn exportNamed(val, name)\n}\n\nfunction exportNamed(val, name) {\n\treturn new AssignmentExpression('=', member(IdExports, name), val)\n}\nfunction exportDefault(val) {\n\treturn new AssignmentExpression('=', ExportsDefault, val)\n}\n\n\nfunction amdWrapModule(doImports, imports, body) {\n\tconst shouldImportBoot = options.importBoot()\n\n\tconst allImports = doImports.concat(imports)\n\tconst allImportPaths = allImports.map(_ => manglePath(_.path))\n\n\tconst arrImportPaths = new ArrayExpression(cat(\n\t\tLitStrExports,\n\t\topIf(shouldImportBoot, () => new Literal(options.bootPath())),\n\t\tallImportPaths.map(_ => new Literal(_))))\n\n\tconst importToIdentifier = new Map()\n\tconst importIdentifiers = []\n\tfor (let i = 0; i < allImports.length; i = i + 1) {\n\t\tconst _ = allImports[i]\n\t\tconst id = identifier(`${pathBaseName(_.path)}_${i}`)\n\t\timportIdentifiers.push(id)\n\t\timportToIdentifier.set(_, id)\n\t}\n\n\tconst importArgs = cat(IdExports, opIf(shouldImportBoot, () => IdBoot), importIdentifiers)\n\n\tconst doBoot = opIf(shouldImportBoot, () =>\n\t\tnew ExpressionStatement(msCall('getModule', IdBoot)))\n\n\tconst importDos = doImports.map(_ =>\n\t\tloc(new ExpressionStatement(msCall('getModule', importToIdentifier.get(_))), _.loc))\n\n\t// Extracts imported values from the modules.\n\tconst opDeclareImportedLocals = opIf(!isEmpty(imports),\n\t\t() => new VariableDeclaration('let',\n\t\t\tflatMap(imports, _ => importDeclarators(_, importToIdentifier.get(_)))))\n\n\tconst fullBody = new BlockStatement(cat(\n\t\tdoBoot, importDos, opDeclareImportedLocals, body, ReturnExports))\n\n\tconst lazyBody =\n\t\toptions.lazyModule() ?\n\t\t\tnew BlockStatement([new ExpressionStatement(\n\t\t\t\tnew AssignmentExpression('=', ExportsGet,\n\t\t\t\t\tmsCall('lazy', new ArrowFunctionExpression([], fullBody))))]) :\n\t\t\tfullBody\n\n\treturn new CallExpression(IdDefine,\n\t\t[arrImportPaths, new ArrowFunctionExpression(importArgs, lazyBody)])\n}\n\nfunction pathBaseName(path) {\n\treturn path.substr(path.lastIndexOf('/') + 1)\n}\n\nfunction importDeclarators({imported, opImportDefault}, moduleIdentifier) {\n\t// TODO: Could be neater about this\n\tconst isLazy = (isEmpty(imported) ? opImportDefault : imported[0]).isLazy()\n\tconst value = msCall(isLazy ? 'lazyGetModule' : 'getModule', moduleIdentifier)\n\n\tconst importedDefault = opMap(opImportDefault, def => {\n\t\tconst defexp = msCall('getDefaultExport', moduleIdentifier)\n\t\tconst val = isLazy ? lazyWrap(defexp) : defexp\n\t\treturn loc(new VariableDeclarator(idForDeclareCached(def), val), def.loc)\n\t})\n\n\tconst importedDestruct = isEmpty(imported) ? null :\n\t\tmakeDestructureDeclarators(imported, isLazy, value, true, false)\n\n\treturn cat(importedDefault, importedDestruct)\n}\n\nconst IdBoot = new Identifier('_boot')\nconst IdDefine = new Identifier('define')\nconst ExportsGet = member(IdExports, '_get')\nconst LitStrExports = new Literal('exports')\nconst ReturnExports = new ReturnStatement(IdExports)\nconst UseStrict = new ExpressionStatement(new Literal('use strict'))\n\n// if (typeof define !== 'function') var define = require('amdefine')(module)\nconst AmdefineHeader = new IfStatement(\n\tnew BinaryExpression('!==',\n\t\tnew UnaryExpression('typeof', IdDefine),\n\t\tnew Literal('function')),\n\tnew VariableDeclaration('var', [\n\t\tnew VariableDeclarator(IdDefine, new CallExpression(\n\t\t\tnew CallExpression(new Identifier('require'), [new Literal('amdefine')]),\n\t\t\t[new Identifier('module')]))]))\n"
  },
  {
    "__docId__": 664,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "transpileModule",
    "memberof": "src/private/transpile/transpileModule.js",
    "longname": "src/private/transpile/transpileModule.js~transpileModule",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/transpileModule.js",
    "importStyle": "transpileModule",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 665,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "moduleBody",
    "memberof": "src/private/transpile/transpileModule.js",
    "longname": "src/private/transpile/transpileModule.js~moduleBody",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpileModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "kind",
        "types": [
          "*"
        ]
      },
      {
        "name": "lines",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 666,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "exportNamedOrDefault",
    "memberof": "src/private/transpile/transpileModule.js",
    "longname": "src/private/transpile/transpileModule.js~exportNamedOrDefault",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/transpileModule.js",
    "importStyle": "{exportNamedOrDefault}",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 667,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "exportNamed",
    "memberof": "src/private/transpile/transpileModule.js",
    "longname": "src/private/transpile/transpileModule.js~exportNamed",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpileModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 668,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "exportDefault",
    "memberof": "src/private/transpile/transpileModule.js",
    "longname": "src/private/transpile/transpileModule.js~exportDefault",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpileModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 669,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "amdWrapModule",
    "memberof": "src/private/transpile/transpileModule.js",
    "longname": "src/private/transpile/transpileModule.js~amdWrapModule",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpileModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "doImports",
        "types": [
          "*"
        ]
      },
      {
        "name": "imports",
        "types": [
          "*"
        ]
      },
      {
        "name": "body",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 670,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "pathBaseName",
    "memberof": "src/private/transpile/transpileModule.js",
    "longname": "src/private/transpile/transpileModule.js~pathBaseName",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpileModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 671,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "importDeclarators",
    "memberof": "src/private/transpile/transpileModule.js",
    "longname": "src/private/transpile/transpileModule.js~importDeclarators",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpileModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"imported\": *, \"opImportDefault\": *}"
        ],
        "defaultRaw": {
          "imported": null,
          "opImportDefault": null
        },
        "defaultValue": "{\"imported\":null,\"opImportDefault\":null}"
      },
      {
        "name": "moduleIdentifier",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 672,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "IdBoot",
    "memberof": "src/private/transpile/transpileModule.js",
    "longname": "src/private/transpile/transpileModule.js~IdBoot",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpileModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "type": {
      "types": [
        "esast/dist/ast~Identifier"
      ]
    }
  },
  {
    "__docId__": 673,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "IdDefine",
    "memberof": "src/private/transpile/transpileModule.js",
    "longname": "src/private/transpile/transpileModule.js~IdDefine",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpileModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "type": {
      "types": [
        "esast/dist/ast~Identifier"
      ]
    }
  },
  {
    "__docId__": 674,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ExportsGet",
    "memberof": "src/private/transpile/transpileModule.js",
    "longname": "src/private/transpile/transpileModule.js~ExportsGet",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpileModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 675,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "LitStrExports",
    "memberof": "src/private/transpile/transpileModule.js",
    "longname": "src/private/transpile/transpileModule.js~LitStrExports",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpileModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "type": {
      "types": [
        "esast/dist/ast~Literal"
      ]
    }
  },
  {
    "__docId__": 676,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ReturnExports",
    "memberof": "src/private/transpile/transpileModule.js",
    "longname": "src/private/transpile/transpileModule.js~ReturnExports",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpileModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "type": {
      "types": [
        "esast/dist/ast~ReturnStatement"
      ]
    }
  },
  {
    "__docId__": 677,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "UseStrict",
    "memberof": "src/private/transpile/transpileModule.js",
    "longname": "src/private/transpile/transpileModule.js~UseStrict",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpileModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "type": {
      "types": [
        "esast/dist/ast~ExpressionStatement"
      ]
    }
  },
  {
    "__docId__": 678,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "AmdefineHeader",
    "memberof": "src/private/transpile/transpileModule.js",
    "longname": "src/private/transpile/transpileModule.js~AmdefineHeader",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/transpileModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "type": {
      "types": [
        "esast/dist/ast~IfStatement"
      ]
    }
  },
  {
    "__docId__": 679,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/transpile/util.js",
    "memberof": null,
    "longname": "src/private/transpile/util.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {ArrowFunctionExpression, BlockStatement, CallExpression, ExpressionStatement,\n\tFunctionExpression, Identifier, Literal, MemberExpression, NewExpression, ReturnStatement,\n\tThrowStatement, VariableDeclarator, VariableDeclaration, YieldExpression} from 'esast/dist/ast'\nimport mangleIdentifier from 'esast/dist/mangle-identifier'\nimport {loc, toStatement} from 'esast/dist/util'\nimport {member} from 'esast/dist/util'\nimport {options} from '../context'\nimport {Block, Funs, QuoteAbstract} from '../MsAst'\nimport {assert, cat, opIf, opMap, toArray} from '../util'\nimport {IdFocus, GlobalError} from './ast-constants'\nimport {funKind, getDestructuredId, verifyResults} from './context'\n\nexport function t0(expr) {\n\treturn loc(expr.transpile(), expr.loc)\n}\nexport function t1(expr, arg) {\n\treturn loc(expr.transpile(arg), expr.loc)\n}\nexport function t2(expr, arg, arg2) {\n\treturn loc(expr.transpile(arg, arg2))\n}\nexport function t3(expr, arg, arg2, arg3) {\n\treturn loc(expr.transpile(arg, arg2, arg3), expr.loc)\n}\nexport function tLines(exprs) {\n\tconst out = []\n\tfor (const expr of exprs) {\n\t\tconst ast = expr.transpile()\n\t\tif (ast instanceof Array)\n\t\t\t// Ignore produces 0 statements and Region produces many.\n\t\t\tfor (const _ of ast)\n\t\t\t\tout.push(toStatement(_))\n\t\telse\n\t\t\tout.push(loc(toStatement(ast), expr.loc))\n\t}\n\treturn out\n}\n\nexport function accessLocalDeclare(localDeclare) {\n\tconst id = idForDeclareCached(localDeclare)\n\treturn localDeclare.isLazy() ? msCall('unlazy', id) : new Identifier(id.name)\n}\n\nexport function declare(localDeclare, val) {\n\treturn new VariableDeclaration('let',\n\t\t[new VariableDeclarator(idForDeclareCached(localDeclare), val)])\n}\n\nconst declareToId = new WeakMap()\nexport function idForDeclareCached(localDeclare) {\n\tlet _ = declareToId.get(localDeclare)\n\tif (_ === undefined) {\n\t\t_ = new Identifier(mangleIdentifier(localDeclare.name))\n\t\tdeclareToId.set(localDeclare, _)\n\t}\n\treturn _\n}\n\nexport function opTypeCheckForLocalDeclare(localDeclare) {\n\t// TODO: Way to typecheck lazies\n\treturn opIf(!localDeclare.isLazy(), () =>\n\t\topMap(localDeclare.opType, type =>\n\t\t\tnew ExpressionStatement(msCall(\n\t\t\t\t'checkContains',\n\t\t\t\tt0(type),\n\t\t\t\taccessLocalDeclare(localDeclare),\n\t\t\t\tnew Literal(localDeclare.name)))))\n}\n\nexport function throwErrorFromString(message) {\n\t// TODO:ES6 Should be able to use IdError\n\treturn new ThrowStatement(\n\t\tnew NewExpression(new Identifier('Error'), [new Literal(message)]))\n}\n\nexport function makeDeclarator(assignee, value, valueIsAlreadyLazy) {\n\tconst {name, opType} = assignee\n\tconst isLazy = assignee.isLazy()\n\t// TODO: assert(assignee.opType === null)\n\t// or TODO: Allow type check on lazy value?\n\tvalue = isLazy ? value : maybeWrapInCheckContains(value, opType, name)\n\tconst val = isLazy && !valueIsAlreadyLazy ? lazyWrap(value) : value\n\tassert(isLazy || !valueIsAlreadyLazy)\n\treturn new VariableDeclarator(idForDeclareCached(assignee), val)\n}\n\nexport function maybeWrapInCheckContains(ast, opType, name) {\n\treturn options.includeChecks() && opType !== null ?\n\t\tmsCall('checkContains', t0(opType), ast, new Literal(name)) :\n\t\tast\n}\n\nexport function doThrow(thrown) {\n\treturn new ThrowStatement(thrown instanceof QuoteAbstract ?\n\t\tnew NewExpression(GlobalError, [t0(thrown)]) :\n\t\tt0(thrown))\n}\n\nexport function transpileName(name) {\n\treturn typeof name === 'string' ? new Literal(name) : t0(name)\n}\n\nexport function memberStringOrVal(object, memberName) {\n\treturn typeof memberName === 'string' ?\n\t\tmember(object, memberName) :\n\t\tnew MemberExpression(object, t0(memberName))\n}\n\nexport function lazyWrap(value) {\n\treturn msCall('lazy', new ArrowFunctionExpression([], value))\n}\n\nconst IdMs = new Identifier('_ms')\nexport function msCall(name, ...args) {\n\treturn new CallExpression(member(IdMs, name), args)\n}\n\nexport function msMember(name) {\n\treturn member(IdMs, name)\n}\n\nexport function makeDestructureDeclarators(assignees, isLazy, value, isModule) {\n\tconst id = getDestructuredId()\n\tconst destructuredName = `_$${id}`\n\tconst idDestructured = new Identifier(destructuredName)\n\tconst declarators = assignees.map(assignee => {\n\t\tconst get = getMember(idDestructured, assignee.name, isLazy, isModule)\n\t\treturn makeDeclarator(assignee, get, isLazy)\n\t})\n\t// Getting lazy module is done by ms.lazyGetModule.\n\tconst val = isLazy && !isModule ? lazyWrap(value) : value\n\treturn cat(new VariableDeclarator(idDestructured, val), declarators)\n}\nfunction getMember(astObject, gotName, isLazy, isModule) {\n\treturn isLazy ?\n\t\tmsCall('lazyProp', astObject, new Literal(gotName)) :\n\t\tisModule && options.includeChecks() ?\n\t\tmsCall('get', astObject, new Literal(gotName)) :\n\t\tmember(astObject, gotName)\n}\n\n/** Wraps a block (with `return` statements in it) in an IIFE. */\nexport function blockWrap(block) {\n\tconst thunk = funKind === Funs.Plain ?\n\t\tnew ArrowFunctionExpression([], block) :\n\t\tnew FunctionExpression(null, [], block, true)\n\treturn callPreservingFunKind(new CallExpression(thunk, []))\n}\n\n/** Create a focus fun returning `value` and call it on `calledOn`, preserving generator/async. */\nexport function callFocusFun(value, calledOn) {\n\tconst fun = funKind === Funs.Plain ?\n\t\tnew ArrowFunctionExpression([IdFocus], value) :\n\t\tnew FunctionExpression(\n\t\t\tnull, [IdFocus], new BlockStatement([new ReturnStatement(value)]), true)\n\treturn callPreservingFunKind(new CallExpression(fun, [calledOn]))\n}\n\n/**\nCall a function created by `blockWrap` or `callFocusFun`.\nThis looks like:\n\tFuns.Plain: `(_ => foo(_))(1)`.\n\tFuns.Generator, Funs.Async: `yield* function*(_) { return foo(_) }(1)`\n*/\nfunction callPreservingFunKind(call) {\n\treturn funKind === Funs.Plain ? call : new YieldExpression(call, true)\n}\n\nexport function blockWrapIfBlock(value) {\n\tconst ast = t0(value)\n\treturn value instanceof Block ? blockWrap(ast) : ast\n}\n\n/** Wraps a statement in an IIFE if its MsAst is a value. */\nexport function blockWrapIfVal(ast, statement) {\n\treturn verifyResults.isStatement(ast) ?\n\t\tstatement :\n\t\tblockWrap(new BlockStatement(toArray(statement)))\n}\n\nexport function focusFun(value) {\n\treturn new ArrowFunctionExpression([IdFocus], value)\n}\n"
  },
  {
    "__docId__": 680,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "t0",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~t0",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{t0}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "expr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 681,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "t1",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~t1",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{t1}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "expr",
        "types": [
          "*"
        ]
      },
      {
        "name": "arg",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 682,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "t2",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~t2",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{t2}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "expr",
        "types": [
          "*"
        ]
      },
      {
        "name": "arg",
        "types": [
          "*"
        ]
      },
      {
        "name": "arg2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 683,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "t3",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~t3",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{t3}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "expr",
        "types": [
          "*"
        ]
      },
      {
        "name": "arg",
        "types": [
          "*"
        ]
      },
      {
        "name": "arg2",
        "types": [
          "*"
        ]
      },
      {
        "name": "arg3",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 684,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "tLines",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~tLines",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{tLines}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "exprs",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 685,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "accessLocalDeclare",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~accessLocalDeclare",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{accessLocalDeclare}",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "localDeclare",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 686,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "declare",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~declare",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{declare}",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "localDeclare",
        "types": [
          "*"
        ]
      },
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 687,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "declareToId",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~declareToId",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "WeakMap"
      ]
    }
  },
  {
    "__docId__": 688,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "idForDeclareCached",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~idForDeclareCached",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{idForDeclareCached}",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "localDeclare",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 689,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "opTypeCheckForLocalDeclare",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~opTypeCheckForLocalDeclare",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{opTypeCheckForLocalDeclare}",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "localDeclare",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 690,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "throwErrorFromString",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~throwErrorFromString",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{throwErrorFromString}",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 691,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeDeclarator",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~makeDeclarator",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{makeDeclarator}",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "assignee",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "valueIsAlreadyLazy",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 692,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "maybeWrapInCheckContains",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~maybeWrapInCheckContains",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{maybeWrapInCheckContains}",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "ast",
        "types": [
          "*"
        ]
      },
      {
        "name": "opType",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 693,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "doThrow",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~doThrow",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{doThrow}",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "thrown",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 694,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "transpileName",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~transpileName",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{transpileName}",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 695,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "memberStringOrVal",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~memberStringOrVal",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{memberStringOrVal}",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "memberName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 696,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "lazyWrap",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~lazyWrap",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{lazyWrap}",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 697,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "IdMs",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~IdMs",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "esast/dist/ast~Identifier"
      ]
    }
  },
  {
    "__docId__": 698,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "msCall",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~msCall",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{msCall}",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 699,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "msMember",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~msMember",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{msMember}",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 700,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeDestructureDeclarators",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~makeDestructureDeclarators",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{makeDestructureDeclarators}",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [
      {
        "name": "assignees",
        "types": [
          "*"
        ]
      },
      {
        "name": "isLazy",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "isModule",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 701,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getMember",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~getMember",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [
      {
        "name": "astObject",
        "types": [
          "*"
        ]
      },
      {
        "name": "gotName",
        "types": [
          "*"
        ]
      },
      {
        "name": "isLazy",
        "types": [
          "*"
        ]
      },
      {
        "name": "isModule",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 702,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "blockWrap",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~blockWrap",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{blockWrap}",
    "description": "Wraps a block (with `return` statements in it) in an IIFE.",
    "lineNumber": 143,
    "params": [
      {
        "name": "block",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 703,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "callFocusFun",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~callFocusFun",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{callFocusFun}",
    "description": "Create a focus fun returning `value` and call it on `calledOn`, preserving generator/async.",
    "lineNumber": 151,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "calledOn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 704,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "callPreservingFunKind",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~callPreservingFunKind",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": null,
    "description": "Call a function created by `blockWrap` or `callFocusFun`.\nThis looks like:\nFuns.Plain: `(_ => foo(_))(1)`.\nFuns.Generator, Funs.Async: `yield* function*(_) { return foo(_) }(1)`",
    "lineNumber": 165,
    "params": [
      {
        "name": "call",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 705,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "blockWrapIfBlock",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~blockWrapIfBlock",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{blockWrapIfBlock}",
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 706,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "blockWrapIfVal",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~blockWrapIfVal",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{blockWrapIfVal}",
    "description": "Wraps a statement in an IIFE if its MsAst is a value.",
    "lineNumber": 175,
    "params": [
      {
        "name": "ast",
        "types": [
          "*"
        ]
      },
      {
        "name": "statement",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 707,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "focusFun",
    "memberof": "src/private/transpile/util.js",
    "longname": "src/private/transpile/util.js~focusFun",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/transpile/util.js",
    "importStyle": "{focusFun}",
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 708,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/util.js",
    "memberof": null,
    "longname": "src/private/util.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "/** Whether every element in `array` is equal. */\nexport function allSame(array, mapper) {\n\tif (isEmpty(array))\n\t\treturn true\n\tconst val = mapper(array[0])\n\tfor (let i = 1; i < array.length; i = i + 1)\n\t\tif (mapper(array[i]) !== val)\n\t\t\treturn false\n\treturn true\n}\n\n/**\nUsed to ensure that the compiler is programmed correctly.\nIf an assertion fails, it's a bug in mason-compile.\nFor errors in source code, see {@link check}.\n*/\nexport function assert(cond) {\n\tif (!cond)\n\t\tthrow new Error('Assertion failed.')\n}\n\n/**\nCombine many values into one array.\nArrays are flattened and nulls are skipped.\nSo `cat([1, 2], null, 3)` is `[1, 2, 3]`.\n*/\nexport function cat(...parts) {\n\tconst out = []\n\tfor (const _ of parts)\n\t\tif (_ instanceof Array)\n\t\t\tout.push(..._)\n\t\telse if (_ !== null)\n\t\t\tout.push(_)\n\treturn out\n}\n\n/**\nLike `Array.prototype.map` but `mapper` should return Arrays,\nwhich are flattened to a single Array.\n*/\nexport function flatMap(mapped, mapper) {\n\tconst out = []\n\tfor (let i = 0; i < mapped.length; i = i + 1)\n\t\tout.push(...mapper(mapped[i], i))\n\treturn out\n}\n\n/** Like `Array.prototype.map`, but if `opMapper` returns null, that entry is skipped. */\nexport function flatOpMap(array, opMapper) {\n\tconst out = []\n\tfor (const em of array) {\n\t\tconst _ = opMapper(em)\n\t\tif (_ !== null)\n\t\t\tout.push(_)\n\t}\n\treturn out\n}\n\n/** First element of an Array. */\nexport function head(array) {\n\tassert(!isEmpty(array))\n\treturn array[0]\n}\n\n/** Take a different action depending on whether `op` is null. */\nexport function ifElse(op, ifSome, ifNone) {\n\treturn op === null ? ifNone() : ifSome(op)\n}\n\n/**\nImplement a method `methodName` on many types at once.\n@param {object} types Object containing many types.\n@param {string} methodName\n@param {object} impls\n\tKeys are names of types in `types`.\n\tValues are implementations of the method.\n*/\nexport function implementMany(types, methodName, impls) {\n\tfor (const name in impls)\n\t\ttypes[name].prototype[methodName] = impls[name]\n}\n\n/** False iff there are any elements in the array. */\nexport function isEmpty(array) {\n\treturn array.length === 0\n}\n\n/** Element at the end of an Array. */\nexport function last(array) {\n\tassert(!isEmpty(array))\n\treturn array[array.length - 1]\n}\n\n/** Do `action` if `op` is not null. */\nexport function opEach(op, action) {\n\tif (op !== null)\n\t\taction(op)\n}\n\n/**\nCreate an optional value, which is `null` unless `cond`.\n@param {boolean} cond\n@param {Function} makeOp\n*/\nexport function opIf(cond, makeOp) {\n\treturn cond ? makeOp() : null\n}\n\n/** Call a function on an optional value, but only if it's not null. */\nexport function opMap(op, mapper) {\n\treturn op === null ? null : mapper(op)\n}\n\n/** If an optional value is `null`, replace it. */\nexport function opOr(op, or) {\n\treturn op === null ? or() : op\n}\n\n/** Iterate over an Array in reverse. */\nexport function* reverseIter(array) {\n\tfor (let i = array.length - 1; i >= 0; i = i - 1)\n\t\tyield array[i]\n}\n\n/** All but the last element of an Array. */\nexport function rtail(array) {\n\tassert(!isEmpty(array))\n\treturn array.slice(0, array.length - 1)\n}\n\n/** All but the first element of an Array. */\nexport function tail(array) {\n\tassert(!isEmpty(array))\n\treturn array.slice(1)\n}\n\n/** Wrap value in an Array if it's not already one. */\nexport function toArray(value) {\n\treturn value instanceof Array ? value : [value]\n}\n\n/** Asserts the type of a variable. */\nexport function type(instance, itsType) {\n\tif (!(Object(instance) instanceof itsType))\n\t\tthrow new Error(`${instance} is not a ${itsType.name}`)\n}\n"
  },
  {
    "__docId__": 709,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "allSame",
    "memberof": "src/private/util.js",
    "longname": "src/private/util.js~allSame",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/util.js",
    "importStyle": "{allSame}",
    "description": "Whether every element in `array` is equal.",
    "lineNumber": 2,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      },
      {
        "name": "mapper",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 710,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "assert",
    "memberof": "src/private/util.js",
    "longname": "src/private/util.js~assert",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/util.js",
    "importStyle": "{assert}",
    "description": "Used to ensure that the compiler is programmed correctly.\nIf an assertion fails, it's a bug in mason-compile.\nFor errors in source code, see {@link check}.",
    "lineNumber": 17,
    "params": [
      {
        "name": "cond",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 711,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cat",
    "memberof": "src/private/util.js",
    "longname": "src/private/util.js~cat",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/util.js",
    "importStyle": "{cat}",
    "description": "Combine many values into one array.\nArrays are flattened and nulls are skipped.\nSo `cat([1, 2], null, 3)` is `[1, 2, 3]`.",
    "lineNumber": 27,
    "params": [
      {
        "name": "parts",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 712,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "flatMap",
    "memberof": "src/private/util.js",
    "longname": "src/private/util.js~flatMap",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/util.js",
    "importStyle": "{flatMap}",
    "description": "Like `Array.prototype.map` but `mapper` should return Arrays,\nwhich are flattened to a single Array.",
    "lineNumber": 41,
    "params": [
      {
        "name": "mapped",
        "types": [
          "*"
        ]
      },
      {
        "name": "mapper",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 713,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "flatOpMap",
    "memberof": "src/private/util.js",
    "longname": "src/private/util.js~flatOpMap",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/util.js",
    "importStyle": "{flatOpMap}",
    "description": "Like `Array.prototype.map`, but if `opMapper` returns null, that entry is skipped.",
    "lineNumber": 49,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      },
      {
        "name": "opMapper",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 714,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "head",
    "memberof": "src/private/util.js",
    "longname": "src/private/util.js~head",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/util.js",
    "importStyle": "{head}",
    "description": "First element of an Array.",
    "lineNumber": 60,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 715,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ifElse",
    "memberof": "src/private/util.js",
    "longname": "src/private/util.js~ifElse",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/util.js",
    "importStyle": "{ifElse}",
    "description": "Take a different action depending on whether `op` is null.",
    "lineNumber": 66,
    "params": [
      {
        "name": "op",
        "types": [
          "*"
        ]
      },
      {
        "name": "ifSome",
        "types": [
          "*"
        ]
      },
      {
        "name": "ifNone",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 716,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "implementMany",
    "memberof": "src/private/util.js",
    "longname": "src/private/util.js~implementMany",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/util.js",
    "importStyle": "{implementMany}",
    "description": "Implement a method `methodName` on many types at once.",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "types",
        "description": "Object containing many types."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "methodName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "impls",
        "description": "Keys are names of types in `types`.\nValues are implementations of the method."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 717,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "isEmpty",
    "memberof": "src/private/util.js",
    "longname": "src/private/util.js~isEmpty",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/util.js",
    "importStyle": "{isEmpty}",
    "description": "False iff there are any elements in the array.",
    "lineNumber": 84,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 718,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "last",
    "memberof": "src/private/util.js",
    "longname": "src/private/util.js~last",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/util.js",
    "importStyle": "{last}",
    "description": "Element at the end of an Array.",
    "lineNumber": 89,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 719,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "opEach",
    "memberof": "src/private/util.js",
    "longname": "src/private/util.js~opEach",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/util.js",
    "importStyle": "{opEach}",
    "description": "Do `action` if `op` is not null.",
    "lineNumber": 95,
    "params": [
      {
        "name": "op",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 720,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "opIf",
    "memberof": "src/private/util.js",
    "longname": "src/private/util.js~opIf",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/util.js",
    "importStyle": "{opIf}",
    "description": "Create an optional value, which is `null` unless `cond`.",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "cond",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "makeOp",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 721,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "opMap",
    "memberof": "src/private/util.js",
    "longname": "src/private/util.js~opMap",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/util.js",
    "importStyle": "{opMap}",
    "description": "Call a function on an optional value, but only if it's not null.",
    "lineNumber": 110,
    "params": [
      {
        "name": "op",
        "types": [
          "*"
        ]
      },
      {
        "name": "mapper",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 722,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "opOr",
    "memberof": "src/private/util.js",
    "longname": "src/private/util.js~opOr",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/util.js",
    "importStyle": "{opOr}",
    "description": "If an optional value is `null`, replace it.",
    "lineNumber": 115,
    "params": [
      {
        "name": "op",
        "types": [
          "*"
        ]
      },
      {
        "name": "or",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 723,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "reverseIter",
    "memberof": "src/private/util.js",
    "longname": "src/private/util.js~reverseIter",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/util.js",
    "importStyle": "{reverseIter}",
    "description": "Iterate over an Array in reverse.",
    "lineNumber": 120,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ],
    "generator": true
  },
  {
    "__docId__": 724,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "rtail",
    "memberof": "src/private/util.js",
    "longname": "src/private/util.js~rtail",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/util.js",
    "importStyle": "{rtail}",
    "description": "All but the last element of an Array.",
    "lineNumber": 126,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 725,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "tail",
    "memberof": "src/private/util.js",
    "longname": "src/private/util.js~tail",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/util.js",
    "importStyle": "{tail}",
    "description": "All but the first element of an Array.",
    "lineNumber": 132,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 726,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "toArray",
    "memberof": "src/private/util.js",
    "longname": "src/private/util.js~toArray",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/util.js",
    "importStyle": "{toArray}",
    "description": "Wrap value in an Array if it's not already one.",
    "lineNumber": 138,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 727,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "type",
    "memberof": "src/private/util.js",
    "longname": "src/private/util.js~type",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/util.js",
    "importStyle": "{type}",
    "description": "Asserts the type of a variable.",
    "lineNumber": 143,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      },
      {
        "name": "itsType",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 728,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/verify/SK.js",
    "memberof": null,
    "longname": "src/private/verify/SK.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {check, warn} from '../context'\nimport * as MsAstTypes from '../MsAst'\nimport {Keywords, showKeyword} from '../Token'\nimport {cat, ifElse, implementMany, isEmpty, last, opOr} from '../util'\nimport {Blocks} from '../VerifyResults'\nimport autoBlockKind from './autoBlockKind'\nimport {results} from './context'\n\nconst SK = {\n\t/** Must be a statement. */\n\tDo: 0,\n\t/** Must be an expression. */\n\tVal: 1\n}\n/** Statement Kind. */\nexport default SK\n\n/** This MsAst must be a statement. */\nexport function checkDo(_, sk) {\n\tcheck(sk === SK.Do, _.loc,\n\t\t'This can only be used as a statement, but appears in expression context.')\n}\n\n/** This MsAst must be a value. */\nexport function checkVal(_, sk) {\n\tif (sk === SK.Do)\n\t\twarn(_.loc, 'Value appears in statement context, so it does nothing.')\n}\n\n/**\nThis is an MsAst that is sometimes a statement, sometimes an expression.\nMark it using `sk` so that it can transpile correctly.\n*/\nexport function markStatement(_, sk) {\n\tif (sk === SK.Do)\n\t\tresults.statements.add(_)\n}\n\n/**\nInfers whether the last line of a module is a statement or a value.\nPrefers to make it a value, such as in the case of a Call.\n*/\nexport function getSK(_) {\n\treturn opOr(_.opSK(), () => SK.Val)\n}\n\n// `null` means can't determine whether this must be a statement or value.\nimplementMany(MsAstTypes, 'opSK', {\n\tDo() { return SK.Do },\n\tVal() { return SK.Val },\n\tCall() { return null },\n\tYield() { return null },\n\tYieldTo() { return null },\n\tBlock() {\n\t\treturn autoBlockKind(this.lines, this.loc) === Blocks.Return ?\n\t\t\tisEmpty(this.lines) ? SK.Do : last(this.lines).opSK() :\n\t\t\tSK.Val\n\t},\n\tConditional() { return this.result.opSK() },\n\tExcept() {\n\t\tconst catches = this.allCatches.map(_ => _.block)\n\t\t// If there's opElse, `try` is always SK.Do and `else` may be SK.Val.\n\t\tconst parts = ifElse(this.opElse, _ => cat(_, catches), () => cat(this.try, catches))\n\t\t// opFinally is always SK.Do.\n\t\treturn compositeSK(this.loc, parts)\n\t},\n\tFor() {\n\t\t// If opForSK is null, there are no breaks, so this is an infinite loop.\n\t\treturn opOr(this.block.opForSK(), () => SK.Do)\n\t},\n\tCase: caseSwitchSK,\n\tSwitch: caseSwitchSK\n})\n\nfunction caseSwitchSK() {\n\treturn compositeSK(this.loc, caseSwitchParts(this))\n}\n\nimplementMany(MsAstTypes, 'opForSK',{\n\tdefault() { return null },\n\tBreak() {\n\t\treturn this.opValue === null ? SK.Do : SK.Val\n\t},\n\tBlock() { return isEmpty(this.lines) ? null : composite(this.loc, 'opForSK', this.lines) },\n\tConditional() { return this.result.opForSK() },\n\tCase: caseSwitchForSK,\n\tExcept() {\n\t\tconst catches = this.allCatches.map(_ => _.block)\n\t\t// Do look at opFinally for break statements.\n\t\treturn compositeForSK(this.loc, cat(this.try, catches, this.opElse, this.opFinally))\n\t},\n\tSwitch: caseSwitchForSK\n})\n\nfunction caseSwitchForSK() {\n\treturn compositeForSK(this.loc, caseSwitchParts(this))\n}\n\nfunction caseSwitchParts(_) {\n\treturn cat(_.parts.map(_ => _.result), _.opElse)\n}\n\nfunction compositeSK(loc, parts) {\n\treturn composite(loc, 'opSK', parts,\n\t\t'Can\\'t tell if this is a statement. Some parts are statements but others are values.')\n}\n\n/**\nThis handles the rare case where a 'for' loop is the last line of a module.\nThe error occurs if it looks like:\n\n\tfor\n\t\tswitch 0\n\t\t\t0\n\t\t\t\tbreak 1\n\t\t\telse\n\t\t\t\tbreak\n\nMeaning that it can't be determined whether it's a statement or value.\n*/\nfunction compositeForSK(loc, parts) {\n\treturn composite(loc, 'opForSK', parts, () =>\n\t\t`Can't tell if ${showKeyword(Keywords.For)} is a statement. ` +\n\t\t`Some ${showKeyword(Keywords.Break)}s have a value, others don't.`)\n}\n\nfunction composite(loc, method, parts, errorMessage) {\n\tlet sk = parts[0][method]()\n\tfor (let i = 1; i < parts.length; i = i + 1) {\n\t\tconst otherSK = parts[i][method]()\n\t\tif (sk === null)\n\t\t\tsk = otherSK\n\t\telse\n\t\t\tcheck(otherSK === null || otherSK === sk, loc, errorMessage)\n\t}\n\treturn sk\n}\n"
  },
  {
    "__docId__": 729,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "checkDo",
    "memberof": "src/private/verify/SK.js",
    "longname": "src/private/verify/SK.js~checkDo",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/SK.js",
    "importStyle": "{checkDo}",
    "description": "This MsAst must be a statement.",
    "lineNumber": 19,
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      },
      {
        "name": "sk",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 730,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "checkVal",
    "memberof": "src/private/verify/SK.js",
    "longname": "src/private/verify/SK.js~checkVal",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/SK.js",
    "importStyle": "{checkVal}",
    "description": "This MsAst must be a value.",
    "lineNumber": 25,
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      },
      {
        "name": "sk",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 731,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "markStatement",
    "memberof": "src/private/verify/SK.js",
    "longname": "src/private/verify/SK.js~markStatement",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/SK.js",
    "importStyle": "{markStatement}",
    "description": "This is an MsAst that is sometimes a statement, sometimes an expression.\nMark it using `sk` so that it can transpile correctly.",
    "lineNumber": 34,
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      },
      {
        "name": "sk",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 732,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getSK",
    "memberof": "src/private/verify/SK.js",
    "longname": "src/private/verify/SK.js~getSK",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/SK.js",
    "importStyle": "{getSK}",
    "description": "Infers whether the last line of a module is a statement or a value.\nPrefers to make it a value, such as in the case of a Call.",
    "lineNumber": 43,
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 733,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "caseSwitchSK",
    "memberof": "src/private/verify/SK.js",
    "longname": "src/private/verify/SK.js~caseSwitchSK",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/verify/SK.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 734,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "caseSwitchForSK",
    "memberof": "src/private/verify/SK.js",
    "longname": "src/private/verify/SK.js~caseSwitchForSK",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/verify/SK.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 735,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "caseSwitchParts",
    "memberof": "src/private/verify/SK.js",
    "longname": "src/private/verify/SK.js~caseSwitchParts",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/verify/SK.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 736,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "compositeSK",
    "memberof": "src/private/verify/SK.js",
    "longname": "src/private/verify/SK.js~compositeSK",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/verify/SK.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "parts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 737,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "compositeForSK",
    "memberof": "src/private/verify/SK.js",
    "longname": "src/private/verify/SK.js~compositeForSK",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/verify/SK.js",
    "importStyle": null,
    "description": "This handles the rare case where a 'for' loop is the last line of a module.\nThe error occurs if it looks like:\nfor\nswitch 0\n0\nbreak 1\nelse\nbreak\nMeaning that it can't be determined whether it's a statement or value.",
    "lineNumber": 121,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "parts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 738,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "composite",
    "memberof": "src/private/verify/SK.js",
    "longname": "src/private/verify/SK.js~composite",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/verify/SK.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "method",
        "types": [
          "*"
        ]
      },
      {
        "name": "parts",
        "types": [
          "*"
        ]
      },
      {
        "name": "errorMessage",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 739,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SK",
    "memberof": "src/private/verify/SK.js",
    "longname": "src/private/verify/SK.js~SK",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/SK.js",
    "importStyle": "SK",
    "description": "Statement Kind.",
    "lineNumber": 9,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 740,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/verify/autoBlockKind.js",
    "memberof": null,
    "longname": "src/private/verify/autoBlockKind.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {check} from '../context'\nimport {BagEntry, MapEntry, ObjEntry, Throw} from '../MsAst'\nimport {isEmpty, last, opOr} from '../util'\nimport {Blocks} from '../VerifyResults'\n\nexport default function autoBlockKind(lines, loc) {\n\treturn opOr(opBlockBuildKind(lines, loc), () =>\n\t\t!isEmpty(lines) && last(lines) instanceof Throw ? Blocks.Throw : Blocks.Return)\n}\n\nexport function opBlockBuildKind(lines, loc) {\n\tlet isBag = false, isMap = false, isObj = false\n\tfor (const line of lines) {\n\t\tif (line instanceof BagEntry)\n\t\t\tisBag = true\n\t\telse if (line instanceof MapEntry)\n\t\t\tisMap = true\n\t\telse if (line instanceof ObjEntry)\n\t\t\tisObj = true\n\t}\n\n\tcheck(!(isBag && isMap) && !(isMap && isObj) && !(isBag && isObj), loc,\n\t\t'Block has mixed bag/map/obj entries — can not infer type.')\n\n\treturn isBag ? Blocks.Bag : isMap ? Blocks.Map : isObj ? Blocks.Obj : null\n}\n"
  },
  {
    "__docId__": 741,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "autoBlockKind",
    "memberof": "src/private/verify/autoBlockKind.js",
    "longname": "src/private/verify/autoBlockKind.js~autoBlockKind",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/autoBlockKind.js",
    "importStyle": "autoBlockKind",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "lines",
        "types": [
          "*"
        ]
      },
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 742,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "opBlockBuildKind",
    "memberof": "src/private/verify/autoBlockKind.js",
    "longname": "src/private/verify/autoBlockKind.js~opBlockBuildKind",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/autoBlockKind.js",
    "importStyle": "{opBlockBuildKind}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "lines",
        "types": [
          "*"
        ]
      },
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 743,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/verify/context.js",
    "memberof": null,
    "longname": "src/private/verify/context.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Funs} from '../MsAst'\nimport VerifyResults from '../VerifyResults'\nimport {withBlockLocals} from './locals'\nimport SK from './SK'\n\n/** Map from names to LocalDeclares. */\nexport let locals\n/** Locals that don't have to be accessed. */\nexport let okToNotUse\nexport let opLoop\n/**\nLocals for this block.\nThese are added to locals when entering a Function or lazy evaluation.\nIn:\n\ta = |\n\t\tb\n\tb = 1\n`b` will be a pending local.\nHowever:\n\ta = b\n\tb = 1\nwill fail to verify, because `b` comes after `a` and is not accessed inside a function.\nIt would work for `~a is b`, though.\n*/\nexport let pendingBlockLocals\n/**\nKind of function we are currently in.\n(Funs.Plain if not in a function.)\n*/\nexport let funKind\n/** Current method we are in, or a Constructor, or null. */\nexport let method\n/** @type {VerifyResults} */\nexport let results\n/** Name of the closest AssignSingle. */\nexport let name\n\nexport function setup() {\n\tlocals = new Map()\n\tpendingBlockLocals = []\n\tfunKind = Funs.Plain\n\tokToNotUse = new Set()\n\topLoop = null\n\tmethod = null\n\tresults = new VerifyResults()\n}\n\n// Release for garbage collection.\nexport function tearDown() {\n\tlocals = okToNotUse = opLoop = pendingBlockLocals = method = results = null\n}\n\nexport function withInFunKind(newFunKind, action) {\n\tconst oldFunKind = funKind\n\tfunKind = newFunKind\n\taction()\n\tfunKind = oldFunKind\n}\n\nexport function withLoop(newLoop, action) {\n\tconst oldLoop = opLoop\n\topLoop = newLoop\n\taction()\n\topLoop = oldLoop\n}\n\nexport function withMethod(newMethod, action) {\n\tconst oldMethod = method\n\tmethod = newMethod\n\taction()\n\tmethod = oldMethod\n}\n\nexport function withName(newName, action) {\n\tconst oldName = name\n\tname = newName\n\taction()\n\tname = oldName\n}\n\n/** Can't break out of loop inside of IIFE. */\nexport function withIife(action) {\n\twithLoop(null, action)\n}\n\nexport function withIifeIf(cond, action) {\n\tif (cond)\n\t\twithIife(action)\n\telse\n\t\taction()\n}\n\n/** The value form of some expressions need to be wrapped in an IIFE. */\nexport function withIifeIfVal(sk, action) {\n\twithIifeIf(sk === SK.Val, action)\n}\n\n// TODO:ES6 Shouldn't need this\nexport function setPendingBlockLocals(val) {\n\tpendingBlockLocals = val\n}\n\nexport function withFun(funKind, action) {\n\twithBlockLocals(() => {\n\t\twithInFunKind(funKind, () => {\n\t\t\twithIife(action)\n\t\t})\n\t})\n}\n"
  },
  {
    "__docId__": 744,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "setup",
    "memberof": "src/private/verify/context.js",
    "longname": "src/private/verify/context.js~setup",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/context.js",
    "importStyle": "{setup}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 745,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "tearDown",
    "memberof": "src/private/verify/context.js",
    "longname": "src/private/verify/context.js~tearDown",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/context.js",
    "importStyle": "{tearDown}",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 746,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "withInFunKind",
    "memberof": "src/private/verify/context.js",
    "longname": "src/private/verify/context.js~withInFunKind",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/context.js",
    "importStyle": "{withInFunKind}",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "newFunKind",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 747,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "withLoop",
    "memberof": "src/private/verify/context.js",
    "longname": "src/private/verify/context.js~withLoop",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/context.js",
    "importStyle": "{withLoop}",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "newLoop",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 748,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "withMethod",
    "memberof": "src/private/verify/context.js",
    "longname": "src/private/verify/context.js~withMethod",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/context.js",
    "importStyle": "{withMethod}",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "newMethod",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 749,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "withName",
    "memberof": "src/private/verify/context.js",
    "longname": "src/private/verify/context.js~withName",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/context.js",
    "importStyle": "{withName}",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "newName",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 750,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "withIife",
    "memberof": "src/private/verify/context.js",
    "longname": "src/private/verify/context.js~withIife",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/context.js",
    "importStyle": "{withIife}",
    "description": "Can't break out of loop inside of IIFE.",
    "lineNumber": 82,
    "params": [
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 751,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "withIifeIf",
    "memberof": "src/private/verify/context.js",
    "longname": "src/private/verify/context.js~withIifeIf",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/context.js",
    "importStyle": "{withIifeIf}",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "cond",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 752,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "withIifeIfVal",
    "memberof": "src/private/verify/context.js",
    "longname": "src/private/verify/context.js~withIifeIfVal",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/context.js",
    "importStyle": "{withIifeIfVal}",
    "description": "The value form of some expressions need to be wrapped in an IIFE.",
    "lineNumber": 94,
    "params": [
      {
        "name": "sk",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 753,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "setPendingBlockLocals",
    "memberof": "src/private/verify/context.js",
    "longname": "src/private/verify/context.js~setPendingBlockLocals",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/context.js",
    "importStyle": "{setPendingBlockLocals}",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 754,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "withFun",
    "memberof": "src/private/verify/context.js",
    "longname": "src/private/verify/context.js~withFun",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/context.js",
    "importStyle": "{withFun}",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "funKind",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 755,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/verify/locals.js",
    "memberof": null,
    "longname": "src/private/verify/locals.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {code} from '../../CompileError'\nimport {check, fail, warn} from '../context'\nimport {isEmpty} from '../util'\nimport {locals, okToNotUse, results, pendingBlockLocals, setPendingBlockLocals} from './context'\n\nexport function deleteLocal(localDeclare) {\n\tlocals.delete(localDeclare.name)\n}\n\nexport function setLocal(localDeclare) {\n\tlocals.set(localDeclare.name, localDeclare)\n}\n\nexport function accessLocal(access, name) {\n\tconst declare = getLocalDeclare(name, access.loc)\n\tsetDeclareAccessed(declare, access)\n}\n\nexport function setDeclareAccessed(declare, access) {\n\tresults.localDeclareToAccesses.get(declare).push(access)\n}\n\n// For expressions affecting lineNewLocals, they will be registered before being verified.\n// So, LocalDeclare.verify just the type.\n// For locals not affecting lineNewLocals, use this instead of just declare.verify()\nexport function verifyLocalDeclare(localDeclare) {\n\tregisterLocal(localDeclare)\n\tlocalDeclare.verify()\n}\n\nexport function registerLocal(localDeclare) {\n\tresults.localDeclareToAccesses.set(localDeclare, [])\n}\n\nexport function registerAndPlusLocal(localDeclare, action) {\n\tregisterLocal(localDeclare)\n\tplusLocal(localDeclare, action)\n}\n\nexport function plusLocal(addedLocal, action) {\n\tconst shadowed = locals.get(addedLocal.name)\n\tlocals.set(addedLocal.name, addedLocal)\n\taction()\n\tif (shadowed === undefined)\n\t\tdeleteLocal(addedLocal)\n\telse\n\t\tsetLocal(shadowed)\n}\n\n// Should have verified that addedLocals all have different names.\nexport function plusLocals(addedLocals, action) {\n\tconst shadowedLocals = []\n\tfor (const _ of addedLocals) {\n\t\tconst shadowed = locals.get(_.name)\n\t\tif (shadowed !== undefined)\n\t\t\tshadowedLocals.push(shadowed)\n\t\tsetLocal(_)\n\t}\n\n\taction()\n\n\taddedLocals.forEach(deleteLocal)\n\tshadowedLocals.forEach(setLocal)\n}\n\nexport function verifyAndPlusLocal(addedLocal, action) {\n\tverifyLocalDeclare(addedLocal)\n\tplusLocal(addedLocal, action)\n}\n\nexport function verifyAndPlusLocals(addedLocals, action) {\n\taddedLocals.forEach(verifyLocalDeclare)\n\tconst names = new Set()\n\tfor (const _ of addedLocals) {\n\t\tcheck(!names.has(_.name), _.loc, () => `Duplicate local ${code(_.name)}`)\n\t\tnames.add(_.name)\n\t}\n\tplusLocals(addedLocals, action)\n}\n\nexport function withBlockLocals(action) {\n\tconst oldPendingBlockLocals = pendingBlockLocals\n\tsetPendingBlockLocals([])\n\tplusLocals(oldPendingBlockLocals, action)\n\tsetPendingBlockLocals(oldPendingBlockLocals)\n}\n\nfunction getLocalDeclare(name, accessLoc) {\n\tconst declare = locals.get(name)\n\tif (declare === undefined)\n\t\tfailMissingLocal(accessLoc, name)\n\treturn declare\n}\n\nexport function failMissingLocal(loc, name) {\n\tconst showLocals = code(Array.from(locals.keys()).join(' '))\n\tfail(loc, `No such local ${code(name)}.\\nLocals are:\\n${showLocals}.`)\n}\n\nexport function warnUnusedLocals() {\n\tfor (const [local, accesses] of results.localDeclareToAccesses)\n\t\tif (isEmpty(accesses) && local.name !== 'built' && !okToNotUse.has(local))\n\t\t\twarn(local.loc, `Unused local variable ${code(local.name)}.`)\n}\n"
  },
  {
    "__docId__": 756,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "deleteLocal",
    "memberof": "src/private/verify/locals.js",
    "longname": "src/private/verify/locals.js~deleteLocal",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/locals.js",
    "importStyle": "{deleteLocal}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "localDeclare",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 757,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "setLocal",
    "memberof": "src/private/verify/locals.js",
    "longname": "src/private/verify/locals.js~setLocal",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/locals.js",
    "importStyle": "{setLocal}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "localDeclare",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 758,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "accessLocal",
    "memberof": "src/private/verify/locals.js",
    "longname": "src/private/verify/locals.js~accessLocal",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/locals.js",
    "importStyle": "{accessLocal}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "access",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 759,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "setDeclareAccessed",
    "memberof": "src/private/verify/locals.js",
    "longname": "src/private/verify/locals.js~setDeclareAccessed",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/locals.js",
    "importStyle": "{setDeclareAccessed}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "declare",
        "types": [
          "*"
        ]
      },
      {
        "name": "access",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 760,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "verifyLocalDeclare",
    "memberof": "src/private/verify/locals.js",
    "longname": "src/private/verify/locals.js~verifyLocalDeclare",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/locals.js",
    "importStyle": "{verifyLocalDeclare}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "localDeclare",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 761,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "registerLocal",
    "memberof": "src/private/verify/locals.js",
    "longname": "src/private/verify/locals.js~registerLocal",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/locals.js",
    "importStyle": "{registerLocal}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "localDeclare",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 762,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "registerAndPlusLocal",
    "memberof": "src/private/verify/locals.js",
    "longname": "src/private/verify/locals.js~registerAndPlusLocal",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/locals.js",
    "importStyle": "{registerAndPlusLocal}",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "localDeclare",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 763,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "plusLocal",
    "memberof": "src/private/verify/locals.js",
    "longname": "src/private/verify/locals.js~plusLocal",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/locals.js",
    "importStyle": "{plusLocal}",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "addedLocal",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 764,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "plusLocals",
    "memberof": "src/private/verify/locals.js",
    "longname": "src/private/verify/locals.js~plusLocals",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/locals.js",
    "importStyle": "{plusLocals}",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "addedLocals",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 765,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "verifyAndPlusLocal",
    "memberof": "src/private/verify/locals.js",
    "longname": "src/private/verify/locals.js~verifyAndPlusLocal",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/locals.js",
    "importStyle": "{verifyAndPlusLocal}",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "addedLocal",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 766,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "verifyAndPlusLocals",
    "memberof": "src/private/verify/locals.js",
    "longname": "src/private/verify/locals.js~verifyAndPlusLocals",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/locals.js",
    "importStyle": "{verifyAndPlusLocals}",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "addedLocals",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 767,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "withBlockLocals",
    "memberof": "src/private/verify/locals.js",
    "longname": "src/private/verify/locals.js~withBlockLocals",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/locals.js",
    "importStyle": "{withBlockLocals}",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 768,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getLocalDeclare",
    "memberof": "src/private/verify/locals.js",
    "longname": "src/private/verify/locals.js~getLocalDeclare",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/verify/locals.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "accessLoc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 769,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "failMissingLocal",
    "memberof": "src/private/verify/locals.js",
    "longname": "src/private/verify/locals.js~failMissingLocal",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/locals.js",
    "importStyle": "{failMissingLocal}",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 770,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "warnUnusedLocals",
    "memberof": "src/private/verify/locals.js",
    "longname": "src/private/verify/locals.js~warnUnusedLocals",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/locals.js",
    "importStyle": "{warnUnusedLocals}",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 771,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/verify/util.js",
    "memberof": null,
    "longname": "src/private/verify/util.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {check} from '../context'\nimport {name, okToNotUse, results} from './context'\nimport SK from './SK'\n\n/** Mark a LocalDeclare as OK to not use. */\nexport function makeUseOptional(localDeclare) {\n\tokToNotUse.add(localDeclare)\n}\n\n/**\nFor Asts that use the focus by default, make it OK to not use the variable when it's the focus.\n(If the user specified a name, they intended to use it.)\n*/\nexport function makeUseOptionalIfFocus(localDeclare) {\n\tif (localDeclare.name === '_')\n\t\tmakeUseOptional(localDeclare)\n}\n\n/**\nVerify each of asts.\n@param {Array<MsAst>} asts\n@param {SK} [sk] Optional SK of each ast.\n*/\nexport function verifyEach(asts, sk) {\n\tfor (const _ of asts)\n\t\t_.verify(sk)\n}\n\n/**\nVerify opAst if it exists.\n@param {?MsAst} opAst\n@param [arg] Argument to pass to _.verify. Usually an {@link SK}.\n*/\nexport function verifyOp(opAst, arg) {\n\tif (opAst !== null)\n\t\topAst.verify(arg)\n}\n\n/** Verify if it's not a string. */\nexport function verifyName(_) {\n\tif (typeof _ !== 'string')\n\t\t_.verify(SK.Val)\n}\n\nexport function setName(expr) {\n\tresults.names.set(expr, name)\n}\n\nexport function verifyNotLazy(localDeclare, message) {\n\tcheck(!localDeclare.isLazy(), localDeclare.loc, message)\n}\n"
  },
  {
    "__docId__": 772,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeUseOptional",
    "memberof": "src/private/verify/util.js",
    "longname": "src/private/verify/util.js~makeUseOptional",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/util.js",
    "importStyle": "{makeUseOptional}",
    "description": "Mark a LocalDeclare as OK to not use.",
    "lineNumber": 6,
    "params": [
      {
        "name": "localDeclare",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 773,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeUseOptionalIfFocus",
    "memberof": "src/private/verify/util.js",
    "longname": "src/private/verify/util.js~makeUseOptionalIfFocus",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/util.js",
    "importStyle": "{makeUseOptionalIfFocus}",
    "description": "For Asts that use the focus by default, make it OK to not use the variable when it's the focus.\n(If the user specified a name, they intended to use it.)",
    "lineNumber": 14,
    "params": [
      {
        "name": "localDeclare",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 774,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "verifyEach",
    "memberof": "src/private/verify/util.js",
    "longname": "src/private/verify/util.js~verifyEach",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/util.js",
    "importStyle": "{verifyEach}",
    "description": "Verify each of asts.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<MsAst>"
        ],
        "spread": false,
        "optional": false,
        "name": "asts",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "SK"
        ],
        "spread": false,
        "optional": true,
        "name": "sk",
        "description": "Optional SK of each ast."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 775,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "verifyOp",
    "memberof": "src/private/verify/util.js",
    "longname": "src/private/verify/util.js~verifyOp",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/util.js",
    "importStyle": "{verifyOp}",
    "description": "Verify opAst if it exists.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": true,
        "types": [
          "MsAst"
        ],
        "spread": false,
        "optional": false,
        "name": "opAst",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "arg",
        "description": "Argument to pass to _.verify. Usually an {@link SK}."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 776,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "verifyName",
    "memberof": "src/private/verify/util.js",
    "longname": "src/private/verify/util.js~verifyName",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/util.js",
    "importStyle": "{verifyName}",
    "description": "Verify if it's not a string.",
    "lineNumber": 40,
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 777,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "setName",
    "memberof": "src/private/verify/util.js",
    "longname": "src/private/verify/util.js~setName",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/util.js",
    "importStyle": "{setName}",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "expr",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 778,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "verifyNotLazy",
    "memberof": "src/private/verify/util.js",
    "longname": "src/private/verify/util.js~verifyNotLazy",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/util.js",
    "importStyle": "{verifyNotLazy}",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "localDeclare",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 779,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/verify/verify.js",
    "memberof": null,
    "longname": "src/private/verify/verify.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {code} from '../../CompileError'\nimport {check, options, warn} from '../context'\nimport * as MsAstTypes from '../MsAst'\nimport {Block, Class, Constructor, Fun, Funs, Kind, LocalDeclare, Method, Pattern} from '../MsAst'\nimport {Keywords, showKeyword} from '../Token'\nimport {cat, ifElse, implementMany, isEmpty, opEach} from '../util'\nimport {funKind, locals, method, opLoop, results, setup, tearDown, withFun, withIife, withIifeIf,\n\twithIifeIfVal, withInFunKind, withMethod, withLoop, withName} from './context'\nimport {accessLocal, failMissingLocal, plusLocals, registerAndPlusLocal, setDeclareAccessed,\n\tsetLocal, verifyAndPlusLocal, verifyAndPlusLocals, verifyLocalDeclare, warnUnusedLocals,\n\twithBlockLocals} from './locals'\nimport SK, {checkDo, checkVal, getSK, markStatement} from './SK'\nimport {makeUseOptional, makeUseOptionalIfFocus, setName, verifyEach, verifyName, verifyNotLazy,\n\tverifyOp} from './util'\nimport verifyBlock, {verifyDoBlock, verifyModuleLines} from './verifyBlock'\n\n/**\nGenerates information needed during transpiling, the VerifyResults.\nAlso checks for existence of local variables and warns for unused locals.\n@param {MsAst} msAst\n*/\nexport default function verify(msAst) {\n\tsetup()\n\tmsAst.verify()\n\twarnUnusedLocals()\n\tconst res = results\n\ttearDown()\n\treturn res\n}\n\nimplementMany(MsAstTypes, 'verify', {\n\tAssert(sk) {\n\t\tcheckDo(this, sk)\n\t\tthis.condition.verify(SK.Val)\n\t\tverifyOp(this.opThrown, SK.Val)\n\t},\n\n\tAssignSingle(sk) {\n\t\tcheckDo(this, sk)\n\t\twithName(this.assignee.name, () => {\n\t\t\tconst doV = () => {\n\t\t\t\t/*\n\t\t\t\tFun and Class only get name if they are immediately after the assignment.\n\t\t\t\tso in `x = $after-time 1000 |` the function is not named.\n\t\t\t\t*/\n\t\t\t\tif (this.value instanceof Class ||\n\t\t\t\t\tthis.value instanceof Fun ||\n\t\t\t\t\tthis.value instanceof Method ||\n\t\t\t\t\tthis.value instanceof Kind)\n\t\t\t\t\tsetName(this.value)\n\n\t\t\t\t// Assignee registered by verifyLines.\n\t\t\t\tthis.assignee.verify()\n\t\t\t\tthis.value.verify(SK.Val)\n\t\t\t}\n\t\t\tif (this.assignee.isLazy())\n\t\t\t\twithBlockLocals(doV)\n\t\t\telse\n\t\t\t\tdoV()\n\t\t})\n\t},\n\n\tAssignDestructure(sk) {\n\t\tcheckDo(this, sk)\n\t\t// Assignees registered by verifyLines.\n\t\tverifyEach(this.assignees)\n\t\tthis.value.verify(SK.Val)\n\t},\n\n\tAwait(_sk) {\n\t\tcheck(funKind === Funs.Async, this.loc, () =>\n\t\t\t`Cannot ${showKeyword(Keywords.Await)} outside of async function.`)\n\t\tthis.value.verify(SK.Val)\n\t},\n\n\tBagEntry(sk) {\n\t\tcheckDo(this, sk)\n\t\taccessLocal(this, 'built')\n\t\tthis.value.verify(SK.Val)\n\t},\n\n\tBagSimple(sk) {\n\t\tcheckVal(this, sk)\n\t\tverifyEach(this.parts, SK.Val)\n\t},\n\n\tBlock: verifyBlock,\n\n\tBlockWrap(sk) {\n\t\tcheckVal(this, sk)\n\t\twithIife(() => this.block.verify(sk))\n\t},\n\n\tBreak(sk) {\n\t\tcheckDo(this, sk)\n\t\tverifyInLoop(this)\n\t\tverifyOp(this.opValue, SK.Val)\n\t\tcheck(results.isStatement(opLoop) === (this.opValue === null), this.loc, () =>\n\t\t\tthis.opValue === null ?\n\t\t\t\t`${showKeyword(Keywords.For)} in expression position must break with a value.` :\n\t\t\t\t`${showKeyword(Keywords.Break)} with value is only valid in ` +\n\t\t\t\t`${showKeyword(Keywords.For)} in expression position.`)\n\t},\n\n\tCall(_sk) {\n\t\tthis.called.verify(SK.Val)\n\t\tverifyEach(this.args, SK.Val)\n\t},\n\n\tCase(sk) {\n\t\tmarkStatement(this, sk)\n\t\twithIifeIfVal(sk, () => {\n\t\t\tconst doIt = () => {\n\t\t\t\tverifyEach(this.parts, sk)\n\t\t\t\tverifyOp(this.opElse, sk)\n\t\t\t}\n\t\t\tifElse(this.opCased,\n\t\t\t\t_ => {\n\t\t\t\t\t_.verify(SK.Do)\n\t\t\t\t\tverifyAndPlusLocal(_.assignee, doIt)\n\t\t\t\t},\n\t\t\t\tdoIt)\n\t\t})\n\t},\n\n\tCasePart(sk) {\n\t\tif (this.test instanceof Pattern) {\n\t\t\tthis.test.type.verify(SK.Val)\n\t\t\tthis.test.patterned.verify(SK.Val)\n\t\t\tverifyAndPlusLocals(this.test.locals, () => this.result.verify(sk))\n\t\t} else {\n\t\t\tthis.test.verify(SK.Val)\n\t\t\tthis.result.verify(sk)\n\t\t}\n\t},\n\n\tCatch(sk) {\n\t\t// No need to do anything with `sk` except pass it to my block.\n\t\tmakeUseOptionalIfFocus(this.caught)\n\t\tverifyNotLazy(this.caught, 'Caught error can not be lazy.')\n\t\tverifyAndPlusLocal(this.caught, () => {\n\t\t\tthis.block.verify(sk)\n\t\t})\n\t},\n\n\tClass(sk) {\n\t\tcheckVal(this, sk)\n\t\tverifyOp(this.opSuperClass, SK.Val)\n\t\tverifyEach(this.kinds, SK.Val)\n\t\tverifyOp(this.opDo)\n\t\tverifyEach(this.statics)\n\t\tverifyOp(this.opConstructor, this.opSuperClass !== null)\n\t\tverifyEach(this.methods)\n\t\t// name set by AssignSingle\n\t},\n\n\tClassKindDo() {\n\t\tverifyAndPlusLocal(this.declareFocus, () => this.block.verify(SK.Do))\n\t},\n\n\tCond(sk) {\n\t\t// Could be a statement if both results are.\n\t\tthis.test.verify(SK.Val)\n\t\tthis.ifTrue.verify(sk)\n\t\tthis.ifFalse.verify(sk)\n\t},\n\n\tConditional(sk) {\n\t\tmarkStatement(this, sk)\n\t\tthis.test.verify(SK.Val)\n\t\twithIifeIf(this.result instanceof Block && sk === SK.Val, () => {\n\t\t\tthis.result.verify(sk)\n\t\t})\n\t},\n\n\tConstructor(classHasSuper) {\n\t\tmakeUseOptional(this.fun.opDeclareThis)\n\t\twithMethod(this, () => { this.fun.verify(SK.Val) })\n\n\t\tconst superCall = results.constructorToSuper.get(this)\n\n\t\tif (classHasSuper)\n\t\t\tcheck(superCall !== undefined, this.loc, () =>\n\t\t\t\t`Constructor must contain ${showKeyword(Keywords.Super)}`)\n\t\telse\n\t\t\tcheck(superCall === undefined, () => superCall.loc, () =>\n\t\t\t\t`Class has no superclass, so ${showKeyword(Keywords.Super)} is not allowed.`)\n\n\t\tfor (const _ of this.memberArgs)\n\t\t\tsetDeclareAccessed(_, this)\n\t},\n\n\tExcept(sk) {\n\t\tmarkStatement(this, sk)\n\t\tif (this.opElse === null)\n\t\t\tthis.try.verify(sk)\n\t\telse {\n\t\t\tplusLocals(verifyDoBlock(this.try), () => this.opElse.verify(sk))\n\t\t\tif (isEmpty(this.allCatches))\n\t\t\t\twarn(this.loc,\n\t\t\t\t\t`${showKeyword(Keywords.Else)} must come after ${showKeyword(Keywords.Catch)}.`)\n\t\t}\n\n\t\tif (isEmpty(this.allCatches) && this.opFinally === null)\n\t\t\twarn(this.loc, `${showKeyword(Keywords.Except)} is pointless without ` +\n\t\t\t\t`${showKeyword(Keywords.Catch)} or ${showKeyword(Keywords.Finally)}.`)\n\n\t\tverifyEach(this.typedCatches, sk)\n\t\tverifyOp(this.opCatchAll, sk)\n\t\tverifyOp(this.opFinally, SK.Do)\n\t},\n\n\tFor(sk) {\n\t\tmarkStatement(this, sk)\n\t\tverifyFor(this)\n\t},\n\n\tForAsync(sk) {\n\t\tmarkStatement(this, sk)\n\t\tcheck(sk !== SK.Do || funKind === Funs.Async, this.loc, () =>\n\t\t\t`${showKeyword(Keywords.ForAsync)} as statement must be inside an async function.`)\n\n\t\twithVerifyIteratee(this.iteratee, () => {\n\t\t\twithFun(Funs.Async, () => {\n\t\t\t\t// Default block to returning a value, but OK if it doesn't.\n\t\t\t\t// If a statement, statement, the compiled code will make a Promise\n\t\t\t\t// that resolves to an array full of `undefined`.\n\t\t\t\tthis.block.verify(getSK(this.block))\n\t\t\t})\n\t\t})\n\t},\n\n\tForBag(sk) {\n\t\tcheckVal(this, sk)\n\t\tverifyAndPlusLocal(this.built, () => verifyFor(this))\n\t},\n\n\tFun(sk) {\n\t\tcheckVal(this, sk)\n\t\tcheck(this.opReturnType === null || !this.isDo, this.loc,\n\t\t\t'Function with return type must return something.')\n\t\tverifyOp(this.opReturnType, SK.Val)\n\t\tconst args = cat(this.opDeclareThis, this.args, this.opRestArg)\n\t\twithFun(this.kind, () => {\n\t\t\tverifyAndPlusLocals(args, () => {\n\t\t\t\tthis.block.verify(this.isDo ? SK.Do : SK.Val)\n\t\t\t})\n\t\t})\n\t\t// name set by AssignSingle\n\t},\n\n\tFunAbstract() {\n\t\tverifyEach(this.args)\n\t\tverifyOp(this.opRestArg)\n\t\tverifyOp(this.opReturnType, SK.Val)\n\t},\n\n\tGetterFun(sk) {\n\t\tcheckVal(this, sk)\n\t\tverifyName(this.name)\n\t},\n\n\tIgnore(sk) {\n\t\tcheckDo(this, sk)\n\t\tfor (const _ of this.ignoredNames)\n\t\t\taccessLocal(this, _)\n\t},\n\n\tKind(sk) {\n\t\tcheckVal(this, sk)\n\t\tverifyEach(this.superKinds, SK.Val)\n\t\tverifyOp(this.opDo, SK.Do)\n\t\tverifyEach(this.statics)\n\t\tverifyEach(this.methods)\n\t\t// name set by AssignSingle\n\t},\n\n\tLazy(sk) {\n\t\tcheckVal(this, sk)\n\t\twithBlockLocals(() => this.value.verify(SK.Val))\n\t},\n\n\tLocalAccess(sk) {\n\t\tcheckVal(this, sk)\n\t\tconst declare = locals.get(this.name)\n\t\tif (declare === undefined) {\n\t\t\tconst builtinPath = options.builtinNameToPath.get(this.name)\n\t\t\tif (builtinPath === undefined)\n\t\t\t\tfailMissingLocal(this.loc, this.name)\n\t\t\telse {\n\t\t\t\tconst names = results.builtinPathToNames.get(builtinPath)\n\t\t\t\tif (names === undefined)\n\t\t\t\t\tresults.builtinPathToNames.set(builtinPath, new Set([this.name]))\n\t\t\t\telse\n\t\t\t\t\tnames.add(this.name)\n\t\t\t}\n\t\t} else {\n\t\t\tresults.localAccessToDeclare.set(this, declare)\n\t\t\tsetDeclareAccessed(declare, this)\n\t\t}\n\t},\n\n\t// Adding LocalDeclares to the available locals is done by Fun or lineNewLocals.\n\tLocalDeclare() {\n\t\tconst builtinPath = options.builtinNameToPath.get(this.name)\n\t\tif (builtinPath !== undefined)\n\t\t\twarn(this.loc, `Local ${code(this.name)} overrides builtin from ${code(builtinPath)}.`)\n\t\tverifyOp(this.opType, SK.Val)\n\t},\n\n\tLocalMutate(sk) {\n\t\tcheckDo(this, sk)\n\t\tthis.value.verify(SK.Val)\n\t},\n\n\tLogic(sk) {\n\t\tcheckVal(this, sk)\n\t\tcheck(this.args.length > 1, this.loc, 'Logic expression needs at least 2 arguments.')\n\t\tverifyEach(this.args, SK.Val)\n\t},\n\n\tNot(sk) {\n\t\tcheckVal(this, sk)\n\t\tthis.arg.verify(SK.Val)\n\t},\n\n\tNumberLiteral(sk) {\n\t\tcheckVal(this, sk)\n\t},\n\n\tMapEntry(sk) {\n\t\tcheckDo(this, sk)\n\t\taccessLocal(this, 'built')\n\t\tthis.key.verify(SK.Val)\n\t\tthis.val.verify(SK.Val)\n\t},\n\n\tMember(sk) {\n\t\tcheckVal(this, sk)\n\t\tthis.object.verify(SK.Val)\n\t\tverifyName(this.name)\n\t},\n\n\tMemberFun(sk) {\n\t\tcheckVal(this, sk)\n\t\tverifyOp(this.opObject, SK.Val)\n\t\tverifyName(this.name)\n\t},\n\n\tMemberSet(sk) {\n\t\tcheckDo(this, sk)\n\t\tthis.object.verify(SK.Val)\n\t\tverifyName(this.name)\n\t\tverifyOp(this.opType, SK.Val)\n\t\tthis.value.verify(SK.Val)\n\t},\n\n\tMethod(sk) {\n\t\tcheckVal(this, sk)\n\t\tmakeUseOptional(this.fun.opDeclareThis)\n\t\tthis.fun.args.forEach(makeUseOptional)\n\t\topEach(this.fun.opRestArg, makeUseOptional)\n\t\tthis.fun.verify(SK.Val)\n\t\t// name set by AssignSingle\n\t},\n\n\tMethodImpl() {\n\t\tverifyMethodImpl(this, () => {\n\t\t\tmakeUseOptional(this.fun.opDeclareThis)\n\t\t\tthis.fun.verify(SK.Val)\n\t\t})\n\t},\n\tMethodGetter() {\n\t\tverifyMethodImpl(this, () => {\n\t\t\tmakeUseOptional(this.declareThis)\n\t\t\tverifyAndPlusLocals([this.declareThis], () => {\n\t\t\t\tthis.block.verify(SK.Val)\n\t\t\t})\n\t\t})\n\t},\n\tMethodSetter() {\n\t\tverifyMethodImpl(this, () => {\n\t\t\tverifyAndPlusLocals([this.declareThis, this.declareFocus], () => {\n\t\t\t\tthis.block.verify(SK.Do)\n\t\t\t})\n\t\t})\n\t},\n\n\tModule() {\n\t\t// No need to verify this.doImports.\n\t\tverifyEach(this.imports)\n\t\twithName(options.moduleName(), () => {\n\t\t\tverifyModuleLines(this.lines, this.loc)\n\t\t})\n\t},\n\n\tNew(sk) {\n\t\tcheckVal(this, sk)\n\t\tthis.type.verify(SK.Val)\n\t\tverifyEach(this.args, SK.val)\n\t},\n\n\tObjEntryAssign(sk) {\n\t\tcheckDo(this, sk)\n\t\tif (!results.isObjEntryExport(this))\n\t\t\taccessLocal(this, 'built')\n\t\tthis.assign.verify(SK.Do)\n\t\tfor (const _ of this.assign.allAssignees())\n\t\t\tsetDeclareAccessed(_, this)\n\t},\n\n\tObjEntryPlain(sk) {\n\t\tcheckDo(this, sk)\n\t\tif (results.isObjEntryExport(this))\n\t\t\tcheck(typeof this.name === 'string', this.loc,\n\t\t\t\t'Module export must have a constant name.')\n\t\telse {\n\t\t\taccessLocal(this, 'built')\n\t\t\tverifyName(this.name)\n\t\t}\n\t\tthis.value.verify(SK.Val)\n\t},\n\n\tObjSimple(sk) {\n\t\tcheckVal(this, sk)\n\t\tconst keys = new Set()\n\t\tfor (const {key, value, loc} of this.pairs) {\n\t\t\tcheck(!keys.has(key), loc, () => `Duplicate key ${key}`)\n\t\t\tkeys.add(key)\n\t\t\tvalue.verify(SK.Val)\n\t\t}\n\t},\n\n\tPipe(sk) {\n\t\tcheckVal(this, sk)\n\t\tthis.value.verify()\n\t\tfor (const pipe of this.pipes)\n\t\t\tregisterAndPlusLocal(LocalDeclare.focus(this.loc), () => {\n\t\t\t\tpipe.verify(SK.Val)\n\t\t\t})\n\t},\n\n\tQuotePlain(sk) {\n\t\tcheckVal(this, sk)\n\t\tfor (const _ of this.parts)\n\t\t\tverifyName(_)\n\t},\n\n\tQuoteSimple(sk) {\n\t\tcheckVal(this, sk)\n\t},\n\n\tQuoteTaggedTemplate(sk) {\n\t\tcheckVal(this, sk)\n\t\tthis.tag.verify(SK.Val)\n\t\tthis.quote.verify(SK.Val)\n\t},\n\n\tRange(sk) {\n\t\tcheckVal(this, sk)\n\t\tthis.start.verify(SK.Val)\n\t\tverifyOp(this.end, SK.Val)\n\t},\n\n\tSetSub(sk) {\n\t\tcheckDo(this, sk)\n\t\tthis.object.verify(SK.Val)\n\t\tverifyEach(this.subbeds, SK.Val)\n\t\tverifyOp(this.opType, SK.Val)\n\t\tthis.value.verify(SK.Val)\n\t},\n\n\tSimpleFun(sk) {\n\t\tcheckVal(this, sk)\n\t\twithBlockLocals(() => {\n\t\t\twithInFunKind(Funs.Plain, () => {\n\t\t\t\tregisterAndPlusLocal(LocalDeclare.focus(this.loc), () => {\n\t\t\t\t\tthis.value.verify()\n\t\t\t\t})\n\t\t\t})\n\t\t})\n\t},\n\n\tSpecialDo(sk) {\n\t\tcheckDo(this, sk)\n\t},\n\n\tSpecialVal(sk) {\n\t\tcheckVal(this, sk)\n\t\tsetName(this)\n\t},\n\n\tSpread() {\n\t\tthis.spreaded.verify(SK.Val)\n\t},\n\n\tSuperCall(sk) {\n\t\tcheck(method !== null, this.loc, 'Must be in a method.')\n\t\tresults.superCallToMethod.set(this, method)\n\n\t\tif (method instanceof Constructor) {\n\t\t\tcheck(sk === SK.Do, this.loc, () =>\n\t\t\t\t`${showKeyword(Keywords.Super)} in constructor must appear as a statement.'`)\n\t\t\tresults.constructorToSuper.set(method, this)\n\t\t}\n\n\t\tverifyEach(this.args, SK.Val)\n\t},\n\n\tSuperMember(sk) {\n\t\tcheckVal(this, sk)\n\t\tcheck(method !== null, this.loc, 'Must be in method.')\n\t\tverifyName(this.name)\n\t},\n\n\tSwitch(sk) {\n\t\tmarkStatement(this, sk)\n\t\twithIifeIfVal(sk, () => {\n\t\t\tthis.switched.verify(SK.Val)\n\t\t\tverifyEach(this.parts, sk)\n\t\t\tverifyOp(this.opElse, sk)\n\t\t})\n\t},\n\n\tSwitchPart(sk) {\n\t\tmarkStatement(this, sk)\n\t\tverifyEach(this.values, SK.Val)\n\t\tthis.result.verify(sk)\n\t},\n\n\tThrow() {\n\t\tverifyOp(this.opThrown, SK.Val)\n\t},\n\n\tImport() {\n\t\t// Since Uses are always in the outermost scope, don't have to worry about shadowing.\n\t\t// So we mutate `locals` directly.\n\t\tconst addUseLocal = _ => {\n\t\t\tconst prev = locals.get(_.name)\n\t\t\tcheck(prev === undefined, _.loc, () =>\n\t\t\t\t`${code(_.name)} already imported at ${prev.loc}`)\n\t\t\tverifyLocalDeclare(_)\n\t\t\tsetLocal(_)\n\t\t}\n\t\tfor (const _ of this.imported)\n\t\t\taddUseLocal(_)\n\t\topEach(this.opImportDefault, addUseLocal)\n\t},\n\n\tWith(sk) {\n\t\tmarkStatement(this, sk)\n\t\tthis.value.verify(SK.Val)\n\t\twithIifeIfVal(sk, () => {\n\t\t\tif (sk === SK.Val)\n\t\t\t\tmakeUseOptionalIfFocus(this.declare)\n\t\t\tverifyAndPlusLocal(this.declare, () => {\n\t\t\t\tthis.block.verify(SK.Do)\n\t\t\t})\n\t\t})\n\t},\n\n\tYield(_sk) {\n\t\tcheck(funKind === Funs.Generator, this.loc, () =>\n\t\t\t`Cannot ${showKeyword(Keywords.Yield)} outside of generator function.`)\n\t\tverifyOp(this.opValue, SK.Val)\n\t},\n\n\tYieldTo(_sk) {\n\t\tcheck(funKind === Funs.Generator, this.loc, () =>\n\t\t\t`Cannot ${showKeyword(Keywords.YieldTo)} outside of generator function.`)\n\t\tthis.value.verify(SK.Val)\n\t}\n})\n\n// Helpers specific to certain MsAst types\n\nfunction verifyFor(forLoop) {\n\tconst verifyBlock = () => withLoop(forLoop, () => {\n\t\tforLoop.block.verify(SK.Do)\n\t})\n\tifElse(forLoop.opIteratee, _ => { withVerifyIteratee(_, verifyBlock) }, verifyBlock)\n}\n\nfunction withVerifyIteratee({element, bag}, action) {\n\tbag.verify(SK.Val)\n\tverifyNotLazy(element, 'Iteration element can not be lazy.')\n\tverifyAndPlusLocal(element, action)\n}\n\nfunction verifyInLoop(loopUser) {\n\tcheck(opLoop !== null, loopUser.loc, 'Not in a loop.')\n}\n\nfunction verifyMethodImpl(_, doVerify) {\n\tverifyName(_.symbol)\n\twithMethod(_, doVerify)\n}\n"
  },
  {
    "__docId__": 780,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "verify",
    "memberof": "src/private/verify/verify.js",
    "longname": "src/private/verify/verify.js~verify",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/verify.js",
    "importStyle": "verify",
    "description": "Generates information needed during transpiling, the VerifyResults.\nAlso checks for existence of local variables and warns for unused locals.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "MsAst"
        ],
        "spread": false,
        "optional": false,
        "name": "msAst",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 781,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "verifyFor",
    "memberof": "src/private/verify/verify.js",
    "longname": "src/private/verify/verify.js~verifyFor",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/verify/verify.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 577,
    "undocument": true,
    "params": [
      {
        "name": "forLoop",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 782,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "withVerifyIteratee",
    "memberof": "src/private/verify/verify.js",
    "longname": "src/private/verify/verify.js~withVerifyIteratee",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/verify/verify.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 584,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"element\": *, \"bag\": *}"
        ],
        "defaultRaw": {
          "element": null,
          "bag": null
        },
        "defaultValue": "{\"element\":null,\"bag\":null}"
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 783,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "verifyInLoop",
    "memberof": "src/private/verify/verify.js",
    "longname": "src/private/verify/verify.js~verifyInLoop",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/verify/verify.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 590,
    "undocument": true,
    "params": [
      {
        "name": "loopUser",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 784,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "verifyMethodImpl",
    "memberof": "src/private/verify/verify.js",
    "longname": "src/private/verify/verify.js~verifyMethodImpl",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/verify/verify.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 594,
    "undocument": true,
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      },
      {
        "name": "doVerify",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 785,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/verify/verifyBlock.js",
    "memberof": null,
    "longname": "src/private/verify/verifyBlock.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {check} from '../context'\nimport {ObjEntry, LocalDeclare} from '../MsAst'\nimport {ifElse, isEmpty, last, rtail} from '../util'\nimport {Blocks, Modules} from '../VerifyResults'\nimport autoBlockKind, {opBlockBuildKind} from './autoBlockKind'\nimport {results} from './context'\nimport {plusLocals, verifyAndPlusLocal} from './locals'\nimport SK, {getSK} from './SK'\nimport verifyLines from './verifyLines'\n\nexport default function verifyBlock(sk) {\n\tif (sk === SK.Do)\n\t\tverifyDoBlock(this)\n\telse {\n\t\tcheck(!isEmpty(this.lines), 'Value block must have some content.')\n\t\tconst kind = autoBlockKind(this.lines, this.loc)\n\t\tswitch (kind) {\n\t\t\tcase Blocks.Bag: case Blocks.Map: case Blocks.Obj:\n\t\t\t\tverifyBuiltLines(this.lines, this.loc)\n\t\t\t\tbreak\n\t\t\tcase Blocks.Throw:\n\t\t\t\tverifyLines(this.lines)\n\t\t\t\tbreak\n\t\t\tcase Blocks.Return:\n\t\t\t\tplusLocals(verifyLines(rtail(this.lines)), () => {\n\t\t\t\t\tlast(this.lines).verify(SK.Val)\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tthrow new Error(kind)\n\t\t}\n\t\tresults.blockToKind.set(this, kind)\n\t}\n}\n\nexport function verifyDoBlock(_) {\n\tresults.blockToKind.set(_, Blocks.Do)\n\treturn verifyLines(_.lines)\n}\n\nexport function verifyModuleLines(lines, loc) {\n\tresults.moduleKind = ifElse(opBlockBuildKind(lines, loc),\n\t\tbuildKind => {\n\t\t\tif (buildKind === Blocks.Obj) {\n\t\t\t\tfor (const line of lines)\n\t\t\t\t\tif (line instanceof ObjEntry)\n\t\t\t\t\t\tresults.objEntryExports.add(line)\n\t\t\t\tverifyLines(lines)\n\t\t\t\treturn Modules.Exports\n\t\t\t} else {\n\t\t\t\tverifyBuiltLines(lines, loc)\n\t\t\t\treturn buildKind === Blocks.Bag ? Modules.Bag : Modules.Map\n\t\t\t}\n\t\t},\n\t\t() => {\n\t\t\tif (isEmpty(lines))\n\t\t\t\treturn Modules.Do\n\t\t\telse {\n\t\t\t\tconst l = last(lines)\n\t\t\t\tconst lastSK = getSK(l)\n\t\t\t\tif (lastSK === SK.Do) {\n\t\t\t\t\tverifyLines(lines)\n\t\t\t\t\treturn Modules.Do\n\t\t\t\t} else {\n\t\t\t\t\tconst newLocals = verifyLines(rtail(lines))\n\t\t\t\t\tplusLocals(newLocals, () => {\n\t\t\t\t\t\tl.verify(lastSK)\n\t\t\t\t\t})\n\t\t\t\t\treturn Modules.Val\n\t\t\t\t}\n\t\t\t}\n\t\t})\n}\n\nfunction verifyBuiltLines(lines, loc) {\n\tverifyAndPlusLocal(LocalDeclare.built(loc), () => { verifyLines(lines) })\n}\n"
  },
  {
    "__docId__": 786,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "verifyBlock",
    "memberof": "src/private/verify/verifyBlock.js",
    "longname": "src/private/verify/verifyBlock.js~verifyBlock",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/verifyBlock.js",
    "importStyle": "verifyBlock",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "sk",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 787,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "verifyDoBlock",
    "memberof": "src/private/verify/verifyBlock.js",
    "longname": "src/private/verify/verifyBlock.js~verifyDoBlock",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/verifyBlock.js",
    "importStyle": "{verifyDoBlock}",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 788,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "verifyModuleLines",
    "memberof": "src/private/verify/verifyBlock.js",
    "longname": "src/private/verify/verifyBlock.js~verifyModuleLines",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/verifyBlock.js",
    "importStyle": "{verifyModuleLines}",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "lines",
        "types": [
          "*"
        ]
      },
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 789,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "verifyBuiltLines",
    "memberof": "src/private/verify/verifyBlock.js",
    "longname": "src/private/verify/verifyBlock.js~verifyBuiltLines",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/verify/verifyBlock.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "lines",
        "types": [
          "*"
        ]
      },
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 790,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/private/verify/verifyLines.js",
    "memberof": null,
    "longname": "src/private/verify/verifyLines.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {code} from '../../CompileError'\nimport {check} from '../context'\nimport {AssignDestructure, AssignSingle, ObjEntry} from '../MsAst'\nimport {assert, reverseIter} from '../util'\nimport {locals, pendingBlockLocals} from './context'\nimport {deleteLocal, registerLocal, setLocal} from './locals'\nimport SK from './SK'\n\n/**\nVerifies each line, accumulating locals.\n@return List of every new local from `lines`.\n*/\nexport default function verifyLines(lines) {\n\t/*\n\tWe need to get all block locals up-front because\n\tFunctions within lines can access locals from later lines.\n\tNOTE: We push these onto pendingBlockLocals in reverse\n\tso that when we iterate through lines forwards, we can pop from pendingBlockLocals\n\tto remove pending locals as they become real locals.\n\tIt doesn't really matter what order we add locals in since it's not allowed\n\tto have two locals of the same name in the same block.\n\t*/\n\tconst newLocals = []\n\n\tfor (const line of reverseIter(lines))\n\t\tfor (const _ of reverseIter(lineNewLocals(line))) {\n\t\t\t// Register the local now. Can't wait until the assign is verified.\n\t\t\tregisterLocal(_)\n\t\t\tnewLocals.push(_)\n\t\t}\n\n\tpendingBlockLocals.push(...newLocals)\n\n\t/*\n\tKeeps track of locals which have already been added in this block.\n\tMason allows shadowing, but not within the same block.\n\tSo, this is allowed:\n\t\ta = 1\n\t\tb =\n\t\t\ta = 2\n\t\t\t...\n\tBut not:\n\t\ta = 1\n\t\ta = 2\n\t*/\n\tconst thisBlockLocalNames = new Set()\n\n\t// All shadowed locals for this block.\n\tconst shadowed = []\n\n\tfor (const line of lines) {\n\t\tfor (const newLocal of lineNewLocals(line)) {\n\t\t\tconst name = newLocal.name\n\t\t\tconst oldLocal = locals.get(name)\n\t\t\tif (oldLocal !== undefined) {\n\t\t\t\tcheck(!thisBlockLocalNames.has(name), newLocal.loc,\n\t\t\t\t\t() => `A local ${code(name)} is already in this block.`)\n\t\t\t\tshadowed.push(oldLocal)\n\t\t\t}\n\t\t\tthisBlockLocalNames.add(name)\n\t\t\tsetLocal(newLocal)\n\n\t\t\t// Now that it's added as a local, it's no longer pending.\n\t\t\t// We added pendingBlockLocals in the right order that we can just pop them off.\n\t\t\tconst popped = pendingBlockLocals.pop()\n\t\t\tassert(popped === newLocal)\n\t\t}\n\t\tline.verify(SK.Do)\n\t}\n\n\tnewLocals.forEach(deleteLocal)\n\tshadowed.forEach(setLocal)\n\treturn newLocals\n}\n\nfunction lineNewLocals(line) {\n\treturn line instanceof AssignSingle ?\n\t\t[line.assignee] :\n\t\tline instanceof AssignDestructure ?\n\t\tline.assignees :\n\t\tline instanceof ObjEntry ?\n\t\tlineNewLocals(line.assign) :\n\t\t[]\n}\n"
  },
  {
    "__docId__": 791,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "verifyLines",
    "memberof": "src/private/verify/verifyLines.js",
    "longname": "src/private/verify/verifyLines.js~verifyLines",
    "access": null,
    "export": true,
    "importPath": "mason-compile/src/private/verify/verifyLines.js",
    "importStyle": "verifyLines",
    "description": "Verifies each line, accumulating locals.",
    "lineNumber": 13,
    "params": [
      {
        "name": "lines",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "List of every new local from `lines`."
    },
    "generator": false
  },
  {
    "__docId__": 792,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "lineNewLocals",
    "memberof": "src/private/verify/verifyLines.js",
    "longname": "src/private/verify/verifyLines.js~lineNewLocals",
    "access": null,
    "export": false,
    "importPath": "mason-compile/src/private/verify/verifyLines.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "line",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 794,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 795,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 796,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 797,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 798,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 799,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 800,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 801,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 802,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 803,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 804,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 805,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 806,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 807,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 808,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 809,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 810,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 811,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 812,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 813,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 814,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 815,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 816,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 817,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 818,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 819,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 820,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 821,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 822,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 823,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 824,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 825,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 826,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 827,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 828,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 829,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 830,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 831,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 832,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 833,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 834,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 835,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 836,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 837,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 838,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 839,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 840,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 842,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 843,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 844,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 845,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 846,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 847,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 848,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 849,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": null,
    "builtinExternal": true
  }
]